
RTU-F072C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006708  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006868  08006868  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08006868  08006868  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006868  08006868  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08006870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000044  080068b4  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080068b4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cbb  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003707  00000000  00000000  00037d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  0003c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c59d  00000000  00000000  0003cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001407d  00000000  00000000  00059565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b380  00000000  00000000  0006d5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  001089b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067b0 	.word	0x080067b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	080067b0 	.word	0x080067b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <set_do>:
uint8_t Do2 = 0;
uint8_t Do3 = 0;
uint8_t Do4 = 0;

void set_do(uint8_t *a)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uint8_t chek = 0;
 8000228:	230f      	movs	r3, #15
 800022a:	18fb      	adds	r3, r7, r3
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<4; i++)
 8000230:	230e      	movs	r3, #14
 8000232:	18fb      	adds	r3, r7, r3
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	e010      	b.n	800025c <set_do+0x3c>
	{
		chek = a[i] + chek;
 800023a:	200e      	movs	r0, #14
 800023c:	183b      	adds	r3, r7, r0
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	18d3      	adds	r3, r2, r3
 8000244:	7819      	ldrb	r1, [r3, #0]
 8000246:	220f      	movs	r2, #15
 8000248:	18bb      	adds	r3, r7, r2
 800024a:	18ba      	adds	r2, r7, r2
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	188a      	adds	r2, r1, r2
 8000250:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<4; i++)
 8000252:	183b      	adds	r3, r7, r0
 8000254:	781a      	ldrb	r2, [r3, #0]
 8000256:	183b      	adds	r3, r7, r0
 8000258:	3201      	adds	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	230e      	movs	r3, #14
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b03      	cmp	r3, #3
 8000264:	d9e9      	bls.n	800023a <set_do+0x1a>
	}
	if(chek != a[4]);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	3304      	adds	r3, #4
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	220f      	movs	r2, #15
 800026e:	18ba      	adds	r2, r7, r2
 8000270:	7812      	ldrb	r2, [r2, #0]
 8000272:	429a      	cmp	r2, r3
 8000274:	d16a      	bne.n	800034c <set_do+0x12c>

	else if(a[2] == 0xff)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3302      	adds	r3, #2
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2bff      	cmp	r3, #255	; 0xff
 800027e:	d130      	bne.n	80002e2 <set_do+0xc2>
	{
		if(a[1] == 0x00)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d106      	bne.n	8000298 <set_do+0x78>
			HAL_GPIO_WritePin(D_O_1_GPIO_Port, D_O_1_Pin, GPIO_PIN_SET);
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	4831      	ldr	r0, [pc, #196]	; (8000354 <set_do+0x134>)
 8000290:	2201      	movs	r2, #1
 8000292:	0019      	movs	r1, r3
 8000294:	f002 fadb 	bl	800284e <HAL_GPIO_WritePin>
		if(a[1] == 0x10)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3301      	adds	r3, #1
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b10      	cmp	r3, #16
 80002a0:	d106      	bne.n	80002b0 <set_do+0x90>
			HAL_GPIO_WritePin(D_O_2_GPIO_Port, D_O_2_Pin, GPIO_PIN_SET);
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	019b      	lsls	r3, r3, #6
 80002a6:	482c      	ldr	r0, [pc, #176]	; (8000358 <set_do+0x138>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	0019      	movs	r1, r3
 80002ac:	f002 facf 	bl	800284e <HAL_GPIO_WritePin>
		if(a[1] == 0x20)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3301      	adds	r3, #1
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b20      	cmp	r3, #32
 80002b8:	d106      	bne.n	80002c8 <set_do+0xa8>
			HAL_GPIO_WritePin(D_O_3_GPIO_Port, D_O_3_Pin, GPIO_PIN_SET);
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	01db      	lsls	r3, r3, #7
 80002be:	4826      	ldr	r0, [pc, #152]	; (8000358 <set_do+0x138>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	0019      	movs	r1, r3
 80002c4:	f002 fac3 	bl	800284e <HAL_GPIO_WritePin>
		if(a[1] == 0x40)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b40      	cmp	r3, #64	; 0x40
 80002d0:	d13c      	bne.n	800034c <set_do+0x12c>
			HAL_GPIO_WritePin(D_O_4_GPIO_Port, D_O_4_Pin, GPIO_PIN_SET);
 80002d2:	2380      	movs	r3, #128	; 0x80
 80002d4:	021b      	lsls	r3, r3, #8
 80002d6:	4820      	ldr	r0, [pc, #128]	; (8000358 <set_do+0x138>)
 80002d8:	2201      	movs	r2, #1
 80002da:	0019      	movs	r1, r3
 80002dc:	f002 fab7 	bl	800284e <HAL_GPIO_WritePin>
		if(a[1] == 0x20)
			HAL_GPIO_WritePin(D_O_3_GPIO_Port, D_O_3_Pin, GPIO_PIN_RESET);
		if(a[1] == 0x40)
			HAL_GPIO_WritePin(D_O_4_GPIO_Port, D_O_4_Pin, GPIO_PIN_RESET);
	}
}
 80002e0:	e034      	b.n	800034c <set_do+0x12c>
	else if(a[2] == 0xBB)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3302      	adds	r3, #2
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2bbb      	cmp	r3, #187	; 0xbb
 80002ea:	d12f      	bne.n	800034c <set_do+0x12c>
		if(a[1] == 0x00)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d106      	bne.n	8000304 <set_do+0xe4>
			HAL_GPIO_WritePin(D_O_1_GPIO_Port, D_O_1_Pin, GPIO_PIN_RESET);
 80002f6:	2380      	movs	r3, #128	; 0x80
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4816      	ldr	r0, [pc, #88]	; (8000354 <set_do+0x134>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	0019      	movs	r1, r3
 8000300:	f002 faa5 	bl	800284e <HAL_GPIO_WritePin>
		if(a[1] == 0x10)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3301      	adds	r3, #1
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b10      	cmp	r3, #16
 800030c:	d106      	bne.n	800031c <set_do+0xfc>
			HAL_GPIO_WritePin(D_O_2_GPIO_Port, D_O_2_Pin, GPIO_PIN_RESET);
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	019b      	lsls	r3, r3, #6
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <set_do+0x138>)
 8000314:	2200      	movs	r2, #0
 8000316:	0019      	movs	r1, r3
 8000318:	f002 fa99 	bl	800284e <HAL_GPIO_WritePin>
		if(a[1] == 0x20)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3301      	adds	r3, #1
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b20      	cmp	r3, #32
 8000324:	d106      	bne.n	8000334 <set_do+0x114>
			HAL_GPIO_WritePin(D_O_3_GPIO_Port, D_O_3_Pin, GPIO_PIN_RESET);
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	01db      	lsls	r3, r3, #7
 800032a:	480b      	ldr	r0, [pc, #44]	; (8000358 <set_do+0x138>)
 800032c:	2200      	movs	r2, #0
 800032e:	0019      	movs	r1, r3
 8000330:	f002 fa8d 	bl	800284e <HAL_GPIO_WritePin>
		if(a[1] == 0x40)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b40      	cmp	r3, #64	; 0x40
 800033c:	d106      	bne.n	800034c <set_do+0x12c>
			HAL_GPIO_WritePin(D_O_4_GPIO_Port, D_O_4_Pin, GPIO_PIN_RESET);
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	021b      	lsls	r3, r3, #8
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <set_do+0x138>)
 8000344:	2200      	movs	r2, #0
 8000346:	0019      	movs	r1, r3
 8000348:	f002 fa81 	bl	800284e <HAL_GPIO_WritePin>
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b004      	add	sp, #16
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000400 	.word	0x48000400
 8000358:	48000800 	.word	0x48000800

0800035c <set_dac>:

void set_dac(uint8_t *a)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	uint8_t chek = 0;
 8000364:	230f      	movs	r3, #15
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<5; i++)
 800036c:	230e      	movs	r3, #14
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	e010      	b.n	8000398 <set_dac+0x3c>
	{
		chek = a[i] + chek;
 8000376:	200e      	movs	r0, #14
 8000378:	183b      	adds	r3, r7, r0
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	18d3      	adds	r3, r2, r3
 8000380:	7819      	ldrb	r1, [r3, #0]
 8000382:	220f      	movs	r2, #15
 8000384:	18bb      	adds	r3, r7, r2
 8000386:	18ba      	adds	r2, r7, r2
 8000388:	7812      	ldrb	r2, [r2, #0]
 800038a:	188a      	adds	r2, r1, r2
 800038c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<5; i++)
 800038e:	183b      	adds	r3, r7, r0
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	183b      	adds	r3, r7, r0
 8000394:	3201      	adds	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
 8000398:	230e      	movs	r3, #14
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b04      	cmp	r3, #4
 80003a0:	d9e9      	bls.n	8000376 <set_dac+0x1a>
	}
	if(chek != a[5]);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3305      	adds	r3, #5
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	220f      	movs	r2, #15
 80003aa:	18ba      	adds	r2, r7, r2
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d12a      	bne.n	8000408 <set_dac+0xac>

	else if(a[1] == 0xff)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2bff      	cmp	r3, #255	; 0xff
 80003ba:	d110      	bne.n	80003de <set_dac+0x82>
	{
		t_short b;
		b.B.L = a[2];
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	789a      	ldrb	r2, [r3, #2]
 80003c0:	210c      	movs	r1, #12
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	701a      	strb	r2, [r3, #0]
		b.B.H = a[3];
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	78da      	ldrb	r2, [r3, #3]
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	705a      	strb	r2, [r3, #1]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, b.S);
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	480f      	ldr	r0, [pc, #60]	; (8000410 <set_dac+0xb4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	2100      	movs	r1, #0
 80003d8:	f001 fe71 	bl	80020be <HAL_DAC_SetValue>
		b.B.L = a[2];
		b.B.H = a[3];
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, b.S);
	}

}
 80003dc:	e014      	b.n	8000408 <set_dac+0xac>
	else if(a[1] == 0xBB)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3301      	adds	r3, #1
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2bbb      	cmp	r3, #187	; 0xbb
 80003e6:	d10f      	bne.n	8000408 <set_dac+0xac>
		b.B.L = a[2];
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	789a      	ldrb	r2, [r3, #2]
 80003ec:	2108      	movs	r1, #8
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	701a      	strb	r2, [r3, #0]
		b.B.H = a[3];
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	78da      	ldrb	r2, [r3, #3]
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	705a      	strb	r2, [r3, #1]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, b.S);
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	4804      	ldr	r0, [pc, #16]	; (8000410 <set_dac+0xb4>)
 8000400:	2200      	movs	r2, #0
 8000402:	2110      	movs	r1, #16
 8000404:	f001 fe5b 	bl	80020be <HAL_DAC_SetValue>
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b004      	add	sp, #16
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000016c 	.word	0x2000016c

08000414 <ADC_config_chanel>:


void ADC_config_chanel(uint32_t channel, uint8_t val)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	000a      	movs	r2, r1
 800041e:	1cfb      	adds	r3, r7, #3
 8000420:	701a      	strb	r2, [r3, #0]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8000422:	210c      	movs	r1, #12
 8000424:	187b      	adds	r3, r7, r1
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	601a      	str	r2, [r3, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2206      	movs	r2, #6
 800042e:	609a      	str	r2, [r3, #8]

  if(val == 1)
 8000430:	1cfb      	adds	r3, r7, #3
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d104      	bne.n	8000442 <ADC_config_chanel+0x2e>
  {
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0152      	lsls	r2, r2, #5
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	e003      	b.n	800044a <ADC_config_chanel+0x36>
  }
  else
  {
    sConfig.Rank = ADC_RANK_NONE;
 8000442:	230c      	movs	r3, #12
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	4a06      	ldr	r2, [pc, #24]	; (8000460 <ADC_config_chanel+0x4c>)
 8000448:	605a      	str	r2, [r3, #4]
  }

  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800044a:	230c      	movs	r3, #12
 800044c:	18fa      	adds	r2, r7, r3
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <ADC_config_chanel+0x50>)
 8000450:	0011      	movs	r1, r2
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fa3a 	bl	80018cc <HAL_ADC_ConfigChannel>
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b006      	add	sp, #24
 800045e:	bd80      	pop	{r7, pc}
 8000460:	00001001 	.word	0x00001001
 8000464:	200001c4 	.word	0x200001c4

08000468 <ADC_read_1_chanel>:

uint32_t ADC_read_1_chanel(uint32_t channel)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t adc_val;

  ADC_config_chanel(channel, 1);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2101      	movs	r1, #1
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ffcd 	bl	8000414 <ADC_config_chanel>

  HAL_ADCEx_Calibration_Start(&hadc);
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <ADC_read_1_chanel+0x58>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fc75 	bl	8001d6c <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start(&hadc);
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <ADC_read_1_chanel+0x58>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 f8e9 	bl	800165c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 800048a:	23fa      	movs	r3, #250	; 0xfa
 800048c:	009a      	lsls	r2, r3, #2
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <ADC_read_1_chanel+0x58>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f001 f976 	bl	8001784 <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc);
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <ADC_read_1_chanel+0x58>)
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fa0a 	bl	80018b4 <HAL_ADC_GetValue>
 80004a0:	0003      	movs	r3, r0
 80004a2:	60fb      	str	r3, [r7, #12]
  HAL_ADC_Stop(&hadc);
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <ADC_read_1_chanel+0x58>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 f92c 	bl	8001704 <HAL_ADC_Stop>

  ADC_config_chanel(channel, 0);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2100      	movs	r1, #0
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ffaf 	bl	8000414 <ADC_config_chanel>

  return adc_val;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	0018      	movs	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200001c4 	.word	0x200001c4

080004c4 <ADC_Send>:

void ADC_Send(uint8_t* buf)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	t_short a;
	buf[0] = 0xAA;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	22aa      	movs	r2, #170	; 0xaa
 80004d0:	701a      	strb	r2, [r3, #0]
	buf[1] = 0xFF;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	3301      	adds	r3, #1
 80004d6:	22ff      	movs	r2, #255	; 0xff
 80004d8:	701a      	strb	r2, [r3, #0]
	//adc data to buf
	a.S = ADC_read_1_chanel(ADC_CHANNEL_0);
 80004da:	2000      	movs	r0, #0
 80004dc:	f7ff ffc4 	bl	8000468 <ADC_read_1_chanel>
 80004e0:	0003      	movs	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	240c      	movs	r4, #12
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	801a      	strh	r2, [r3, #0]
	buf[2] = a.B.H ;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3302      	adds	r3, #2
 80004ee:	193a      	adds	r2, r7, r4
 80004f0:	7852      	ldrb	r2, [r2, #1]
 80004f2:	701a      	strb	r2, [r3, #0]
	buf[3] = a.B.L ;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3303      	adds	r3, #3
 80004f8:	193a      	adds	r2, r7, r4
 80004fa:	7812      	ldrb	r2, [r2, #0]
 80004fc:	701a      	strb	r2, [r3, #0]

	a.S = ADC_read_1_chanel(ADC_CHANNEL_1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f7ff ffb2 	bl	8000468 <ADC_read_1_chanel>
 8000504:	0003      	movs	r3, r0
 8000506:	b29a      	uxth	r2, r3
 8000508:	193b      	adds	r3, r7, r4
 800050a:	801a      	strh	r2, [r3, #0]
	buf[4] = a.B.H ;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3304      	adds	r3, #4
 8000510:	193a      	adds	r2, r7, r4
 8000512:	7852      	ldrb	r2, [r2, #1]
 8000514:	701a      	strb	r2, [r3, #0]
	buf[5] = a.B.L ;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3305      	adds	r3, #5
 800051a:	193a      	adds	r2, r7, r4
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	701a      	strb	r2, [r3, #0]

	a.S = ADC_read_1_chanel(ADC_CHANNEL_2);
 8000520:	2002      	movs	r0, #2
 8000522:	f7ff ffa1 	bl	8000468 <ADC_read_1_chanel>
 8000526:	0003      	movs	r3, r0
 8000528:	b29a      	uxth	r2, r3
 800052a:	193b      	adds	r3, r7, r4
 800052c:	801a      	strh	r2, [r3, #0]
	buf[6] = a.B.H ;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3306      	adds	r3, #6
 8000532:	193a      	adds	r2, r7, r4
 8000534:	7852      	ldrb	r2, [r2, #1]
 8000536:	701a      	strb	r2, [r3, #0]
	buf[7] = a.B.L ;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3307      	adds	r3, #7
 800053c:	193a      	adds	r2, r7, r4
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]

	a.S = ADC_read_1_chanel(ADC_CHANNEL_3);
 8000542:	2003      	movs	r0, #3
 8000544:	f7ff ff90 	bl	8000468 <ADC_read_1_chanel>
 8000548:	0003      	movs	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	0021      	movs	r1, r4
 800054e:	187b      	adds	r3, r7, r1
 8000550:	801a      	strh	r2, [r3, #0]
	buf[8] = a.B.H;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	3308      	adds	r3, #8
 8000556:	187a      	adds	r2, r7, r1
 8000558:	7852      	ldrb	r2, [r2, #1]
 800055a:	701a      	strb	r2, [r3, #0]
	buf[9] = a.B.L ;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3309      	adds	r3, #9
 8000560:	187a      	adds	r2, r7, r1
 8000562:	7812      	ldrb	r2, [r2, #0]
 8000564:	701a      	strb	r2, [r3, #0]
	//gpio data to buf
	buf[10] = HAL_GPIO_ReadPin(D_I_1_GPIO_Port, D_I_1_Pin);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	330a      	adds	r3, #10
 800056a:	001c      	movs	r4, r3
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <ADC_Send+0x108>)
 800056e:	2120      	movs	r1, #32
 8000570:	0018      	movs	r0, r3
 8000572:	f002 f94f 	bl	8002814 <HAL_GPIO_ReadPin>
 8000576:	0003      	movs	r3, r0
 8000578:	7023      	strb	r3, [r4, #0]
	buf[11] = HAL_GPIO_ReadPin(D_I_2_GPIO_Port, D_I_2_Pin);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	330b      	adds	r3, #11
 800057e:	001c      	movs	r4, r3
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <ADC_Send+0x108>)
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	0018      	movs	r0, r3
 8000586:	f002 f945 	bl	8002814 <HAL_GPIO_ReadPin>
 800058a:	0003      	movs	r3, r0
 800058c:	7023      	strb	r3, [r4, #0]
	buf[12] = HAL_GPIO_ReadPin(D_I_3_GPIO_Port, D_I_3_Pin);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	330c      	adds	r3, #12
 8000592:	001c      	movs	r4, r3
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <ADC_Send+0x108>)
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	0018      	movs	r0, r3
 800059a:	f002 f93b 	bl	8002814 <HAL_GPIO_ReadPin>
 800059e:	0003      	movs	r3, r0
 80005a0:	7023      	strb	r3, [r4, #0]
	buf[13] = HAL_GPIO_ReadPin(D_I_4_GPIO_Port, D_I_4_Pin);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	330d      	adds	r3, #13
 80005a6:	001c      	movs	r4, r3
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <ADC_Send+0x108>)
 80005ae:	0019      	movs	r1, r3
 80005b0:	0010      	movs	r0, r2
 80005b2:	f002 f92f 	bl	8002814 <HAL_GPIO_ReadPin>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
	buf[14] = 0xEE;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	330e      	adds	r3, #14
 80005be:	22ee      	movs	r2, #238	; 0xee
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b005      	add	sp, #20
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	48000400 	.word	0x48000400

080005d0 <Uart_send>:



void Uart_send(uint8_t* buf)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	uint8_t chek = 0;
 80005d8:	2317      	movs	r3, #23
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10;i++)
 80005e0:	2316      	movs	r3, #22
 80005e2:	18fb      	adds	r3, r7, r3
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e010      	b.n	800060c <Uart_send+0x3c>
	{
		chek = chek + buf[i];
 80005ea:	2016      	movs	r0, #22
 80005ec:	183b      	adds	r3, r7, r0
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	18d3      	adds	r3, r2, r3
 80005f4:	7819      	ldrb	r1, [r3, #0]
 80005f6:	2217      	movs	r2, #23
 80005f8:	18bb      	adds	r3, r7, r2
 80005fa:	18ba      	adds	r2, r7, r2
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	188a      	adds	r2, r1, r2
 8000600:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10;i++)
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	183b      	adds	r3, r7, r0
 8000608:	3201      	adds	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	2316      	movs	r3, #22
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b09      	cmp	r3, #9
 8000614:	d9e9      	bls.n	80005ea <Uart_send+0x1a>
	}
	if(chek ==  buf[10])
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	330a      	adds	r3, #10
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2217      	movs	r2, #23
 800061e:	18ba      	adds	r2, r7, r2
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d129      	bne.n	800067a <Uart_send+0xaa>
	{
		uint8_t data[8];//= "0123456789" ;
		data[0] = buf[1];
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	785a      	ldrb	r2, [r3, #1]
 800062a:	210c      	movs	r1, #12
 800062c:	187b      	adds	r3, r7, r1
 800062e:	701a      	strb	r2, [r3, #0]
		data[1] = buf[2];
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	789a      	ldrb	r2, [r3, #2]
 8000634:	187b      	adds	r3, r7, r1
 8000636:	705a      	strb	r2, [r3, #1]
		data[2] = buf[3];
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	78da      	ldrb	r2, [r3, #3]
 800063c:	187b      	adds	r3, r7, r1
 800063e:	709a      	strb	r2, [r3, #2]
		data[3] = buf[4];
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791a      	ldrb	r2, [r3, #4]
 8000644:	187b      	adds	r3, r7, r1
 8000646:	70da      	strb	r2, [r3, #3]
		data[4] = buf[5];
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	795a      	ldrb	r2, [r3, #5]
 800064c:	187b      	adds	r3, r7, r1
 800064e:	711a      	strb	r2, [r3, #4]
		data[5] = buf[6];
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	799a      	ldrb	r2, [r3, #6]
 8000654:	187b      	adds	r3, r7, r1
 8000656:	715a      	strb	r2, [r3, #5]
		data[6] = buf[7];
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	79da      	ldrb	r2, [r3, #7]
 800065c:	187b      	adds	r3, r7, r1
 800065e:	719a      	strb	r2, [r3, #6]
		data[7] = buf[8];
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7a1a      	ldrb	r2, [r3, #8]
 8000664:	187b      	adds	r3, r7, r1
 8000666:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit_IT(&huart1, data, 8);
 8000668:	1879      	adds	r1, r7, r1
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <Uart_send+0xb4>)
 800066c:	2208      	movs	r2, #8
 800066e:	0018      	movs	r0, r3
 8000670:	f003 fb5c 	bl	8003d2c <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f000 fe8d 	bl	8001394 <HAL_Delay>
	}

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b006      	add	sp, #24
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	200000e8 	.word	0x200000e8

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fe1e 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f80f 	bl	80006b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f9b8 	bl	8000a08 <MX_GPIO_Init>
  MX_ADC_Init();
 8000698:	f000 f870 	bl	800077c <MX_ADC_Init>
  MX_DAC_Init();
 800069c:	f000 f8f0 	bl	8000880 <MX_DAC_Init>
  MX_SPI2_Init();
 80006a0:	f000 f926 	bl	80008f0 <MX_SPI2_Init>
  MX_DMA_Init();
 80006a4:	f000 f992 	bl	80009cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006a8:	f000 f960 	bl	800096c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Task();
 80006ac:	f000 fdb6 	bl	800121c <Task>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x28>

080006b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b2:	b590      	push	{r4, r7, lr}
 80006b4:	b099      	sub	sp, #100	; 0x64
 80006b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b8:	242c      	movs	r4, #44	; 0x2c
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	2334      	movs	r3, #52	; 0x34
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f006 f86c 	bl	80067a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	231c      	movs	r3, #28
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	0018      	movs	r0, r3
 80006ce:	2310      	movs	r3, #16
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f006 f864 	bl	80067a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	003b      	movs	r3, r7
 80006da:	0018      	movs	r0, r3
 80006dc:	231c      	movs	r3, #28
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f006 f85d 	bl	80067a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80006e6:	0021      	movs	r1, r4
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2211      	movs	r2, #17
 80006ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2210      	movs	r2, #16
 80006fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2202      	movs	r2, #2
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0252      	lsls	r2, r2, #9
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0352      	lsls	r2, r2, #13
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	187b      	adds	r3, r7, r1
 800071e:	0018      	movs	r0, r3
 8000720:	f002 f8b2 	bl	8002888 <HAL_RCC_OscConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000728:	f000 fa20 	bl	8000b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	211c      	movs	r1, #28
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2202      	movs	r2, #2
 8000738:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2101      	movs	r1, #1
 800074a:	0018      	movs	r0, r3
 800074c:	f002 fc22 	bl	8002f94 <HAL_RCC_ClockConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000754:	f000 fa0a 	bl	8000b6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000758:	003b      	movs	r3, r7
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800075e:	003b      	movs	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	003b      	movs	r3, r7
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fd8e 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000770:	f000 f9fc 	bl	8000b6c <Error_Handler>
  }
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b019      	add	sp, #100	; 0x64
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	0018      	movs	r0, r3
 8000786:	230c      	movs	r3, #12
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f006 f808 	bl	80067a0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000790:	4b39      	ldr	r3, [pc, #228]	; (8000878 <MX_ADC_Init+0xfc>)
 8000792:	4a3a      	ldr	r2, [pc, #232]	; (800087c <MX_ADC_Init+0x100>)
 8000794:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <MX_ADC_Init+0xfc>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <MX_ADC_Init+0xfc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a2:	4b35      	ldr	r3, [pc, #212]	; (8000878 <MX_ADC_Init+0xfc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <MX_ADC_Init+0xfc>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <MX_ADC_Init+0xfc>)
 80007b0:	2208      	movs	r2, #8
 80007b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_ADC_Init+0xfc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <MX_ADC_Init+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_ADC_Init+0xfc>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <MX_ADC_Init+0xfc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_ADC_Init+0xfc>)
 80007ce:	22c2      	movs	r2, #194	; 0xc2
 80007d0:	32ff      	adds	r2, #255	; 0xff
 80007d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_ADC_Init+0xfc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_ADC_Init+0xfc>)
 80007dc:	2224      	movs	r2, #36	; 0x24
 80007de:	2101      	movs	r1, #1
 80007e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_ADC_Init+0xfc>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_ADC_Init+0xfc>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fdf6 	bl	80013dc <HAL_ADC_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f9ba 	bl	8000b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0152      	lsls	r2, r2, #5
 8000804:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2204      	movs	r2, #4
 800080a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800080c:	1d3a      	adds	r2, r7, #4
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_ADC_Init+0xfc>)
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f85a 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800081c:	f000 f9a6 	bl	8000b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_ADC_Init+0xfc>)
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f001 f84d 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000836:	f000 f999 	bl	8000b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000840:	1d3a      	adds	r2, r7, #4
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_ADC_Init+0xfc>)
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f001 f840 	bl	80018cc <HAL_ADC_ConfigChannel>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000850:	f000 f98c 	bl	8000b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2203      	movs	r2, #3
 8000858:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800085a:	1d3a      	adds	r2, r7, #4
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_ADC_Init+0xfc>)
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f001 f833 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800086a:	f000 f97f 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	200001c4 	.word	0x200001c4
 800087c:	40012400 	.word	0x40012400

08000880 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000886:	003b      	movs	r3, r7
 8000888:	0018      	movs	r0, r3
 800088a:	2308      	movs	r3, #8
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f005 ff86 	bl	80067a0 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_DAC_Init+0x68>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_DAC_Init+0x6c>)
 8000898:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_DAC_Init+0x68>)
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fbeb 	bl	8002078 <HAL_DAC_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 80008a6:	f000 f961 	bl	8000b6c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008aa:	003b      	movs	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008b0:	003b      	movs	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008b6:	0039      	movs	r1, r7
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_DAC_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fc21 	bl	8002104 <HAL_DAC_ConfigChannel>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 f951 	bl	8000b6c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008ca:	0039      	movs	r1, r7
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_DAC_Init+0x68>)
 80008ce:	2210      	movs	r2, #16
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fc17 	bl	8002104 <HAL_DAC_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_DAC_Init+0x5e>
  {
    Error_Handler();
 80008da:	f000 f947 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	2000016c 	.word	0x2000016c
 80008ec:	40007400 	.word	0x40007400

080008f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_SPI2_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_SPI2_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_SPI2_Init+0x74>)
 80008fc:	2282      	movs	r2, #130	; 0x82
 80008fe:	0052      	lsls	r2, r2, #1
 8000900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_SPI2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI2_Init+0x74>)
 800090a:	22e0      	movs	r2, #224	; 0xe0
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_SPI2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI2_Init+0x74>)
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	0092      	lsls	r2, r2, #2
 8000922:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI2_Init+0x74>)
 8000926:	2228      	movs	r2, #40	; 0x28
 8000928:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_SPI2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI2_Init+0x74>)
 800093e:	2207      	movs	r2, #7
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_SPI2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI2_Init+0x74>)
 800094a:	2208      	movs	r2, #8
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_SPI2_Init+0x74>)
 8000950:	0018      	movs	r0, r3
 8000952:	f002 fd97 	bl	8003484 <HAL_SPI_Init>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 f907 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000084 	.word	0x20000084
 8000968:	40003800 	.word	0x40003800

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART1_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000978:	22e1      	movs	r2, #225	; 0xe1
 800097a:	0252      	lsls	r2, r2, #9
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f003 f967 	bl	8003c84 <HAL_UART_Init>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f8d7 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000e8 	.word	0x200000e8
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_DMA_Init+0x38>)
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_DMA_Init+0x38>)
 80009d8:	2101      	movs	r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_DMA_Init+0x38>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2009      	movs	r0, #9
 80009f0:	f001 fb10 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f4:	2009      	movs	r0, #9
 80009f6:	f001 fb22 	bl	800203e <HAL_NVIC_EnableIRQ>

}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b08b      	sub	sp, #44	; 0x2c
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	2414      	movs	r4, #20
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	0018      	movs	r0, r3
 8000a14:	2314      	movs	r3, #20
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f005 fec1 	bl	80067a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0309      	lsls	r1, r1, #12
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	031b      	lsls	r3, r3, #12
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	03c9      	lsls	r1, r1, #15
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	03db      	lsls	r3, r3, #15
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a58:	695a      	ldr	r2, [r3, #20]
 8000a5a:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0289      	lsls	r1, r1, #10
 8000a60:	430a      	orrs	r2, r1
 8000a62:	615a      	str	r2, [r3, #20]
 8000a64:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a66:	695a      	ldr	r2, [r3, #20]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	029b      	lsls	r3, r3, #10
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	02c9      	lsls	r1, r1, #11
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <MX_GPIO_Init+0x158>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	02db      	lsls	r3, r3, #11
 8000a88:	4013      	ands	r3, r2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_O_2_Pin|D_O_3_Pin|D_O_4_Pin, GPIO_PIN_RESET);
 8000a8e:	23e0      	movs	r3, #224	; 0xe0
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	4834      	ldr	r0, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x15c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	0019      	movs	r1, r3
 8000a98:	f001 fed9 	bl	800284e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, W5500_NRST_Pin|D_O_1_Pin, GPIO_PIN_RESET);
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	4831      	ldr	r0, [pc, #196]	; (8000b68 <MX_GPIO_Init+0x160>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	f001 fed2 	bl	800284e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_SCSN_GPIO_Port, W5500_SCSN_Pin, GPIO_PIN_RESET);
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	0059      	lsls	r1, r3, #1
 8000aae:	2390      	movs	r3, #144	; 0x90
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 feca 	bl	800284e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D_O_2_Pin D_O_3_Pin D_O_4_Pin */
  GPIO_InitStruct.Pin = D_O_2_Pin|D_O_3_Pin|D_O_4_Pin;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	22e0      	movs	r2, #224	; 0xe0
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <MX_GPIO_Init+0x15c>)
 8000ad8:	0019      	movs	r1, r3
 8000ada:	0010      	movs	r0, r2
 8000adc:	f001 fd22 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_NRST_Pin D_O_1_Pin */
  GPIO_InitStruct.Pin = W5500_NRST_Pin|D_O_1_Pin;
 8000ae0:	0021      	movs	r1, r4
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	22a0      	movs	r2, #160	; 0xa0
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	000c      	movs	r4, r1
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2201      	movs	r2, #1
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <MX_GPIO_Init+0x160>)
 8000b02:	0019      	movs	r1, r3
 8000b04:	0010      	movs	r0, r2
 8000b06:	f001 fd0d 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_INT_Pin D_I_1_Pin D_I_2_Pin D_I_3_Pin
                           D_I_4_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin|D_I_1_Pin|D_I_2_Pin|D_I_3_Pin
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	228f      	movs	r2, #143	; 0x8f
 8000b10:	0152      	lsls	r2, r2, #5
 8000b12:	601a      	str	r2, [r3, #0]
                          |D_I_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	000c      	movs	r4, r1
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <MX_GPIO_Init+0x160>)
 8000b26:	0019      	movs	r1, r3
 8000b28:	0010      	movs	r0, r2
 8000b2a:	f001 fcfb 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_SCSN_Pin */
  GPIO_InitStruct.Pin = W5500_SCSN_Pin;
 8000b2e:	0021      	movs	r1, r4
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	0052      	lsls	r2, r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(W5500_SCSN_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	187a      	adds	r2, r7, r1
 8000b4c:	2390      	movs	r3, #144	; 0x90
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fce6 	bl	8002524 <HAL_GPIO_Init>

}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b00b      	add	sp, #44	; 0x2c
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000800 	.word	0x48000800
 8000b68:	48000400 	.word	0x48000400

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <W5500_Init>:
							.dns = {0,0,0,0},
							.dhcp = NETINFO_STATIC };


 uint8_t W5500_Init(void)
 {
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
	 uint8_t i;
	 uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4a33      	ldr	r2, [pc, #204]	; (8000c50 <W5500_Init+0xd8>)
 8000b82:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b84:	c313      	stmia	r3!, {r0, r1, r4}
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	601a      	str	r2, [r3, #0]

	 gWIZNETINFO.ip[0] = 192;
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <W5500_Init+0xdc>)
 8000b8c:	22c0      	movs	r2, #192	; 0xc0
 8000b8e:	719a      	strb	r2, [r3, #6]
	 gWIZNETINFO.ip[1] = 168;
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <W5500_Init+0xdc>)
 8000b92:	22a8      	movs	r2, #168	; 0xa8
 8000b94:	71da      	strb	r2, [r3, #7]
	 gWIZNETINFO.ip[2] = 1;
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <W5500_Init+0xdc>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	721a      	strb	r2, [r3, #8]
	 gWIZNETINFO.ip[3] = 125;
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <W5500_Init+0xdc>)
 8000b9e:	227d      	movs	r2, #125	; 0x7d
 8000ba0:	725a      	strb	r2, [r3, #9]

	 gWIZNETINFO.gw[0] = 192;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <W5500_Init+0xdc>)
 8000ba4:	22c0      	movs	r2, #192	; 0xc0
 8000ba6:	739a      	strb	r2, [r3, #14]
	 gWIZNETINFO.gw[1] = 168;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <W5500_Init+0xdc>)
 8000baa:	22a8      	movs	r2, #168	; 0xa8
 8000bac:	73da      	strb	r2, [r3, #15]
	 gWIZNETINFO.gw[2] = 1;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <W5500_Init+0xdc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	741a      	strb	r2, [r3, #16]
	 gWIZNETINFO.gw[3] = 1;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <W5500_Init+0xdc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	745a      	strb	r2, [r3, #17]

	 gWIZNETINFO.dhcp = NETINFO_DHCP;
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <W5500_Init+0xdc>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	759a      	strb	r2, [r3, #22]

//	 printf("MAC: %02d:%02d:%02d:%02d:%02d:%02d\r\n", gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
//	 printf("IP: %d.%d.%d.%d : %d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3],Server.Port);
//	 printf("GW: %02d.%02d.%02d.%02d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);

	 W5500_Reset();
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	4824      	ldr	r0, [pc, #144]	; (8000c58 <W5500_Init+0xe0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	f001 fe40 	bl	800284e <HAL_GPIO_WritePin>
	 HAL_Delay(20);
 8000bce:	2014      	movs	r0, #20
 8000bd0:	f000 fbe0 	bl	8001394 <HAL_Delay>
	 W5500_NoReset();
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <W5500_Init+0xe0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	0019      	movs	r1, r3
 8000bde:	f001 fe36 	bl	800284e <HAL_GPIO_WritePin>
	 HAL_Delay(20);
 8000be2:	2014      	movs	r0, #20
 8000be4:	f000 fbd6 	bl	8001394 <HAL_Delay>

	 reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <W5500_Init+0xe4>)
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <W5500_Init+0xe8>)
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f004 ffe6 	bl	8005bc0 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <W5500_Init+0xec>)
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <W5500_Init+0xf0>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f005 f804 	bl	8005c08 <reg_wizchip_spi_cbfunc>
	 if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	0019      	movs	r1, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f005 f82b 	bl	8005c60 <ctlwizchip>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <W5500_Init+0x9c>
	 {
		  return false;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e018      	b.n	8000c46 <W5500_Init+0xce>
	 }
	 network_init();
 8000c14:	f000 f874 	bl	8000d00 <network_init>

	 for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 8000c18:	2317      	movs	r3, #23
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e00b      	b.n	8000c3a <W5500_Init+0xc2>
		 HTTP_reset(i);
 8000c22:	2417      	movs	r4, #23
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 f87d 	bl	8000d28 <HTTP_reset>
	 for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 8000c2e:	0021      	movs	r1, r4
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	3201      	adds	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	2317      	movs	r3, #23
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b07      	cmp	r3, #7
 8000c42:	d9ee      	bls.n	8000c22 <W5500_Init+0xaa>

	 return true;
 8000c44:	2301      	movs	r3, #1
 }
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b007      	add	sp, #28
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	080067c8 	.word	0x080067c8
 8000c54:	20000000 	.word	0x20000000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	08000c87 	.word	0x08000c87
 8000c60:	08000c6d 	.word	0x08000c6d
 8000c64:	08000cd1 	.word	0x08000cd1
 8000c68:	08000cef 	.word	0x08000cef

08000c6c <wizchip_select>:

 void  wizchip_select(void)
 {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	 W5500_select();
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	0059      	lsls	r1, r3, #1
 8000c74:	2390      	movs	r3, #144	; 0x90
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	2200      	movs	r2, #0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fde7 	bl	800284e <HAL_GPIO_WritePin>
 }
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <wizchip_deselect>:
 void  wizchip_deselect(void)
 {
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
	 W5500_release();
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	0059      	lsls	r1, r3, #1
 8000c8e:	2390      	movs	r3, #144	; 0x90
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	2201      	movs	r2, #1
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fdda 	bl	800284e <HAL_GPIO_WritePin>
 }
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <W5500_rxtx>:
 uint8_t W5500_rxtx(uint8_t data)
 {
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	701a      	strb	r2, [r3, #0]
	 uint8_t rxdata;
	 HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 8000cac:	240f      	movs	r4, #15
 8000cae:	193a      	adds	r2, r7, r4
 8000cb0:	1df9      	adds	r1, r7, #7
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <W5500_rxtx+0x2c>)
 8000cb4:	2332      	movs	r3, #50	; 0x32
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f002 fc9b 	bl	80035f4 <HAL_SPI_TransmitReceive>
	 return (rxdata);
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 }
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b005      	add	sp, #20
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000084 	.word	0x20000084

08000cd0 <wizchip_write>:
 void  wizchip_write(uint8_t wb)
 {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	701a      	strb	r2, [r3, #0]
	 W5500_tx(wb);
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ffdd 	bl	8000ca0 <W5500_rxtx>
 }
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}

08000cee <wizchip_read>:
 uint8_t wizchip_read(void)
 {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
	 return W5500_rx();
 8000cf2:	20ff      	movs	r0, #255	; 0xff
 8000cf4:	f7ff ffd4 	bl	8000ca0 <W5500_rxtx>
 8000cf8:	0003      	movs	r3, r0
 }
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <network_init>:
 void network_init(void)
 {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	 uint8_t tmpstr[6];
	 ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <network_init+0x24>)
 8000d08:	0019      	movs	r1, r3
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f005 f88a 	bl	8005e24 <ctlnetwork>
	 ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000d10:	003b      	movs	r3, r7
 8000d12:	0019      	movs	r1, r3
 8000d14:	2008      	movs	r0, #8
 8000d16:	f004 ffa3 	bl	8005c60 <ctlwizchip>

 }
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000000 	.word	0x20000000

08000d28 <HTTP_reset>:
 void HTTP_reset(uint8_t sockn)
 {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	701a      	strb	r2, [r3, #0]
	 sentsize[sockn]=0;
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HTTP_reset+0x2c>)
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	50d1      	str	r1, [r2, r3]
	 http_state[sockn]=HTTP_IDLE;
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HTTP_reset+0x30>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	54d1      	strb	r1, [r2, r3]
 }
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000240 	.word	0x20000240
 8000d58:	20000204 	.word	0x20000204

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x44>)
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_MspInit+0x44>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	619a      	str	r2, [r3, #24]
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_MspInit+0x44>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	69da      	ldr	r2, [r3, #28]
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_MspInit+0x44>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0549      	lsls	r1, r1, #21
 8000d84:	430a      	orrs	r2, r1
 8000d86:	61da      	str	r2, [r3, #28]
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_MspInit+0x44>)
 8000d8a:	69da      	ldr	r2, [r3, #28]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	055b      	lsls	r3, r3, #21
 8000d90:	4013      	ands	r3, r2
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b08b      	sub	sp, #44	; 0x2c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	2414      	movs	r4, #20
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	0018      	movs	r0, r3
 8000db2:	2314      	movs	r3, #20
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f005 fcf2 	bl	80067a0 <memset>
  if(hadc->Instance==ADC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <HAL_ADC_MspInit+0xd4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d153      	bne.n	8000e6e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000dc8:	699a      	ldr	r2, [r3, #24]
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0089      	lsls	r1, r1, #2
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	0289      	lsls	r1, r1, #10
 8000dec:	430a      	orrs	r2, r1
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_ADC_MspInit+0xd8>)
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	029b      	lsls	r3, r3, #10
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	220f      	movs	r2, #15
 8000e02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2203      	movs	r2, #3
 8000e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	193a      	adds	r2, r7, r4
 8000e12:	2390      	movs	r3, #144	; 0x90
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f001 fb83 	bl	8002524 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000e22:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0052      	lsls	r2, r2, #1
 8000e3c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	00d2      	lsls	r2, r2, #3
 8000e44:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e48:	2220      	movs	r2, #32
 8000e4a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 f9e1 	bl	800221c <HAL_DMA_Init>
 8000e5a:	1e03      	subs	r3, r0, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000e5e:	f7ff fe85 	bl	8000b6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_ADC_MspInit+0xdc>)
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b00b      	add	sp, #44	; 0x2c
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40012400 	.word	0x40012400
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	20000180 	.word	0x20000180
 8000e84:	40020008 	.word	0x40020008

08000e88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	; 0x2c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	2414      	movs	r4, #20
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	2314      	movs	r3, #20
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f005 fc80 	bl	80067a0 <memset>
  if(hdac->Instance==DAC)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_DAC_MspInit+0x84>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12b      	bne.n	8000f02 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_DAC_MspInit+0x88>)
 8000eac:	69da      	ldr	r2, [r3, #28]
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_DAC_MspInit+0x88>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0589      	lsls	r1, r1, #22
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	61da      	str	r2, [r3, #28]
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_DAC_MspInit+0x88>)
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	059b      	lsls	r3, r3, #22
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_DAC_MspInit+0x88>)
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_DAC_MspInit+0x88>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0289      	lsls	r1, r1, #10
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_DAC_MspInit+0x88>)
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2230      	movs	r2, #48	; 0x30
 8000ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2203      	movs	r2, #3
 8000eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	193a      	adds	r2, r7, r4
 8000ef6:	2390      	movs	r3, #144	; 0x90
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f001 fb11 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b00b      	add	sp, #44	; 0x2c
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40007400 	.word	0x40007400
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b08b      	sub	sp, #44	; 0x2c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	2414      	movs	r4, #20
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	0018      	movs	r0, r3
 8000f22:	2314      	movs	r3, #20
 8000f24:	001a      	movs	r2, r3
 8000f26:	2100      	movs	r1, #0
 8000f28:	f005 fc3a 	bl	80067a0 <memset>
  if(hspi->Instance==SPI2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d132      	bne.n	8000f9c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_SPI_MspInit+0x94>)
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_SPI_MspInit+0x94>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	01c9      	lsls	r1, r1, #7
 8000f40:	430a      	orrs	r2, r1
 8000f42:	61da      	str	r2, [r3, #28]
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_SPI_MspInit+0x94>)
 8000f46:	69da      	ldr	r2, [r3, #28]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	01db      	lsls	r3, r3, #7
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_SPI_MspInit+0x94>)
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_SPI_MspInit+0x94>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	02c9      	lsls	r1, r1, #11
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_SPI_MspInit+0x94>)
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	02db      	lsls	r3, r3, #11
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	22e0      	movs	r2, #224	; 0xe0
 8000f72:	0212      	lsls	r2, r2, #8
 8000f74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	0021      	movs	r1, r4
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2203      	movs	r2, #3
 8000f88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_SPI_MspInit+0x98>)
 8000f94:	0019      	movs	r1, r3
 8000f96:	0010      	movs	r0, r2
 8000f98:	f001 fac4 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b00b      	add	sp, #44	; 0x2c
 8000fa2:	bd90      	pop	{r4, r7, pc}
 8000fa4:	40003800 	.word	0x40003800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	2414      	movs	r4, #20
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	2314      	movs	r3, #20
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f005 fbec 	bl	80067a0 <memset>
  if(huart->Instance==USART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <HAL_UART_MspInit+0xa4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d13b      	bne.n	800104a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_UART_MspInit+0xa8>)
 8000fd4:	699a      	ldr	r2, [r3, #24]
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_UART_MspInit+0xa8>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	01c9      	lsls	r1, r1, #7
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	619a      	str	r2, [r3, #24]
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_UART_MspInit+0xa8>)
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	01db      	lsls	r3, r3, #7
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_UART_MspInit+0xa8>)
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_UART_MspInit+0xa8>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0289      	lsls	r1, r1, #10
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_UART_MspInit+0xa8>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	22c0      	movs	r2, #192	; 0xc0
 800100e:	00d2      	lsls	r2, r2, #3
 8001010:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	0021      	movs	r1, r4
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2202      	movs	r2, #2
 8001018:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2203      	movs	r2, #3
 8001024:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2201      	movs	r2, #1
 800102a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	187a      	adds	r2, r7, r1
 800102e:	2390      	movs	r3, #144	; 0x90
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f001 fa75 	bl	8002524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	201b      	movs	r0, #27
 8001040:	f000 ffe8 	bl	8002014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001044:	201b      	movs	r0, #27
 8001046:	f000 fffa 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b00b      	add	sp, #44	; 0x2c
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	40013800 	.word	0x40013800
 8001058:	40021000 	.word	0x40021000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f96c 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <DMA1_Channel1_IRQHandler+0x14>)
 8001092:	0018      	movs	r0, r3
 8001094:	f001 f987 	bl	80023a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	20000180 	.word	0x20000180

080010a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <USART1_IRQHandler+0x14>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f002 febe 	bl	8003e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	200000e8 	.word	0x200000e8

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <TCP_server>:
 */

#include "tcp_server.h"

void TCP_server(unsigned char sn, uint8_t* buf, uint16_t local_port)
{
 80010c6:	b5b0      	push	{r4, r5, r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	0011      	movs	r1, r2
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	1c02      	adds	r2, r0, #0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	1c0a      	adds	r2, r1, #0
 80010da:	801a      	strh	r2, [r3, #0]
	uint16_t len=0;
 80010dc:	230e      	movs	r3, #14
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]

	switch(getSn_SR(sn))
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	3301      	adds	r3, #1
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	22c0      	movs	r2, #192	; 0xc0
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	4694      	mov	ip, r2
 80010f4:	4463      	add	r3, ip
 80010f6:	0018      	movs	r0, r3
 80010f8:	f004 fa4c 	bl	8005594 <WIZCHIP_READ>
 80010fc:	0003      	movs	r3, r0
 80010fe:	2b1c      	cmp	r3, #28
 8001100:	d100      	bne.n	8001104 <TCP_server+0x3e>
 8001102:	e081      	b.n	8001208 <TCP_server+0x142>
 8001104:	dd00      	ble.n	8001108 <TCP_server+0x42>
 8001106:	e085      	b.n	8001214 <TCP_server+0x14e>
 8001108:	2b17      	cmp	r3, #23
 800110a:	d015      	beq.n	8001138 <TCP_server+0x72>
 800110c:	dd00      	ble.n	8001110 <TCP_server+0x4a>
 800110e:	e081      	b.n	8001214 <TCP_server+0x14e>
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <TCP_server+0x54>
 8001114:	2b13      	cmp	r3, #19
 8001116:	d009      	beq.n	800112c <TCP_server+0x66>
		case SOCK_CLOSE_WAIT:
			close(sn);
//			Server.Connected = FALSE;
		  break;
	}
}
 8001118:	e07c      	b.n	8001214 <TCP_server+0x14e>
			socket(sn ,Sn_MR_TCP,local_port,Sn_MR_ND);
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	881a      	ldrh	r2, [r3, #0]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	7818      	ldrb	r0, [r3, #0]
 8001122:	2320      	movs	r3, #32
 8001124:	2101      	movs	r1, #1
 8001126:	f003 fe21 	bl	8004d6c <socket>
		  break;
 800112a:	e073      	b.n	8001214 <TCP_server+0x14e>
			listen(sn);
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	0018      	movs	r0, r3
 8001132:	f003 ff9f 	bl	8005074 <listen>
		  break;
 8001136:	e06d      	b.n	8001214 <TCP_server+0x14e>
			if(getSn_IR(sn) & Sn_IR_CON)
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	3301      	adds	r3, #1
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4694      	mov	ip, r2
 8001148:	4463      	add	r3, ip
 800114a:	0018      	movs	r0, r3
 800114c:	f004 fa22 	bl	8005594 <WIZCHIP_READ>
 8001150:	0003      	movs	r3, r0
 8001152:	001a      	movs	r2, r3
 8001154:	2301      	movs	r3, #1
 8001156:	4013      	ands	r3, r2
 8001158:	d00c      	beq.n	8001174 <TCP_server+0xae>
				setSn_IR(sn, Sn_IR_CON);
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	3301      	adds	r3, #1
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4694      	mov	ip, r2
 800116a:	4463      	add	r3, ip
 800116c:	2101      	movs	r1, #1
 800116e:	0018      	movs	r0, r3
 8001170:	f004 fa44 	bl	80055fc <WIZCHIP_WRITE>
			len=getSn_RX_RSR(sn);
 8001174:	250e      	movs	r5, #14
 8001176:	197c      	adds	r4, r7, r5
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	0018      	movs	r0, r3
 800117e:	f004 fb85 	bl	800588c <getSn_RX_RSR>
 8001182:	0003      	movs	r3, r0
 8001184:	8023      	strh	r3, [r4, #0]
			if(len>0)
 8001186:	197b      	adds	r3, r7, r5
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d030      	beq.n	80011f0 <TCP_server+0x12a>
				recv(sn,buf,len);
 800118e:	197b      	adds	r3, r7, r5
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	0018      	movs	r0, r3
 800119a:	f004 f913 	bl	80053c4 <recv>
				if(buf[0] == 0xFA && buf[3] == 0XC3)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bfa      	cmp	r3, #250	; 0xfa
 80011a4:	d109      	bne.n	80011ba <TCP_server+0xf4>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3303      	adds	r3, #3
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2bc3      	cmp	r3, #195	; 0xc3
 80011ae:	d104      	bne.n	80011ba <TCP_server+0xf4>
					set_do(buf);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff f834 	bl	8000220 <set_do>
 80011b8:	e01a      	b.n	80011f0 <TCP_server+0x12a>
				else if(buf[0] == 0xC3 && buf[4] == 0XFA)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2bc3      	cmp	r3, #195	; 0xc3
 80011c0:	d109      	bne.n	80011d6 <TCP_server+0x110>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3304      	adds	r3, #4
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2bfa      	cmp	r3, #250	; 0xfa
 80011ca:	d104      	bne.n	80011d6 <TCP_server+0x110>
					set_dac(buf);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff f8c4 	bl	800035c <set_dac>
 80011d4:	e00c      	b.n	80011f0 <TCP_server+0x12a>
				else if(buf[0] == 0xFF && buf[9] == 0XFF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	d108      	bne.n	80011f0 <TCP_server+0x12a>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3309      	adds	r3, #9
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2bff      	cmp	r3, #255	; 0xff
 80011e6:	d103      	bne.n	80011f0 <TCP_server+0x12a>
					Uart_send(buf);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff f9f0 	bl	80005d0 <Uart_send>
			ADC_Send(buf);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff f966 	bl	80004c4 <ADC_Send>
			send(sn,buf, 15);
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	220f      	movs	r2, #15
 8001200:	0018      	movs	r0, r3
 8001202:	f003 ffa9 	bl	8005158 <send>
			break;
 8001206:	e005      	b.n	8001214 <TCP_server+0x14e>
			close(sn);
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	0018      	movs	r0, r3
 800120e:	f003 fec9 	bl	8004fa4 <close>
		  break;
 8001212:	46c0      	nop			; (mov r8, r8)
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b004      	add	sp, #16
 800121a:	bdb0      	pop	{r4, r5, r7, pc}

0800121c <Task>:
extern uint8_t gDATABUF[DATA_BUF_SIZE];
extern DAC_HandleTypeDef hdac;


void Task(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0


	HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f000 f8b6 	bl	8001394 <HAL_Delay>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <Task+0x50>)
 800122a:	2100      	movs	r1, #0
 800122c:	0018      	movs	r0, r3
 800122e:	f000 ffa9 	bl	8002184 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Task+0x50>)
 8001234:	2110      	movs	r1, #16
 8001236:	0018      	movs	r0, r3
 8001238:	f000 ffa4 	bl	8002184 <HAL_DAC_Start>

	W5500_Init();
 800123c:	f7ff fc9c 	bl	8000b78 <W5500_Init>

	while (1)
	{
		for(uint8_t i = 0 ; i < 8 ; i++)
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e00b      	b.n	8001260 <Task+0x44>
			TCP_server(i, gDATABUF, 5000);
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <Task+0x54>)
 800124a:	490a      	ldr	r1, [pc, #40]	; (8001274 <Task+0x58>)
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff38 	bl	80010c6 <TCP_server>
		for(uint8_t i = 0 ; i < 8 ; i++)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	3201      	adds	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d9ef      	bls.n	8001248 <Task+0x2c>
 8001268:	e7ea      	b.n	8001240 <Task+0x24>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	2000016c 	.word	0x2000016c
 8001270:	00001388 	.word	0x00001388
 8001274:	2000020c 	.word	0x2000020c

08001278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012a2:	f7ff ff0b 	bl	80010bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012a6:	f005 fa57 	bl	8006758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff f9ed 	bl	8000688 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   r0, =_estack
 80012b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80012bc:	08006870 	.word	0x08006870
  ldr r2, =_sbss
 80012c0:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80012c4:	20000264 	.word	0x20000264

080012c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_COMP_IRQHandler>
	...

080012cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_Init+0x24>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_Init+0x24>)
 80012d6:	2110      	movs	r1, #16
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f809 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fd3b 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_InitTick+0x5c>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	23fa      	movs	r3, #250	; 0xfa
 8001308:	0098      	lsls	r0, r3, #2
 800130a:	f7fe fefd 	bl	8000108 <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	0019      	movs	r1, r3
 8001312:	0020      	movs	r0, r4
 8001314:	f7fe fef8 	bl	8000108 <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fe9f 	bl	800205e <HAL_SYSTICK_Config>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00f      	b.n	8001348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d80b      	bhi.n	8001346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2200      	movs	r2, #0
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fe6c 	bl	8002014 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_InitTick+0x64>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b003      	add	sp, #12
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	20000018 	.word	0x20000018
 8001354:	20000020 	.word	0x20000020
 8001358:	2000001c 	.word	0x2000001c

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000020 	.word	0x20000020
 800137c:	20000260 	.word	0x20000260

08001380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	20000260 	.word	0x20000260

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	001a      	movs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	20000020 	.word	0x20000020

080013dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	230f      	movs	r3, #15
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e125      	b.n	8001646 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10a      	bne.n	8001418 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2234      	movs	r2, #52	; 0x34
 800140c:	2100      	movs	r1, #0
 800140e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff fcc6 	bl	8000da4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2210      	movs	r2, #16
 800141e:	4013      	ands	r3, r2
 8001420:	d000      	beq.n	8001424 <HAL_ADC_Init+0x48>
 8001422:	e103      	b.n	800162c <HAL_ADC_Init+0x250>
 8001424:	230f      	movs	r3, #15
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d000      	beq.n	8001430 <HAL_ADC_Init+0x54>
 800142e:	e0fd      	b.n	800162c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800143a:	d000      	beq.n	800143e <HAL_ADC_Init+0x62>
 800143c:	e0f6      	b.n	800162c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001442:	4a83      	ldr	r2, [pc, #524]	; (8001650 <HAL_ADC_Init+0x274>)
 8001444:	4013      	ands	r3, r2
 8001446:	2202      	movs	r2, #2
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2203      	movs	r2, #3
 8001456:	4013      	ands	r3, r2
 8001458:	2b01      	cmp	r3, #1
 800145a:	d112      	bne.n	8001482 <HAL_ADC_Init+0xa6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	4013      	ands	r3, r2
 8001466:	2b01      	cmp	r3, #1
 8001468:	d009      	beq.n	800147e <HAL_ADC_Init+0xa2>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	401a      	ands	r2, r3
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	429a      	cmp	r2, r3
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0xa6>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_ADC_Init+0xa8>
 8001482:	2300      	movs	r3, #0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d116      	bne.n	80014b6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2218      	movs	r2, #24
 8001490:	4393      	bics	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	0899      	lsrs	r1, r3, #2
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4964      	ldr	r1, [pc, #400]	; (8001654 <HAL_ADC_Init+0x278>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7e1b      	ldrb	r3, [r3, #24]
 80014ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e5b      	ldrb	r3, [r3, #25]
 80014d0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7e9b      	ldrb	r3, [r3, #26]
 80014d8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80014da:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d002      	beq.n	80014ea <HAL_ADC_Init+0x10e>
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	e000      	b.n	80014ec <HAL_ADC_Init+0x110>
 80014ea:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014ec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014f2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_Init+0x124>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e000      	b.n	8001502 <HAL_ADC_Init+0x126>
 8001500:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001502:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2124      	movs	r1, #36	; 0x24
 8001508:	5c5b      	ldrb	r3, [r3, r1]
 800150a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800150c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4313      	orrs	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7edb      	ldrb	r3, [r3, #27]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d115      	bne.n	8001548 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e9b      	ldrb	r3, [r3, #26]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0252      	lsls	r2, r2, #9
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	e00b      	b.n	8001548 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001534:	2220      	movs	r2, #32
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001540:	2201      	movs	r2, #1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	23c2      	movs	r3, #194	; 0xc2
 800154e:	33ff      	adds	r3, #255	; 0xff
 8001550:	429a      	cmp	r2, r3
 8001552:	d007      	beq.n	8001564 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800155c:	4313      	orrs	r3, r2
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	4313      	orrs	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68d9      	ldr	r1, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	055b      	lsls	r3, r3, #21
 800157c:	429a      	cmp	r2, r3
 800157e:	d01b      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	2b01      	cmp	r3, #1
 8001586:	d017      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	2b02      	cmp	r3, #2
 800158e:	d013      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2b03      	cmp	r3, #3
 8001596:	d00f      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	2b04      	cmp	r3, #4
 800159e:	d00b      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d007      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d003      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d112      	bne.n	80015de <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2107      	movs	r1, #7
 80015c4:	438a      	bics	r2, r1
 80015c6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6959      	ldr	r1, [r3, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	2207      	movs	r2, #7
 80015d4:	401a      	ands	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_ADC_Init+0x27c>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d10b      	bne.n	8001606 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f8:	2203      	movs	r2, #3
 80015fa:	4393      	bics	r3, r2
 80015fc:	2201      	movs	r2, #1
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001604:	e01c      	b.n	8001640 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160a:	2212      	movs	r2, #18
 800160c:	4393      	bics	r3, r2
 800160e:	2210      	movs	r2, #16
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	2201      	movs	r2, #1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001622:	230f      	movs	r3, #15
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800162a:	e009      	b.n	8001640 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	2210      	movs	r2, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001638:	230f      	movs	r3, #15
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001640:	230f      	movs	r3, #15
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	781b      	ldrb	r3, [r3, #0]
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	fffffefd 	.word	0xfffffefd
 8001654:	fffe0219 	.word	0xfffe0219
 8001658:	833fffe7 	.word	0x833fffe7

0800165c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2204      	movs	r2, #4
 8001674:	4013      	ands	r3, r2
 8001676:	d138      	bne.n	80016ea <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2234      	movs	r2, #52	; 0x34
 800167c:	5c9b      	ldrb	r3, [r3, r2]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_Start+0x2a>
 8001682:	2302      	movs	r3, #2
 8001684:	e038      	b.n	80016f8 <HAL_ADC_Start+0x9c>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2234      	movs	r2, #52	; 0x34
 800168a:	2101      	movs	r1, #1
 800168c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7e5b      	ldrb	r3, [r3, #25]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001696:	230f      	movs	r3, #15
 8001698:	18fc      	adds	r4, r7, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0018      	movs	r0, r3
 800169e:	f000 fa23 	bl	8001ae8 <ADC_Enable>
 80016a2:	0003      	movs	r3, r0
 80016a4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016a6:	230f      	movs	r3, #15
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d120      	bne.n	80016f2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_ADC_Start+0xa4>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2234      	movs	r2, #52	; 0x34
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	221c      	movs	r2, #28
 80016d6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2104      	movs	r1, #4
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e003      	b.n	80016f2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2202      	movs	r2, #2
 80016f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016f2:	230f      	movs	r3, #15
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	781b      	ldrb	r3, [r3, #0]
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b005      	add	sp, #20
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	fffff0fe 	.word	0xfffff0fe

08001704 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170c:	230f      	movs	r3, #15
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2234      	movs	r2, #52	; 0x34
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Stop+0x1e>
 800171e:	2302      	movs	r3, #2
 8001720:	e029      	b.n	8001776 <HAL_ADC_Stop+0x72>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2234      	movs	r2, #52	; 0x34
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800172a:	250f      	movs	r5, #15
 800172c:	197c      	adds	r4, r7, r5
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0018      	movs	r0, r3
 8001732:	f000 face 	bl	8001cd2 <ADC_ConversionStop>
 8001736:	0003      	movs	r3, r0
 8001738:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800173a:	197b      	adds	r3, r7, r5
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d112      	bne.n	8001768 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001742:	197c      	adds	r4, r7, r5
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 fa52 	bl	8001bf0 <ADC_Disable>
 800174c:	0003      	movs	r3, r0
 800174e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001750:	197b      	adds	r3, r7, r5
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_ADC_Stop+0x7c>)
 800175e:	4013      	ands	r3, r2
 8001760:	2201      	movs	r2, #1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2234      	movs	r2, #52	; 0x34
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001770:	230f      	movs	r3, #15
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bdb0      	pop	{r4, r5, r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	fffffefe 	.word	0xfffffefe

08001784 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d102      	bne.n	800179c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001796:	2308      	movs	r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e014      	b.n	80017c6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10b      	bne.n	80017c2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	2220      	movs	r2, #32
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2234      	movs	r2, #52	; 0x34
 80017ba:	2100      	movs	r1, #0
 80017bc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e071      	b.n	80018a6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80017c2:	230c      	movs	r3, #12
 80017c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80017c6:	f7ff fddb 	bl	8001380 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017ce:	e01f      	b.n	8001810 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	d01c      	beq.n	8001810 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_ADC_PollForConversion+0x68>
 80017dc:	f7ff fdd0 	bl	8001380 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d211      	bcs.n	8001810 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fc:	2204      	movs	r2, #4
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2234      	movs	r2, #52	; 0x34
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e04a      	b.n	80018a6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	d0d9      	beq.n	80017d0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	23c0      	movs	r3, #192	; 0xc0
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4013      	ands	r3, r2
 8001836:	d12d      	bne.n	8001894 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800183c:	2b00      	cmp	r3, #0
 800183e:	d129      	bne.n	8001894 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2208      	movs	r2, #8
 8001848:	4013      	ands	r3, r2
 800184a:	2b08      	cmp	r3, #8
 800184c:	d122      	bne.n	8001894 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2204      	movs	r2, #4
 8001856:	4013      	ands	r3, r2
 8001858:	d110      	bne.n	800187c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	210c      	movs	r1, #12
 8001866:	438a      	bics	r2, r1
 8001868:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <HAL_ADC_PollForConversion+0x12c>)
 8001870:	4013      	ands	r3, r2
 8001872:	2201      	movs	r2, #1
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
 800187a:	e00b      	b.n	8001894 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	2220      	movs	r2, #32
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	2201      	movs	r2, #1
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	220c      	movs	r2, #12
 80018a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	fffffefe 	.word	0xfffffefe

080018b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d6:	230f      	movs	r3, #15
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	055b      	lsls	r3, r3, #21
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d011      	beq.n	8001912 <HAL_ADC_ConfigChannel+0x46>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d00d      	beq.n	8001912 <HAL_ADC_ConfigChannel+0x46>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d009      	beq.n	8001912 <HAL_ADC_ConfigChannel+0x46>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	2b03      	cmp	r3, #3
 8001904:	d005      	beq.n	8001912 <HAL_ADC_ConfigChannel+0x46>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	2b04      	cmp	r3, #4
 800190c:	d001      	beq.n	8001912 <HAL_ADC_ConfigChannel+0x46>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2234      	movs	r2, #52	; 0x34
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x54>
 800191c:	2302      	movs	r3, #2
 800191e:	e0d0      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x1f6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2234      	movs	r2, #52	; 0x34
 8001924:	2101      	movs	r1, #1
 8001926:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2204      	movs	r2, #4
 8001930:	4013      	ands	r3, r2
 8001932:	d000      	beq.n	8001936 <HAL_ADC_ConfigChannel+0x6a>
 8001934:	e0b4      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a64      	ldr	r2, [pc, #400]	; (8001acc <HAL_ADC_ConfigChannel+0x200>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d100      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x76>
 8001940:	e082      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	055b      	lsls	r3, r3, #21
 8001960:	429a      	cmp	r2, r3
 8001962:	d037      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	2b01      	cmp	r3, #1
 800196a:	d033      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	2b02      	cmp	r3, #2
 8001972:	d02f      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	2b03      	cmp	r3, #3
 800197a:	d02b      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	2b04      	cmp	r3, #4
 8001982:	d027      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	2b05      	cmp	r3, #5
 800198a:	d023      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	2b06      	cmp	r3, #6
 8001992:	d01f      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2b07      	cmp	r3, #7
 800199a:	d01b      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2107      	movs	r1, #7
 80019a8:	400b      	ands	r3, r1
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d012      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2107      	movs	r1, #7
 80019ba:	438a      	bics	r2, r1
 80019bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6959      	ldr	r1, [r3, #20]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2207      	movs	r2, #7
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b10      	cmp	r3, #16
 80019da:	d007      	beq.n	80019ec <HAL_ADC_ConfigChannel+0x120>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b11      	cmp	r3, #17
 80019e2:	d003      	beq.n	80019ec <HAL_ADC_ConfigChannel+0x120>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b12      	cmp	r3, #18
 80019ea:	d163      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_ADC_ConfigChannel+0x204>)
 80019ee:	6819      	ldr	r1, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b10      	cmp	r3, #16
 80019f6:	d009      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x140>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b11      	cmp	r3, #17
 80019fe:	d102      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x13a>
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	03db      	lsls	r3, r3, #15
 8001a04:	e004      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x144>
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	045b      	lsls	r3, r3, #17
 8001a0a:	e001      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x144>
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	041b      	lsls	r3, r3, #16
 8001a10:	4a2f      	ldr	r2, [pc, #188]	; (8001ad0 <HAL_ADC_ConfigChannel+0x204>)
 8001a12:	430b      	orrs	r3, r1
 8001a14:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d14a      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_ADC_ConfigChannel+0x208>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	492d      	ldr	r1, [pc, #180]	; (8001ad8 <HAL_ADC_ConfigChannel+0x20c>)
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7fe fb6f 	bl	8000108 <__udivsi3>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	189b      	adds	r3, r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a38:	e002      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f9      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x16e>
 8001a46:	e035      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	4099      	lsls	r1, r3
 8001a56:	000b      	movs	r3, r1
 8001a58:	43d9      	mvns	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	400a      	ands	r2, r1
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d007      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x1ae>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b11      	cmp	r3, #17
 8001a70:	d003      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x1ae>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d11c      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_ADC_ConfigChannel+0x204>)
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d007      	beq.n	8001a96 <HAL_ADC_ConfigChannel+0x1ca>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b11      	cmp	r3, #17
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x1c6>
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_ADC_ConfigChannel+0x210>)
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_ADC_ConfigChannel+0x214>)
 8001a94:	e000      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_ADC_ConfigChannel+0x218>)
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_ADC_ConfigChannel+0x204>)
 8001a9a:	400b      	ands	r3, r1
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e009      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001aac:	230f      	movs	r3, #15
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2234      	movs	r2, #52	; 0x34
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001abc:	230f      	movs	r3, #15
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	00001001 	.word	0x00001001
 8001ad0:	40012708 	.word	0x40012708
 8001ad4:	20000018 	.word	0x20000018
 8001ad8:	000f4240 	.word	0x000f4240
 8001adc:	ffbfffff 	.word	0xffbfffff
 8001ae0:	feffffff 	.word	0xfeffffff
 8001ae4:	ff7fffff 	.word	0xff7fffff

08001ae8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2203      	movs	r2, #3
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d112      	bne.n	8001b2c <ADC_Enable+0x44>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d009      	beq.n	8001b28 <ADC_Enable+0x40>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	401a      	ands	r2, r3
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d101      	bne.n	8001b2c <ADC_Enable+0x44>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <ADC_Enable+0x46>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d152      	bne.n	8001bd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <ADC_Enable+0xfc>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	2210      	movs	r2, #16
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	2201      	movs	r2, #1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e03f      	b.n	8001bda <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <ADC_Enable+0x100>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	491f      	ldr	r1, [pc, #124]	; (8001bec <ADC_Enable+0x104>)
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe fac9 	bl	8000108 <__udivsi3>
 8001b76:	0003      	movs	r3, r0
 8001b78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b7a:	e002      	b.n	8001b82 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b88:	f7ff fbfa 	bl	8001380 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b90:	e01b      	b.n	8001bca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b92:	f7ff fbf5 	bl	8001380 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d914      	bls.n	8001bca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d00d      	beq.n	8001bca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e007      	b.n	8001bda <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d1dc      	bne.n	8001b92 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b004      	add	sp, #16
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	80000017 	.word	0x80000017
 8001be8:	20000018 	.word	0x20000018
 8001bec:	000f4240 	.word	0x000f4240

08001bf0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d112      	bne.n	8001c30 <ADC_Disable+0x40>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d009      	beq.n	8001c2c <ADC_Disable+0x3c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	401a      	ands	r2, r3
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d101      	bne.n	8001c30 <ADC_Disable+0x40>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <ADC_Disable+0x42>
 8001c30:	2300      	movs	r3, #0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d048      	beq.n	8001cc8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d110      	bne.n	8001c66 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2102      	movs	r1, #2
 8001c50:	430a      	orrs	r2, r1
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c5c:	f7ff fb90 	bl	8001380 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c64:	e029      	b.n	8001cba <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	2201      	movs	r2, #1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e023      	b.n	8001cca <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c82:	f7ff fb7d 	bl	8001380 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d914      	bls.n	8001cba <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10d      	bne.n	8001cba <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	2201      	movs	r2, #1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e007      	b.n	8001cca <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d0dc      	beq.n	8001c82 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d03a      	beq.n	8001d60 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d10d      	bne.n	8001d14 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d02:	d107      	bne.n	8001d14 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2110      	movs	r1, #16
 8001d10:	430a      	orrs	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d14:	f7ff fb34 	bl	8001380 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d1c:	e01a      	b.n	8001d54 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d1e:	f7ff fb2f 	bl	8001380 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d913      	bls.n	8001d54 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2204      	movs	r2, #4
 8001d34:	4013      	ands	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	2201      	movs	r2, #1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e006      	b.n	8001d62 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d1de      	bne.n	8001d1e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d74:	2317      	movs	r3, #23
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2234      	movs	r2, #52	; 0x34
 8001d88:	5c9b      	ldrb	r3, [r3, r2]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADCEx_Calibration_Start+0x26>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e08d      	b.n	8001eae <HAL_ADCEx_Calibration_Start+0x142>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2234      	movs	r2, #52	; 0x34
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2203      	movs	r2, #3
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d112      	bne.n	8001dce <HAL_ADCEx_Calibration_Start+0x62>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d009      	beq.n	8001dca <HAL_ADCEx_Calibration_Start+0x5e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d101      	bne.n	8001dce <HAL_ADCEx_Calibration_Start+0x62>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADCEx_Calibration_Start+0x64>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d15b      	bne.n	8001e8c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	4a37      	ldr	r2, [pc, #220]	; (8001eb8 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2202      	movs	r2, #2
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2203      	movs	r2, #3
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	0609      	lsls	r1, r1, #24
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001e12:	f7ff fab5 	bl	8001380 <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e1a:	e01d      	b.n	8001e58 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e1c:	f7ff fab0 	bl	8001380 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d916      	bls.n	8001e58 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	0fdb      	lsrs	r3, r3, #31
 8001e32:	07da      	lsls	r2, r3, #31
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	061b      	lsls	r3, r3, #24
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10d      	bne.n	8001e58 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	2212      	movs	r2, #18
 8001e42:	4393      	bics	r3, r2
 8001e44:	2210      	movs	r2, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2234      	movs	r2, #52	; 0x34
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e02a      	b.n	8001eae <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0fdb      	lsrs	r3, r3, #31
 8001e60:	07da      	lsls	r2, r3, #31
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d0d8      	beq.n	8001e1c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4393      	bics	r3, r2
 8001e82:	2201      	movs	r2, #1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
 8001e8a:	e009      	b.n	8001ea0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	2220      	movs	r2, #32
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001e98:	2317      	movs	r3, #23
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2234      	movs	r2, #52	; 0x34
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001ea8:	2317      	movs	r3, #23
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	781b      	ldrb	r3, [r3, #0]
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b006      	add	sp, #24
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	fffffefd 	.word	0xfffffefd

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ece:	d809      	bhi.n	8001ee4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	231f      	movs	r3, #31
 8001ed8:	401a      	ands	r2, r3
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_EnableIRQ+0x30>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	4091      	lsls	r1, r2
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
  }
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b7f      	cmp	r3, #127	; 0x7f
 8001f04:	d828      	bhi.n	8001f58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f06:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	33c0      	adds	r3, #192	; 0xc0
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	589b      	ldr	r3, [r3, r2]
 8001f16:	1dfa      	adds	r2, r7, #7
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	400a      	ands	r2, r1
 8001f20:	00d2      	lsls	r2, r2, #3
 8001f22:	21ff      	movs	r1, #255	; 0xff
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	43d2      	mvns	r2, r2
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	401a      	ands	r2, r3
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	4003      	ands	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	33c0      	adds	r3, #192	; 0xc0
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f56:	e031      	b.n	8001fbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	230f      	movs	r3, #15
 8001f62:	400b      	ands	r3, r1
 8001f64:	3b08      	subs	r3, #8
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3306      	adds	r3, #6
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	3304      	adds	r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1dfa      	adds	r2, r7, #7
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	0011      	movs	r1, r2
 8001f78:	2203      	movs	r2, #3
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	21ff      	movs	r1, #255	; 0xff
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	401a      	ands	r2, r3
 8001f88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	401a      	ands	r2, r3
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	0018      	movs	r0, r3
 8001f98:	2303      	movs	r3, #3
 8001f9a:	4003      	ands	r3, r0
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	001c      	movs	r4, r3
 8001fa8:	230f      	movs	r3, #15
 8001faa:	4023      	ands	r3, r4
 8001fac:	3b08      	subs	r3, #8
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	18c3      	adds	r3, r0, r3
 8001fb8:	3304      	adds	r3, #4
 8001fba:	601a      	str	r2, [r3, #0]
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b003      	add	sp, #12
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	045b      	lsls	r3, r3, #17
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d301      	bcc.n	8001fe4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e010      	b.n	8002006 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SysTick_Config+0x44>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fec:	2301      	movs	r3, #1
 8001fee:	425b      	negs	r3, r3
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff ff7c 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x44>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x44>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	210f      	movs	r1, #15
 8002020:	187b      	adds	r3, r7, r1
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	187b      	adds	r3, r7, r1
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	0002      	movs	r2, r0
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b25b      	sxtb	r3, r3
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff ff33 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff ffaf 	bl	8001fcc <SysTick_Config>
 800206e:	0003      	movs	r3, r0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e015      	b.n	80020b6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	791b      	ldrb	r3, [r3, #4]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f7fe fef3 	bl	8000e88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	3308      	adds	r3, #8
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e004      	b.n	80020f2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	3314      	adds	r3, #20
 80020f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b006      	add	sp, #24
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	795b      	ldrb	r3, [r3, #5]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_DAC_ConfigChannel+0x20>
 8002120:	2302      	movs	r3, #2
 8002122:	e029      	b.n	8002178 <HAL_DAC_ConfigChannel+0x74>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2202      	movs	r2, #2
 800212e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_DAC_ConfigChannel+0x7c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	409a      	lsls	r2, r3
 800213e:	0013      	movs	r3, r2
 8002140:	43da      	mvns	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	409a      	lsls	r2, r3
 800215a:	0013      	movs	r3, r2
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b006      	add	sp, #24
 800217e:	bd80      	pop	{r7, pc}
 8002180:	00000ffe 	.word	0x00000ffe

08002184 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	795b      	ldrb	r3, [r3, #5]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_DAC_Start+0x16>
 8002196:	2302      	movs	r3, #2
 8002198:	e03b      	b.n	8002212 <HAL_DAC_Start+0x8e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	409a      	lsls	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10f      	bne.n	80021e0 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	223c      	movs	r2, #60	; 0x3c
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b3c      	cmp	r3, #60	; 0x3c
 80021cc:	d11a      	bne.n	8002204 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	e011      	b.n	8002204 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	23f0      	movs	r3, #240	; 0xf0
 80021e8:	039b      	lsls	r3, r3, #14
 80021ea:	401a      	ands	r2, r3
 80021ec:	23f0      	movs	r3, #240	; 0xf0
 80021ee:	039b      	lsls	r3, r3, #14
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2102      	movs	r1, #2
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e036      	b.n	80022a0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2221      	movs	r2, #33	; 0x21
 8002236:	2102      	movs	r1, #2
 8002238:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_DMA_Init+0x8c>)
 8002246:	4013      	ands	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f932 	bl	80024ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2221      	movs	r2, #33	; 0x21
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}  
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b004      	add	sp, #16
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	ffffc00f 	.word	0xffffc00f

080022ac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2221      	movs	r2, #33	; 0x21
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d008      	beq.n	80022d2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2204      	movs	r2, #4
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e020      	b.n	8002314 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	210e      	movs	r1, #14
 80022de:	438a      	bics	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	438a      	bics	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	2101      	movs	r1, #1
 80022fc:	4091      	lsls	r1, r2
 80022fe:	000a      	movs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2221      	movs	r2, #33	; 0x21
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	210f      	movs	r1, #15
 8002326:	187b      	adds	r3, r7, r1
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2221      	movs	r2, #33	; 0x21
 8002330:	5c9b      	ldrb	r3, [r3, r2]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d006      	beq.n	8002346 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e028      	b.n	8002398 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	210e      	movs	r1, #14
 8002352:	438a      	bics	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	438a      	bics	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2101      	movs	r1, #1
 8002370:	4091      	lsls	r1, r2
 8002372:	000a      	movs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	0010      	movs	r0, r2
 8002396:	4798      	blx	r3
    } 
  }
  return status;
 8002398:	230f      	movs	r3, #15
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2204      	movs	r2, #4
 80023c4:	409a      	lsls	r2, r3
 80023c6:	0013      	movs	r3, r2
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	d024      	beq.n	8002418 <HAL_DMA_IRQHandler+0x72>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2204      	movs	r2, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d020      	beq.n	8002418 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2220      	movs	r2, #32
 80023de:	4013      	ands	r3, r2
 80023e0:	d107      	bne.n	80023f2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2104      	movs	r1, #4
 80023ee:	438a      	bics	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	2104      	movs	r1, #4
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_DMA_IRQHandler+0x66>
 800240a:	e06a      	b.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	0010      	movs	r0, r2
 8002414:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002416:	e064      	b.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2202      	movs	r2, #2
 800241e:	409a      	lsls	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	d02b      	beq.n	8002480 <HAL_DMA_IRQHandler+0xda>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d027      	beq.n	8002480 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2220      	movs	r2, #32
 8002438:	4013      	ands	r3, r2
 800243a:	d10b      	bne.n	8002454 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	210a      	movs	r1, #10
 8002448:	438a      	bics	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2221      	movs	r2, #33	; 0x21
 8002450:	2101      	movs	r1, #1
 8002452:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	2102      	movs	r1, #2
 800245e:	4091      	lsls	r1, r2
 8002460:	000a      	movs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d036      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	0010      	movs	r0, r2
 800247c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800247e:	e030      	b.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2208      	movs	r2, #8
 8002486:	409a      	lsls	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	d028      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2208      	movs	r2, #8
 8002494:	4013      	ands	r3, r2
 8002496:	d024      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	210e      	movs	r1, #14
 80024a4:	438a      	bics	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	2101      	movs	r1, #1
 80024b2:	4091      	lsls	r1, r2
 80024b4:	000a      	movs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2221      	movs	r2, #33	; 0x21
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	0010      	movs	r0, r2
 80024de:	4798      	blx	r3
    }
   }
}  
 80024e0:	e7ff      	b.n	80024e2 <HAL_DMA_IRQHandler+0x13c>
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b004      	add	sp, #16
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a08      	ldr	r2, [pc, #32]	; (800251c <DMA_CalcBaseAndBitshift+0x30>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	2114      	movs	r1, #20
 8002500:	0018      	movs	r0, r3
 8002502:	f7fd fe01 	bl	8000108 <__udivsi3>
 8002506:	0003      	movs	r3, r0
 8002508:	009a      	lsls	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <DMA_CalcBaseAndBitshift+0x34>)
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	bffdfff8 	.word	0xbffdfff8
 8002520:	40020000 	.word	0x40020000

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	e155      	b.n	80027e0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4091      	lsls	r1, r2
 800253e:	000a      	movs	r2, r1
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d100      	bne.n	800254c <HAL_GPIO_Init+0x28>
 800254a:	e146      	b.n	80027da <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	4013      	ands	r3, r2
 8002554:	2b01      	cmp	r3, #1
 8002556:	d005      	beq.n	8002564 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002560:	2b02      	cmp	r3, #2
 8002562:	d130      	bne.n	80025c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	409a      	lsls	r2, r3
 8002572:	0013      	movs	r3, r2
 8002574:	43da      	mvns	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	409a      	lsls	r2, r3
 8002586:	0013      	movs	r3, r2
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800259a:	2201      	movs	r2, #1
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	43da      	mvns	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	2201      	movs	r2, #1
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d017      	beq.n	8002602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	409a      	lsls	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	43da      	mvns	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2203      	movs	r2, #3
 8002608:	4013      	ands	r3, r2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d123      	bne.n	8002656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	08da      	lsrs	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3208      	adds	r2, #8
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	58d3      	ldr	r3, [r2, r3]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2207      	movs	r2, #7
 8002620:	4013      	ands	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	43da      	mvns	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2107      	movs	r1, #7
 800263a:	400b      	ands	r3, r1
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	409a      	lsls	r2, r3
 8002640:	0013      	movs	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	6939      	ldr	r1, [r7, #16]
 8002654:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	409a      	lsls	r2, r3
 8002664:	0013      	movs	r3, r2
 8002666:	43da      	mvns	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2203      	movs	r2, #3
 8002674:	401a      	ands	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	0013      	movs	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	23c0      	movs	r3, #192	; 0xc0
 8002690:	029b      	lsls	r3, r3, #10
 8002692:	4013      	ands	r3, r2
 8002694:	d100      	bne.n	8002698 <HAL_GPIO_Init+0x174>
 8002696:	e0a0      	b.n	80027da <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_GPIO_Init+0x2d4>)
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x2d4>)
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <HAL_GPIO_Init+0x2d4>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4013      	ands	r3, r2
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_GPIO_Init+0x2d8>)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	589b      	ldr	r3, [r3, r2]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2203      	movs	r2, #3
 80026c2:	4013      	ands	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	409a      	lsls	r2, r3
 80026ca:	0013      	movs	r3, r2
 80026cc:	43da      	mvns	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	2390      	movs	r3, #144	; 0x90
 80026d8:	05db      	lsls	r3, r3, #23
 80026da:	429a      	cmp	r2, r3
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x1ee>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a47      	ldr	r2, [pc, #284]	; (8002800 <HAL_GPIO_Init+0x2dc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1ea>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a46      	ldr	r2, [pc, #280]	; (8002804 <HAL_GPIO_Init+0x2e0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1e6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a45      	ldr	r2, [pc, #276]	; (8002808 <HAL_GPIO_Init+0x2e4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1e2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a44      	ldr	r2, [pc, #272]	; (800280c <HAL_GPIO_Init+0x2e8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1de>
 80026fe:	2304      	movs	r3, #4
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x1f0>
 8002702:	2305      	movs	r3, #5
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x1f0>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x1f0>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x1f0>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x1f0>
 8002712:	2300      	movs	r3, #0
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	2103      	movs	r1, #3
 8002718:	400a      	ands	r2, r1
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x2d8>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43da      	mvns	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	025b      	lsls	r3, r3, #9
 800274a:	4013      	ands	r3, r2
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800275c:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43da      	mvns	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	4013      	ands	r3, r2
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002786:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43da      	mvns	r2, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	035b      	lsls	r3, r3, #13
 800279e:	4013      	ands	r3, r2
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	039b      	lsls	r3, r3, #14
 80027c8:	4013      	ands	r3, r2
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_GPIO_Init+0x2ec>)
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	40da      	lsrs	r2, r3
 80027e8:	1e13      	subs	r3, r2, #0
 80027ea:	d000      	beq.n	80027ee <HAL_GPIO_Init+0x2ca>
 80027ec:	e6a2      	b.n	8002534 <HAL_GPIO_Init+0x10>
  } 
}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b006      	add	sp, #24
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40010000 	.word	0x40010000
 8002800:	48000400 	.word	0x48000400
 8002804:	48000800 	.word	0x48000800
 8002808:	48000c00 	.word	0x48000c00
 800280c:	48001000 	.word	0x48001000
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	000a      	movs	r2, r1
 800281e:	1cbb      	adds	r3, r7, #2
 8002820:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	1cba      	adds	r2, r7, #2
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	4013      	ands	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800282e:	230f      	movs	r3, #15
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e003      	b.n	8002840 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002840:	230f      	movs	r3, #15
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
  }
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	0008      	movs	r0, r1
 8002858:	0011      	movs	r1, r2
 800285a:	1cbb      	adds	r3, r7, #2
 800285c:	1c02      	adds	r2, r0, #0
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	1c7b      	adds	r3, r7, #1
 8002862:	1c0a      	adds	r2, r1, #0
 8002864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002866:	1c7b      	adds	r3, r7, #1
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800286e:	1cbb      	adds	r3, r7, #2
 8002870:	881a      	ldrh	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002876:	e003      	b.n	8002880 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002878:	1cbb      	adds	r3, r7, #2
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f000 fb76 	bl	8002f88 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	d100      	bne.n	80028a8 <HAL_RCC_OscConfig+0x20>
 80028a6:	e08e      	b.n	80029c6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028a8:	4bc5      	ldr	r3, [pc, #788]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	220c      	movs	r2, #12
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d00e      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b4:	4bc2      	ldr	r3, [pc, #776]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	220c      	movs	r2, #12
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d117      	bne.n	80028f0 <HAL_RCC_OscConfig+0x68>
 80028c0:	4bbf      	ldr	r3, [pc, #764]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	23c0      	movs	r3, #192	; 0xc0
 80028c6:	025b      	lsls	r3, r3, #9
 80028c8:	401a      	ands	r2, r3
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	025b      	lsls	r3, r3, #9
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d10e      	bne.n	80028f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d2:	4bbb      	ldr	r3, [pc, #748]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	029b      	lsls	r3, r3, #10
 80028da:	4013      	ands	r3, r2
 80028dc:	d100      	bne.n	80028e0 <HAL_RCC_OscConfig+0x58>
 80028de:	e071      	b.n	80029c4 <HAL_RCC_OscConfig+0x13c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d000      	beq.n	80028ea <HAL_RCC_OscConfig+0x62>
 80028e8:	e06c      	b.n	80029c4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f000 fb4c 	bl	8002f88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_OscConfig+0x80>
 80028f8:	4bb1      	ldr	r3, [pc, #708]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4bb0      	ldr	r3, [pc, #704]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0249      	lsls	r1, r1, #9
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e02f      	b.n	8002968 <HAL_RCC_OscConfig+0xe0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0xa2>
 8002910:	4bab      	ldr	r3, [pc, #684]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4baa      	ldr	r3, [pc, #680]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002916:	49ab      	ldr	r1, [pc, #684]	; (8002bc4 <HAL_RCC_OscConfig+0x33c>)
 8002918:	400a      	ands	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4ba8      	ldr	r3, [pc, #672]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4ba7      	ldr	r3, [pc, #668]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002922:	49a9      	ldr	r1, [pc, #676]	; (8002bc8 <HAL_RCC_OscConfig+0x340>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e01e      	b.n	8002968 <HAL_RCC_OscConfig+0xe0>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b05      	cmp	r3, #5
 8002930:	d10e      	bne.n	8002950 <HAL_RCC_OscConfig+0xc8>
 8002932:	4ba3      	ldr	r3, [pc, #652]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4ba2      	ldr	r3, [pc, #648]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	02c9      	lsls	r1, r1, #11
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	4b9f      	ldr	r3, [pc, #636]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b9e      	ldr	r3, [pc, #632]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	0249      	lsls	r1, r1, #9
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xe0>
 8002950:	4b9b      	ldr	r3, [pc, #620]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b9a      	ldr	r3, [pc, #616]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002956:	499b      	ldr	r1, [pc, #620]	; (8002bc4 <HAL_RCC_OscConfig+0x33c>)
 8002958:	400a      	ands	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	4b98      	ldr	r3, [pc, #608]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b97      	ldr	r3, [pc, #604]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002962:	4999      	ldr	r1, [pc, #612]	; (8002bc8 <HAL_RCC_OscConfig+0x340>)
 8002964:	400a      	ands	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d014      	beq.n	800299a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fd06 	bl	8001380 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297a:	f7fe fd01 	bl	8001380 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b64      	cmp	r3, #100	; 0x64
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e2fd      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	4013      	ands	r3, r2
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0xf2>
 8002998:	e015      	b.n	80029c6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fcf1 	bl	8001380 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fcec 	bl	8001380 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e2e8      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	4013      	ands	r3, r2
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x11c>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2202      	movs	r2, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	d100      	bne.n	80029d2 <HAL_RCC_OscConfig+0x14a>
 80029d0:	e06c      	b.n	8002aac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029d2:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	220c      	movs	r2, #12
 80029d8:	4013      	ands	r3, r2
 80029da:	d00e      	beq.n	80029fa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029dc:	4b78      	ldr	r3, [pc, #480]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	220c      	movs	r2, #12
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d11f      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1a0>
 80029e8:	4b75      	ldr	r3, [pc, #468]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	23c0      	movs	r3, #192	; 0xc0
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	401a      	ands	r2, r3
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d116      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	4b71      	ldr	r3, [pc, #452]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_OscConfig+0x188>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e2bb      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b6b      	ldr	r3, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	22f8      	movs	r2, #248	; 0xf8
 8002a16:	4393      	bics	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00da      	lsls	r2, r3, #3
 8002a20:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	e041      	b.n	8002aac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d024      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a30:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a36:	2101      	movs	r1, #1
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fca0 	bl	8001380 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe fc9b 	bl	8001380 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e297      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d0f1      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	22f8      	movs	r2, #248	; 0xf8
 8002a68:	4393      	bics	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00da      	lsls	r2, r3, #3
 8002a72:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e018      	b.n	8002aac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	438a      	bics	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fc7b 	bl	8001380 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a90:	f7fe fc76 	bl	8001380 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e272      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d1f1      	bne.n	8002a90 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d036      	beq.n	8002b24 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d019      	beq.n	8002af2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002abe:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7fe fc59 	bl	8001380 <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fc54 	bl	8001380 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e250      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0f1      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x24c>
 8002af0:	e018      	b.n	8002b24 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002af8:	2101      	movs	r1, #1
 8002afa:	438a      	bics	r2, r1
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7fe fc3f 	bl	8001380 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe fc3a 	bl	8001380 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e236      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1a:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	d1f1      	bne.n	8002b08 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d100      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2a8>
 8002b2e:	e0b5      	b.n	8002c9c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b30:	201f      	movs	r0, #31
 8002b32:	183b      	adds	r3, r7, r0
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	055b      	lsls	r3, r3, #21
 8002b40:	4013      	ands	r3, r2
 8002b42:	d110      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0549      	lsls	r1, r1, #21
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	61da      	str	r2, [r3, #28]
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	055b      	lsls	r3, r3, #21
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_OscConfig+0x344>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d11a      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCC_OscConfig+0x344>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_RCC_OscConfig+0x344>)
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	0049      	lsls	r1, r1, #1
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b80:	f7fe fbfe 	bl	8001380 <HAL_GetTick>
 8002b84:	0003      	movs	r3, r0
 8002b86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe fbf9 	bl	8001380 <HAL_GetTick>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1f5      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x344>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10f      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x348>
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <HAL_RCC_OscConfig+0x338>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	621a      	str	r2, [r3, #32]
 8002bbc:	e036      	b.n	8002c2c <HAL_RCC_OscConfig+0x3a4>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	fffeffff 	.word	0xfffeffff
 8002bc8:	fffbffff 	.word	0xfffbffff
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x36a>
 8002bd8:	4bca      	ldr	r3, [pc, #808]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	4bc9      	ldr	r3, [pc, #804]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	621a      	str	r2, [r3, #32]
 8002be4:	4bc7      	ldr	r3, [pc, #796]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	4bc6      	ldr	r3, [pc, #792]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002bea:	2104      	movs	r1, #4
 8002bec:	438a      	bics	r2, r1
 8002bee:	621a      	str	r2, [r3, #32]
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x3a4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x38c>
 8002bfa:	4bc2      	ldr	r3, [pc, #776]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	4bc1      	ldr	r3, [pc, #772]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c00:	2104      	movs	r1, #4
 8002c02:	430a      	orrs	r2, r1
 8002c04:	621a      	str	r2, [r3, #32]
 8002c06:	4bbf      	ldr	r3, [pc, #764]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	4bbe      	ldr	r3, [pc, #760]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	621a      	str	r2, [r3, #32]
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x3a4>
 8002c14:	4bbb      	ldr	r3, [pc, #748]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	4bba      	ldr	r3, [pc, #744]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	621a      	str	r2, [r3, #32]
 8002c20:	4bb8      	ldr	r3, [pc, #736]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	4bb7      	ldr	r3, [pc, #732]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	2104      	movs	r1, #4
 8002c28:	438a      	bics	r2, r1
 8002c2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d014      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c34:	f7fe fba4 	bl	8001380 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e009      	b.n	8002c52 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fb9f 	bl	8001380 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	4aaf      	ldr	r2, [pc, #700]	; (8002f08 <HAL_RCC_OscConfig+0x680>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e19a      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4bac      	ldr	r3, [pc, #688]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3b6>
 8002c5c:	e013      	b.n	8002c86 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fb8f 	bl	8001380 <HAL_GetTick>
 8002c62:	0003      	movs	r3, r0
 8002c64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e009      	b.n	8002c7c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe fb8a 	bl	8001380 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	4aa5      	ldr	r2, [pc, #660]	; (8002f08 <HAL_RCC_OscConfig+0x680>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e185      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	4ba1      	ldr	r3, [pc, #644]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c86:	231f      	movs	r3, #31
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b9c      	ldr	r3, [pc, #624]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	4b9b      	ldr	r3, [pc, #620]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002c96:	499d      	ldr	r1, [pc, #628]	; (8002f0c <HAL_RCC_OscConfig+0x684>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d12a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cae:	4b95      	ldr	r3, [pc, #596]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb2:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cba:	4b92      	ldr	r3, [pc, #584]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cbe:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fb5b 	bl	8001380 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cd0:	f7fe fb56 	bl	8001380 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e152      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d0f1      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cec:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	22f8      	movs	r2, #248	; 0xf8
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	00da      	lsls	r2, r3, #3
 8002cfc:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
 8002d02:	e034      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	3305      	adds	r3, #5
 8002d0a:	d111      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d0c:	4b7d      	ldr	r3, [pc, #500]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d10:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d12:	2104      	movs	r1, #4
 8002d14:	438a      	bics	r2, r1
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d18:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	22f8      	movs	r2, #248	; 0xf8
 8002d1e:	4393      	bics	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	00da      	lsls	r2, r3, #3
 8002d28:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2e:	e01e      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d30:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	4b73      	ldr	r3, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d36:	2104      	movs	r1, #4
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d3c:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7fe fb1a 	bl	8001380 <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d52:	f7fe fb15 	bl	8001380 <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e111      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d64:	4b67      	ldr	r3, [pc, #412]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f1      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2220      	movs	r2, #32
 8002d74:	4013      	ands	r3, r2
 8002d76:	d05c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d78:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d00e      	beq.n	8002da2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d84:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	220c      	movs	r2, #12
 8002d8a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d114      	bne.n	8002dba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d90:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	23c0      	movs	r3, #192	; 0xc0
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	401a      	ands	r2, r3
 8002d9a:	23c0      	movs	r3, #192	; 0xc0
 8002d9c:	025b      	lsls	r3, r3, #9
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d10b      	bne.n	8002dba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002da2:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	025b      	lsls	r3, r3, #9
 8002daa:	4013      	ands	r3, r2
 8002dac:	d040      	beq.n	8002e30 <HAL_RCC_OscConfig+0x5a8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d03c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e6      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002dc2:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc6:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	0249      	lsls	r1, r1, #9
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fad6 	bl	8001380 <HAL_GetTick>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dda:	f7fe fad1 	bl	8001380 <HAL_GetTick>
 8002dde:	0002      	movs	r2, r0
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0cd      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	025b      	lsls	r3, r3, #9
 8002df4:	4013      	ands	r3, r2
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x552>
 8002df8:	e01b      	b.n	8002e32 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e00:	4943      	ldr	r1, [pc, #268]	; (8002f10 <HAL_RCC_OscConfig+0x688>)
 8002e02:	400a      	ands	r2, r1
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe fabb 	bl	8001380 <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e10:	f7fe fab6 	bl	8001380 <HAL_GetTick>
 8002e14:	0002      	movs	r2, r0
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0b2      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	025b      	lsls	r3, r3, #9
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x588>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e30:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d100      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5b4>
 8002e3a:	e0a4      	b.n	8002f86 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	220c      	movs	r2, #12
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d100      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5c2>
 8002e48:	e078      	b.n	8002f3c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d14c      	bne.n	8002eec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e58:	492e      	ldr	r1, [pc, #184]	; (8002f14 <HAL_RCC_OscConfig+0x68c>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fa8f 	bl	8001380 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe fa8a 	bl	8001380 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e086      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	049b      	lsls	r3, r3, #18
 8002e82:	4013      	ands	r3, r2
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e86:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_RCC_OscConfig+0x690>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	431a      	orrs	r2, r3
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0449      	lsls	r1, r1, #17
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fa5d 	bl	8001380 <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fa58 	bl	8001380 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e054      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	049b      	lsls	r3, r3, #18
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x644>
 8002eea:	e04c      	b.n	8002f86 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	4908      	ldr	r1, [pc, #32]	; (8002f14 <HAL_RCC_OscConfig+0x68c>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fa42 	bl	8001380 <HAL_GetTick>
 8002efc:	0003      	movs	r3, r0
 8002efe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x6a6>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	40021000 	.word	0x40021000
 8002f08:	00001388 	.word	0x00001388
 8002f0c:	efffffff 	.word	0xefffffff
 8002f10:	fffeffff 	.word	0xfffeffff
 8002f14:	feffffff 	.word	0xfeffffff
 8002f18:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fa30 	bl	8001380 <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e02c      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <HAL_RCC_OscConfig+0x708>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	049b      	lsls	r3, r3, #18
 8002f36:	4013      	ands	r3, r2
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x694>
 8002f3a:	e024      	b.n	8002f86 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01f      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_RCC_OscConfig+0x708>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCC_OscConfig+0x708>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	23c0      	movs	r3, #192	; 0xc0
 8002f58:	025b      	lsls	r3, r3, #9
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d10e      	bne.n	8002f82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	220f      	movs	r2, #15
 8002f68:	401a      	ands	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	23f0      	movs	r3, #240	; 0xf0
 8002f76:	039b      	lsls	r3, r3, #14
 8002f78:	401a      	ands	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b008      	add	sp, #32
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000

08002f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0bf      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d911      	bls.n	8002fda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b5e      	ldr	r3, [pc, #376]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc8:	4b59      	ldr	r3, [pc, #356]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0a6      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d015      	beq.n	8003010 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	4013      	ands	r3, r2
 8002fec:	d006      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fee:	4b51      	ldr	r3, [pc, #324]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff4:	21e0      	movs	r1, #224	; 0xe0
 8002ff6:	00c9      	lsls	r1, r1, #3
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	22f0      	movs	r2, #240	; 0xf0
 8003002:	4393      	bics	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	4013      	ands	r3, r2
 8003018:	d04c      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b44      	ldr	r3, [pc, #272]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	029b      	lsls	r3, r3, #10
 800302a:	4013      	ands	r3, r2
 800302c:	d120      	bne.n	8003070 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07a      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	049b      	lsls	r3, r3, #18
 8003042:	4013      	ands	r3, r2
 8003044:	d114      	bne.n	8003070 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e06e      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003052:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8003054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	025b      	lsls	r3, r3, #9
 800305a:	4013      	ands	r3, r2
 800305c:	d108      	bne.n	8003070 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e062      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e05b      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2203      	movs	r2, #3
 8003076:	4393      	bics	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8003080:	430a      	orrs	r2, r1
 8003082:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003084:	f7fe f97c 	bl	8001380 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308c:	e009      	b.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308e:	f7fe f977 	bl	8001380 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	4a27      	ldr	r2, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x1a4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e042      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	220c      	movs	r2, #12
 80030a8:	401a      	ands	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d1ec      	bne.n	800308e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2201      	movs	r2, #1
 80030ba:	4013      	ands	r3, r2
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d211      	bcs.n	80030e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4393      	bics	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_RCC_ClockConfig+0x19c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e020      	b.n	8003128 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a11      	ldr	r2, [pc, #68]	; (800313c <HAL_RCC_ClockConfig+0x1a8>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003104:	f000 f820 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003108:	0001      	movs	r1, r0
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x1a0>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	220f      	movs	r2, #15
 8003112:	4013      	ands	r3, r2
 8003114:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1ac>)
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	000a      	movs	r2, r1
 800311a:	40da      	lsrs	r2, r3
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1b0>)
 800311e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003120:	2000      	movs	r0, #0
 8003122:	f7fe f8e7 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b004      	add	sp, #16
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40022000 	.word	0x40022000
 8003134:	40021000 	.word	0x40021000
 8003138:	00001388 	.word	0x00001388
 800313c:	fffff8ff 	.word	0xfffff8ff
 8003140:	080067f8 	.word	0x080067f8
 8003144:	20000018 	.word	0x20000018

08003148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08f      	sub	sp, #60	; 0x3c
 800314c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800314e:	2314      	movs	r3, #20
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	4a38      	ldr	r2, [pc, #224]	; (8003234 <HAL_RCC_GetSysClockFreq+0xec>)
 8003154:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003156:	c313      	stmia	r3!, {r0, r1, r4}
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	4a36      	ldr	r2, [pc, #216]	; (8003238 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003160:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003162:	c313      	stmia	r3!, {r0, r1, r4}
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316c:	2300      	movs	r3, #0
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003170:	2300      	movs	r3, #0
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800317c:	4b2f      	ldr	r3, [pc, #188]	; (800323c <HAL_RCC_GetSysClockFreq+0xf4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	220c      	movs	r2, #12
 8003186:	4013      	ands	r3, r2
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d047      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0xd4>
 800318c:	d849      	bhi.n	8003222 <HAL_RCC_GetSysClockFreq+0xda>
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x50>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x56>
 8003196:	e044      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800319a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800319c:	e044      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	220f      	movs	r2, #15
 80031a4:	4013      	ands	r3, r2
 80031a6:	2214      	movs	r2, #20
 80031a8:	18ba      	adds	r2, r7, r2
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <HAL_RCC_GetSysClockFreq+0xf4>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	220f      	movs	r2, #15
 80031b4:	4013      	ands	r3, r2
 80031b6:	1d3a      	adds	r2, r7, #4
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031be:	23c0      	movs	r3, #192	; 0xc0
 80031c0:	025b      	lsls	r3, r3, #9
 80031c2:	401a      	ands	r2, r3
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	025b      	lsls	r3, r3, #9
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d109      	bne.n	80031e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ce:	481c      	ldr	r0, [pc, #112]	; (8003240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031d0:	f7fc ff9a 	bl	8000108 <__udivsi3>
 80031d4:	0003      	movs	r3, r0
 80031d6:	001a      	movs	r2, r3
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	4353      	muls	r3, r2
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
 80031de:	e01a      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80031e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	025b      	lsls	r3, r3, #9
 80031e6:	401a      	ands	r2, r3
 80031e8:	23c0      	movs	r3, #192	; 0xc0
 80031ea:	025b      	lsls	r3, r3, #9
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d109      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f2:	4814      	ldr	r0, [pc, #80]	; (8003244 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031f4:	f7fc ff88 	bl	8000108 <__udivsi3>
 80031f8:	0003      	movs	r3, r0
 80031fa:	001a      	movs	r2, r3
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	4353      	muls	r3, r2
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	e008      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003206:	480e      	ldr	r0, [pc, #56]	; (8003240 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003208:	f7fc ff7e 	bl	8000108 <__udivsi3>
 800320c:	0003      	movs	r3, r0
 800320e:	001a      	movs	r2, r3
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	4353      	muls	r3, r2
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800321a:	e005      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_GetSysClockFreq+0xfc>)
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003220:	e002      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003226:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b00f      	add	sp, #60	; 0x3c
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	080067d8 	.word	0x080067d8
 8003238:	080067e8 	.word	0x080067e8
 800323c:	40021000 	.word	0x40021000
 8003240:	007a1200 	.word	0x007a1200
 8003244:	02dc6c00 	.word	0x02dc6c00

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b02      	ldr	r3, [pc, #8]	; (8003258 <HAL_RCC_GetHCLKFreq+0x10>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	20000018 	.word	0x20000018

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003260:	f7ff fff2 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003264:	0001      	movs	r1, r0
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	2207      	movs	r2, #7
 800326e:	4013      	ands	r3, r2
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	40d9      	lsrs	r1, r3
 8003276:	000b      	movs	r3, r1
}    
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	40021000 	.word	0x40021000
 8003284:	08006808 	.word	0x08006808

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	025b      	lsls	r3, r3, #9
 80032a0:	4013      	ands	r3, r2
 80032a2:	d100      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80032a4:	e08e      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2017      	movs	r0, #23
 80032a8:	183b      	adds	r3, r7, r0
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b6e      	ldr	r3, [pc, #440]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	055b      	lsls	r3, r3, #21
 80032b6:	4013      	ands	r3, r2
 80032b8:	d110      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	4b6b      	ldr	r3, [pc, #428]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	0549      	lsls	r1, r1, #21
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
 80032c8:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	055b      	lsls	r3, r3, #21
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	d11a      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e8:	4b60      	ldr	r3, [pc, #384]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b5f      	ldr	r3, [pc, #380]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	0049      	lsls	r1, r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f6:	f7fe f843 	bl	8001380 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	e008      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003300:	f7fe f83e 	bl	8001380 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0a6      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b56      	ldr	r3, [pc, #344]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4013      	ands	r3, r2
 800331c:	d0f0      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800331e:	4b52      	ldr	r3, [pc, #328]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4013      	ands	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d034      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	23c0      	movs	r3, #192	; 0xc0
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4013      	ands	r3, r2
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	429a      	cmp	r2, r3
 800333e:	d02c      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0249      	lsls	r1, r1, #9
 8003354:	430a      	orrs	r2, r1
 8003356:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	4b42      	ldr	r3, [pc, #264]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800335e:	4945      	ldr	r1, [pc, #276]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003360:	400a      	ands	r2, r1
 8003362:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003364:	4b40      	ldr	r3, [pc, #256]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	d013      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe f805 	bl	8001380 <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	e009      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe f800 	bl	8001380 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e067      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	2202      	movs	r2, #2
 8003396:	4013      	ands	r3, r2
 8003398:	d0f0      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a34      	ldr	r2, [pc, #208]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033aa:	430a      	orrs	r2, r1
 80033ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ae:	2317      	movs	r3, #23
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033be:	492f      	ldr	r1, [pc, #188]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2201      	movs	r2, #1
 80033ca:	4013      	ands	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	2203      	movs	r2, #3
 80033d4:	4393      	bics	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2220      	movs	r2, #32
 8003406:	4013      	ands	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	2210      	movs	r2, #16
 8003410:	4393      	bics	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800341a:	430a      	orrs	r2, r1
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	029b      	lsls	r3, r3, #10
 8003426:	4013      	ands	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	4393      	bics	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800343a:	430a      	orrs	r2, r1
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4013      	ands	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	4393      	bics	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800345a:	430a      	orrs	r2, r1
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b006      	add	sp, #24
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	40007000 	.word	0x40007000
 8003470:	fffffcff 	.word	0xfffffcff
 8003474:	fffeffff 	.word	0xfffeffff
 8003478:	00001388 	.word	0x00001388
 800347c:	efffffff 	.word	0xefffffff
 8003480:	fffcffff 	.word	0xfffcffff

08003484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0a8      	b.n	80035e8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	2382      	movs	r3, #130	; 0x82
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d009      	beq.n	80034be <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	61da      	str	r2, [r3, #28]
 80034b0:	e005      	b.n	80034be <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	225d      	movs	r2, #93	; 0x5d
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	225c      	movs	r2, #92	; 0x5c
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fd fd1a 	bl	8000f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	225d      	movs	r2, #93	; 0x5d
 80034e4:	2102      	movs	r1, #2
 80034e6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2140      	movs	r1, #64	; 0x40
 80034f4:	438a      	bics	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	23e0      	movs	r3, #224	; 0xe0
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	429a      	cmp	r2, r3
 8003502:	d902      	bls.n	800350a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e002      	b.n	8003510 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	015b      	lsls	r3, r3, #5
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	23f0      	movs	r3, #240	; 0xf0
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	429a      	cmp	r2, r3
 800351a:	d008      	beq.n	800352e <HAL_SPI_Init+0xaa>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	23e0      	movs	r3, #224	; 0xe0
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	429a      	cmp	r2, r3
 8003526:	d002      	beq.n	800352e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	2382      	movs	r3, #130	; 0x82
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	401a      	ands	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	2384      	movs	r3, #132	; 0x84
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	400b      	ands	r3, r1
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2102      	movs	r1, #2
 800354a:	400b      	ands	r3, r1
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2101      	movs	r1, #1
 8003554:	400b      	ands	r3, r1
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6999      	ldr	r1, [r3, #24]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	400b      	ands	r3, r1
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	2138      	movs	r1, #56	; 0x38
 800356a:	400b      	ands	r3, r1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	400b      	ands	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	0011      	movs	r1, r2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	019b      	lsls	r3, r3, #6
 8003582:	401a      	ands	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	2204      	movs	r2, #4
 8003594:	401a      	ands	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2110      	movs	r1, #16
 800359c:	400b      	ands	r3, r1
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	2108      	movs	r1, #8
 80035a6:	400b      	ands	r3, r1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68d9      	ldr	r1, [r3, #12]
 80035ae:	23f0      	movs	r3, #240	; 0xf0
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	400b      	ands	r3, r1
 80035b4:	431a      	orrs	r2, r3
 80035b6:	0011      	movs	r1, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	015b      	lsls	r3, r3, #5
 80035be:	401a      	ands	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4907      	ldr	r1, [pc, #28]	; (80035f0 <HAL_SPI_Init+0x16c>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	225d      	movs	r2, #93	; 0x5d
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b004      	add	sp, #16
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	fffff7ff 	.word	0xfffff7ff

080035f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	001a      	movs	r2, r3
 8003602:	1cbb      	adds	r3, r7, #2
 8003604:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003606:	2301      	movs	r3, #1
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800360a:	2323      	movs	r3, #35	; 0x23
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	225c      	movs	r2, #92	; 0x5c
 8003616:	5c9b      	ldrb	r3, [r3, r2]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x2c>
 800361c:	2302      	movs	r3, #2
 800361e:	e1b5      	b.n	800398c <HAL_SPI_TransmitReceive+0x398>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	225c      	movs	r2, #92	; 0x5c
 8003624:	2101      	movs	r1, #1
 8003626:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003628:	f7fd feaa 	bl	8001380 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003630:	201b      	movs	r0, #27
 8003632:	183b      	adds	r3, r7, r0
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	215d      	movs	r1, #93	; 0x5d
 8003638:	5c52      	ldrb	r2, [r2, r1]
 800363a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003642:	2312      	movs	r3, #18
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	1cba      	adds	r2, r7, #2
 8003648:	8812      	ldrh	r2, [r2, #0]
 800364a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800364c:	183b      	adds	r3, r7, r0
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d011      	beq.n	8003678 <HAL_SPI_TransmitReceive+0x84>
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	2382      	movs	r3, #130	; 0x82
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	429a      	cmp	r2, r3
 800365c:	d107      	bne.n	800366e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_SPI_TransmitReceive+0x7a>
 8003666:	183b      	adds	r3, r7, r0
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b04      	cmp	r3, #4
 800366c:	d004      	beq.n	8003678 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800366e:	2323      	movs	r3, #35	; 0x23
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
    goto error;
 8003676:	e17e      	b.n	8003976 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <HAL_SPI_TransmitReceive+0x98>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_SPI_TransmitReceive+0x98>
 8003684:	1cbb      	adds	r3, r7, #2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800368c:	2323      	movs	r3, #35	; 0x23
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
    goto error;
 8003694:	e16f      	b.n	8003976 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	225d      	movs	r2, #93	; 0x5d
 800369a:	5c9b      	ldrb	r3, [r3, r2]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	225d      	movs	r2, #93	; 0x5d
 80036a6:	2105      	movs	r1, #5
 80036a8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1cba      	adds	r2, r7, #2
 80036ba:	2146      	movs	r1, #70	; 0x46
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1cba      	adds	r2, r7, #2
 80036c4:	2144      	movs	r1, #68	; 0x44
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1cba      	adds	r2, r7, #2
 80036d4:	8812      	ldrh	r2, [r2, #0]
 80036d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1cba      	adds	r2, r7, #2
 80036dc:	8812      	ldrh	r2, [r2, #0]
 80036de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	23e0      	movs	r3, #224	; 0xe0
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d908      	bls.n	800370a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	49a4      	ldr	r1, [pc, #656]	; (8003994 <HAL_SPI_TransmitReceive+0x3a0>)
 8003704:	400a      	ands	r2, r1
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	e008      	b.n	800371c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	0149      	lsls	r1, r1, #5
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	4013      	ands	r3, r2
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d007      	beq.n	800373a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	23e0      	movs	r3, #224	; 0xe0
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	429a      	cmp	r2, r3
 8003744:	d800      	bhi.n	8003748 <HAL_SPI_TransmitReceive+0x154>
 8003746:	e07f      	b.n	8003848 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_SPI_TransmitReceive+0x168>
 8003750:	2312      	movs	r3, #18
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d000      	beq.n	800375c <HAL_SPI_TransmitReceive+0x168>
 800375a:	e069      	b.n	8003830 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003780:	e056      	b.n	8003830 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d11b      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x1d4>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x1d4>
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	d113      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2201      	movs	r2, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11c      	bne.n	8003810 <HAL_SPI_TransmitReceive+0x21c>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2246      	movs	r2, #70	; 0x46
 80037da:	5a9b      	ldrh	r3, [r3, r2]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	b292      	uxth	r2, r2
 80037ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	1c9a      	adds	r2, r3, #2
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2246      	movs	r2, #70	; 0x46
 80037fe:	5a9b      	ldrh	r3, [r3, r2]
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b299      	uxth	r1, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2246      	movs	r2, #70	; 0x46
 800380a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800380c:	2301      	movs	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003810:	f7fd fdb6 	bl	8001380 <HAL_GetTick>
 8003814:	0002      	movs	r2, r0
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381c:	429a      	cmp	r2, r3
 800381e:	d807      	bhi.n	8003830 <HAL_SPI_TransmitReceive+0x23c>
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	3301      	adds	r3, #1
 8003824:	d004      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003826:	2323      	movs	r3, #35	; 0x23
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2203      	movs	r2, #3
 800382c:	701a      	strb	r2, [r3, #0]
        goto error;
 800382e:	e0a2      	b.n	8003976 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1a3      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x18e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2246      	movs	r2, #70	; 0x46
 800383e:	5a9b      	ldrh	r3, [r3, r2]
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d19d      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x18e>
 8003846:	e085      	b.n	8003954 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_SPI_TransmitReceive+0x268>
 8003850:	2312      	movs	r3, #18
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d000      	beq.n	800385c <HAL_SPI_TransmitReceive+0x268>
 800385a:	e070      	b.n	800393e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003882:	e05c      	b.n	800393e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11c      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x2d8>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x2d8>
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d114      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d11e      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x324>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2246      	movs	r2, #70	; 0x46
 80038de:	5a9b      	ldrh	r3, [r3, r2]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	001a      	movs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2246      	movs	r2, #70	; 0x46
 8003906:	5a9b      	ldrh	r3, [r3, r2]
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b299      	uxth	r1, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2246      	movs	r2, #70	; 0x46
 8003912:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003918:	f7fd fd32 	bl	8001380 <HAL_GetTick>
 800391c:	0002      	movs	r2, r0
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003924:	429a      	cmp	r2, r3
 8003926:	d802      	bhi.n	800392e <HAL_SPI_TransmitReceive+0x33a>
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	3301      	adds	r3, #1
 800392c:	d102      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x340>
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003934:	2323      	movs	r3, #35	; 0x23
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2203      	movs	r2, #3
 800393a:	701a      	strb	r2, [r3, #0]
        goto error;
 800393c:	e01b      	b.n	8003976 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d19d      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x290>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2246      	movs	r2, #70	; 0x46
 800394c:	5a9b      	ldrh	r3, [r3, r2]
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d197      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f94c 	bl	8003bf8 <SPI_EndRxTxTransaction>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d007      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003964:	2323      	movs	r3, #35	; 0x23
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	661a      	str	r2, [r3, #96]	; 0x60
 8003972:	e000      	b.n	8003976 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003974:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	225d      	movs	r2, #93	; 0x5d
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	225c      	movs	r2, #92	; 0x5c
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003986:	2323      	movs	r3, #35	; 0x23
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	781b      	ldrb	r3, [r3, #0]
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b00a      	add	sp, #40	; 0x28
 8003992:	bd80      	pop	{r7, pc}
 8003994:	ffffefff 	.word	0xffffefff

08003998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	1dfb      	adds	r3, r7, #7
 80039a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039a8:	f7fd fcea 	bl	8001380 <HAL_GetTick>
 80039ac:	0002      	movs	r2, r0
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	18d3      	adds	r3, r2, r3
 80039b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039b8:	f7fd fce2 	bl	8001380 <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039c0:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	015b      	lsls	r3, r3, #5
 80039c6:	0d1b      	lsrs	r3, r3, #20
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	4353      	muls	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ce:	e058      	b.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	d055      	beq.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039d6:	f7fd fcd3 	bl	8001380 <HAL_GetTick>
 80039da:	0002      	movs	r2, r0
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d902      	bls.n	80039ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d142      	bne.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	21e0      	movs	r1, #224	; 0xe0
 80039f8:	438a      	bics	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	2382      	movs	r3, #130	; 0x82
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d113      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d107      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2140      	movs	r1, #64	; 0x40
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	019b      	lsls	r3, r3, #6
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d110      	bne.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	491a      	ldr	r1, [pc, #104]	; (8003ab0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	0189      	lsls	r1, r1, #6
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	225d      	movs	r2, #93	; 0x5d
 8003a62:	2101      	movs	r1, #1
 8003a64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	225c      	movs	r2, #92	; 0x5c
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e017      	b.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	425a      	negs	r2, r3
 8003a92:	4153      	adcs	r3, r2
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	001a      	movs	r2, r3
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d197      	bne.n	80039d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b008      	add	sp, #32
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	20000018 	.word	0x20000018
 8003ab0:	ffffdfff 	.word	0xffffdfff

08003ab4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ac2:	2317      	movs	r3, #23
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003aca:	f7fd fc59 	bl	8001380 <HAL_GetTick>
 8003ace:	0002      	movs	r2, r0
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	18d3      	adds	r3, r2, r3
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003ada:	f7fd fc51 	bl	8001380 <HAL_GetTick>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	0013      	movs	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	00da      	lsls	r2, r3, #3
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	0d1b      	lsrs	r3, r3, #20
 8003afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afc:	4353      	muls	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b00:	e068      	b.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	23c0      	movs	r3, #192	; 0xc0
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d10a      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	2117      	movs	r1, #23
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	d055      	beq.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b28:	f7fd fc2a 	bl	8001380 <HAL_GetTick>
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d902      	bls.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d142      	bne.n	8003bc4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	21e0      	movs	r1, #224	; 0xe0
 8003b4a:	438a      	bics	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	2382      	movs	r3, #130	; 0x82
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d113      	bne.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d005      	beq.n	8003b72 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d107      	bne.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2140      	movs	r1, #64	; 0x40
 8003b7e:	438a      	bics	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d110      	bne.n	8003bb0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4916      	ldr	r1, [pc, #88]	; (8003bf4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2180      	movs	r1, #128	; 0x80
 8003baa:	0189      	lsls	r1, r1, #6
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	225d      	movs	r2, #93	; 0x5d
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	225c      	movs	r2, #92	; 0x5c
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e010      	b.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d18e      	bne.n	8003b02 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b00a      	add	sp, #40	; 0x28
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	20000018 	.word	0x20000018
 8003bf4:	ffffdfff 	.word	0xffffdfff

08003bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	23c0      	movs	r3, #192	; 0xc0
 8003c08:	0159      	lsls	r1, r3, #5
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	0013      	movs	r3, r2
 8003c12:	2200      	movs	r2, #0
 8003c14:	f7ff ff4e 	bl	8003ab4 <SPI_WaitFifoStateUntilTimeout>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d007      	beq.n	8003c2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	2220      	movs	r2, #32
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e027      	b.n	8003c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	0013      	movs	r3, r2
 8003c36:	2200      	movs	r2, #0
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	f7ff fead 	bl	8003998 <SPI_WaitFlagStateUntilTimeout>
 8003c3e:	1e03      	subs	r3, r0, #0
 8003c40:	d007      	beq.n	8003c52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c46:	2220      	movs	r2, #32
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e014      	b.n	8003c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	23c0      	movs	r3, #192	; 0xc0
 8003c56:	00d9      	lsls	r1, r3, #3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	0013      	movs	r3, r2
 8003c60:	2200      	movs	r2, #0
 8003c62:	f7ff ff27 	bl	8003ab4 <SPI_WaitFifoStateUntilTimeout>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d007      	beq.n	8003c7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	2220      	movs	r2, #32
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e000      	b.n	8003c7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e044      	b.n	8003d20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d107      	bne.n	8003cae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2274      	movs	r2, #116	; 0x74
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fd f981 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2224      	movs	r2, #36	; 0x24
 8003cb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fba4 	bl	8004414 <UART_SetConfig>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e024      	b.n	8003d20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f000 fd1f 	bl	8004724 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	490d      	ldr	r1, [pc, #52]	; (8003d28 <HAL_UART_Init+0xa4>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	212a      	movs	r1, #42	; 0x2a
 8003d02:	438a      	bics	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fdb7 	bl	800488c <UART_CheckIdleState>
 8003d1e:	0003      	movs	r3, r0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	ffffb7ff 	.word	0xffffb7ff

08003d2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	1dbb      	adds	r3, r7, #6
 8003d38:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d000      	beq.n	8003d44 <HAL_UART_Transmit_IT+0x18>
 8003d42:	e06a      	b.n	8003e1a <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_UART_Transmit_IT+0x26>
 8003d4a:	1dbb      	adds	r3, r7, #6
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e062      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	015b      	lsls	r3, r3, #5
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d109      	bne.n	8003d76 <HAL_UART_Transmit_IT+0x4a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d001      	beq.n	8003d76 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e052      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2274      	movs	r2, #116	; 0x74
 8003d7a:	5c9b      	ldrb	r3, [r3, r2]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit_IT+0x58>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e04b      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2274      	movs	r2, #116	; 0x74
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1dba      	adds	r2, r7, #6
 8003d96:	2150      	movs	r1, #80	; 0x50
 8003d98:	8812      	ldrh	r2, [r2, #0]
 8003d9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1dba      	adds	r2, r7, #6
 8003da0:	2152      	movs	r1, #82	; 0x52
 8003da2:	8812      	ldrh	r2, [r2, #0]
 8003da4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	2100      	movs	r1, #0
 8003db2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	015b      	lsls	r3, r3, #5
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d107      	bne.n	8003dd6 <HAL_UART_Transmit_IT+0xaa>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_UART_Transmit_IT+0xf8>)
 8003dd2:	669a      	str	r2, [r3, #104]	; 0x68
 8003dd4:	e002      	b.n	8003ddc <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_UART_Transmit_IT+0xfc>)
 8003dda:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2274      	movs	r2, #116	; 0x74
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de4:	f3ef 8310 	mrs	r3, PRIMASK
 8003de8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dea:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	2301      	movs	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
  }
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b008      	add	sp, #32
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08004c4b 	.word	0x08004c4b
 8003e28:	08004b97 	.word	0x08004b97

08003e2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b0ab      	sub	sp, #172	; 0xac
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	22a4      	movs	r2, #164	; 0xa4
 8003e3c:	18b9      	adds	r1, r7, r2
 8003e3e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	20a0      	movs	r0, #160	; 0xa0
 8003e48:	1839      	adds	r1, r7, r0
 8003e4a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	219c      	movs	r1, #156	; 0x9c
 8003e54:	1879      	adds	r1, r7, r1
 8003e56:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e58:	0011      	movs	r1, r2
 8003e5a:	18bb      	adds	r3, r7, r2
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a99      	ldr	r2, [pc, #612]	; (80040c4 <HAL_UART_IRQHandler+0x298>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2298      	movs	r2, #152	; 0x98
 8003e64:	18bc      	adds	r4, r7, r2
 8003e66:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003e68:	18bb      	adds	r3, r7, r2
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d114      	bne.n	8003e9a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2220      	movs	r2, #32
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00f      	beq.n	8003e9a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	4013      	ands	r3, r2
 8003e82:	d00a      	beq.n	8003e9a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d100      	bne.n	8003e8e <HAL_UART_IRQHandler+0x62>
 8003e8c:	e296      	b.n	80043bc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	0010      	movs	r0, r2
 8003e96:	4798      	blx	r3
      }
      return;
 8003e98:	e290      	b.n	80043bc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e9a:	2398      	movs	r3, #152	; 0x98
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d100      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x7a>
 8003ea4:	e114      	b.n	80040d0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ea6:	239c      	movs	r3, #156	; 0x9c
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eb2:	23a0      	movs	r3, #160	; 0xa0
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a83      	ldr	r2, [pc, #524]	; (80040c8 <HAL_UART_IRQHandler+0x29c>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d100      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x94>
 8003ebe:	e107      	b.n	80040d0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ec0:	23a4      	movs	r3, #164	; 0xa4
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d012      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xc6>
 8003ecc:	23a0      	movs	r3, #160	; 0xa0
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	589b      	ldr	r3, [r3, r2]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef2:	23a4      	movs	r3, #164	; 0xa4
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	4013      	ands	r3, r2
 8003efc:	d011      	beq.n	8003f22 <HAL_UART_IRQHandler+0xf6>
 8003efe:	239c      	movs	r3, #156	; 0x9c
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2280      	movs	r2, #128	; 0x80
 8003f16:	589b      	ldr	r3, [r3, r2]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2180      	movs	r1, #128	; 0x80
 8003f20:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f22:	23a4      	movs	r3, #164	; 0xa4
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d011      	beq.n	8003f52 <HAL_UART_IRQHandler+0x126>
 8003f2e:	239c      	movs	r3, #156	; 0x9c
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	589b      	ldr	r3, [r3, r2]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f52:	23a4      	movs	r3, #164	; 0xa4
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f5e:	23a0      	movs	r3, #160	; 0xa0
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2220      	movs	r2, #32
 8003f66:	4013      	ands	r3, r2
 8003f68:	d105      	bne.n	8003f76 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f6a:	239c      	movs	r3, #156	; 0x9c
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	589b      	ldr	r3, [r3, r2]
 8003f84:	2208      	movs	r2, #8
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f8e:	23a4      	movs	r3, #164	; 0xa4
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x198>
 8003f9c:	23a0      	movs	r3, #160	; 0xa0
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	04db      	lsls	r3, r3, #19
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2280      	movs	r2, #128	; 0x80
 8003fb0:	0112      	lsls	r2, r2, #4
 8003fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	589b      	ldr	r3, [r3, r2]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2280      	movs	r2, #128	; 0x80
 8003fc8:	589b      	ldr	r3, [r3, r2]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d100      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x1a4>
 8003fce:	e1f7      	b.n	80043c0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fd0:	23a4      	movs	r3, #164	; 0xa4
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fdc:	23a0      	movs	r3, #160	; 0xa0
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d008      	beq.n	8003ffa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2280      	movs	r2, #128	; 0x80
 8003ffe:	589b      	ldr	r3, [r3, r2]
 8004000:	2194      	movs	r1, #148	; 0x94
 8004002:	187a      	adds	r2, r7, r1
 8004004:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2240      	movs	r2, #64	; 0x40
 800400e:	4013      	ands	r3, r2
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d004      	beq.n	800401e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004014:	187b      	adds	r3, r7, r1
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2228      	movs	r2, #40	; 0x28
 800401a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800401c:	d047      	beq.n	80040ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 fd3f 	bl	8004aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	4013      	ands	r3, r2
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d137      	bne.n	80040a4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004034:	f3ef 8310 	mrs	r3, PRIMASK
 8004038:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800403a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403c:	2090      	movs	r0, #144	; 0x90
 800403e:	183a      	adds	r2, r7, r0
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	2301      	movs	r3, #1
 8004044:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	438a      	bics	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	183b      	adds	r3, r7, r0
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004066:	f383 8810 	msr	PRIMASK, r3
}
 800406a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_UART_IRQHandler+0x2a0>)
 800407a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	0018      	movs	r0, r3
 8004082:	f7fe f94b 	bl	800231c <HAL_DMA_Abort_IT>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d01a      	beq.n	80040c0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	0018      	movs	r0, r3
 8004096:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e012      	b.n	80040c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 f9a5 	bl	80043ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a2:	e00d      	b.n	80040c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f9a0 	bl	80043ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e008      	b.n	80040c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f99b 	bl	80043ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	2100      	movs	r1, #0
 80040bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80040be:	e17f      	b.n	80043c0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	46c0      	nop			; (mov r8, r8)
    return;
 80040c2:	e17d      	b.n	80043c0 <HAL_UART_IRQHandler+0x594>
 80040c4:	0000080f 	.word	0x0000080f
 80040c8:	04000120 	.word	0x04000120
 80040cc:	08004b69 	.word	0x08004b69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d000      	beq.n	80040da <HAL_UART_IRQHandler+0x2ae>
 80040d8:	e131      	b.n	800433e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040da:	23a4      	movs	r3, #164	; 0xa4
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	4013      	ands	r3, r2
 80040e4:	d100      	bne.n	80040e8 <HAL_UART_IRQHandler+0x2bc>
 80040e6:	e12a      	b.n	800433e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040e8:	23a0      	movs	r3, #160	; 0xa0
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2210      	movs	r2, #16
 80040f0:	4013      	ands	r3, r2
 80040f2:	d100      	bne.n	80040f6 <HAL_UART_IRQHandler+0x2ca>
 80040f4:	e123      	b.n	800433e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2210      	movs	r2, #16
 80040fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2240      	movs	r2, #64	; 0x40
 8004106:	4013      	ands	r3, r2
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d000      	beq.n	800410e <HAL_UART_IRQHandler+0x2e2>
 800410c:	e09b      	b.n	8004246 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	217e      	movs	r1, #126	; 0x7e
 8004118:	187b      	adds	r3, r7, r1
 800411a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800411c:	187b      	adds	r3, r7, r1
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d100      	bne.n	8004126 <HAL_UART_IRQHandler+0x2fa>
 8004124:	e14e      	b.n	80043c4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2258      	movs	r2, #88	; 0x58
 800412a:	5a9b      	ldrh	r3, [r3, r2]
 800412c:	187a      	adds	r2, r7, r1
 800412e:	8812      	ldrh	r2, [r2, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d300      	bcc.n	8004136 <HAL_UART_IRQHandler+0x30a>
 8004134:	e146      	b.n	80043c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	187a      	adds	r2, r7, r1
 800413a:	215a      	movs	r1, #90	; 0x5a
 800413c:	8812      	ldrh	r2, [r2, #0]
 800413e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b20      	cmp	r3, #32
 8004148:	d06e      	beq.n	8004228 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414a:	f3ef 8310 	mrs	r3, PRIMASK
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004152:	67bb      	str	r3, [r7, #120]	; 0x78
 8004154:	2301      	movs	r3, #1
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	499a      	ldr	r1, [pc, #616]	; (80043d4 <HAL_UART_IRQHandler+0x5a8>)
 800416c:	400a      	ands	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417c:	f3ef 8310 	mrs	r3, PRIMASK
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	677b      	str	r3, [r7, #116]	; 0x74
 8004186:	2301      	movs	r3, #1
 8004188:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2101      	movs	r1, #1
 800419e:	438a      	bics	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ae:	f3ef 8310 	mrs	r3, PRIMASK
 80041b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80041b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b6:	673b      	str	r3, [r7, #112]	; 0x70
 80041b8:	2301      	movs	r3, #1
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2140      	movs	r1, #64	; 0x40
 80041d0:	438a      	bics	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ec:	f3ef 8310 	mrs	r3, PRIMASK
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f6:	2301      	movs	r3, #1
 80041f8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041fc:	f383 8810 	msr	PRIMASK, r3
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2110      	movs	r1, #16
 800420e:	438a      	bics	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004218:	f383 8810 	msr	PRIMASK, r3
}
 800421c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	0018      	movs	r0, r3
 8004224:	f7fe f842 	bl	80022ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2258      	movs	r2, #88	; 0x58
 800422c:	5a9a      	ldrh	r2, [r3, r2]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	215a      	movs	r1, #90	; 0x5a
 8004232:	5a5b      	ldrh	r3, [r3, r1]
 8004234:	b29b      	uxth	r3, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0011      	movs	r1, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f8dc 	bl	80043fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004244:	e0be      	b.n	80043c4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2258      	movs	r2, #88	; 0x58
 800424a:	5a99      	ldrh	r1, [r3, r2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	225a      	movs	r2, #90	; 0x5a
 8004250:	5a9b      	ldrh	r3, [r3, r2]
 8004252:	b29a      	uxth	r2, r3
 8004254:	208e      	movs	r0, #142	; 0x8e
 8004256:	183b      	adds	r3, r7, r0
 8004258:	1a8a      	subs	r2, r1, r2
 800425a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	225a      	movs	r2, #90	; 0x5a
 8004260:	5a9b      	ldrh	r3, [r3, r2]
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d100      	bne.n	800426a <HAL_UART_IRQHandler+0x43e>
 8004268:	e0ae      	b.n	80043c8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800426a:	183b      	adds	r3, r7, r0
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d100      	bne.n	8004274 <HAL_UART_IRQHandler+0x448>
 8004272:	e0a9      	b.n	80043c8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	60fb      	str	r3, [r7, #12]
  return(result);
 800427a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427c:	2488      	movs	r4, #136	; 0x88
 800427e:	193a      	adds	r2, r7, r4
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	2301      	movs	r3, #1
 8004284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	494f      	ldr	r1, [pc, #316]	; (80043d8 <HAL_UART_IRQHandler+0x5ac>)
 800429a:	400a      	ands	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	193b      	adds	r3, r7, r4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f383 8810 	msr	PRIMASK, r3
}
 80042aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ac:	f3ef 8310 	mrs	r3, PRIMASK
 80042b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80042b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	2484      	movs	r4, #132	; 0x84
 80042b6:	193a      	adds	r2, r7, r4
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	2301      	movs	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	438a      	bics	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	193b      	adds	r3, r7, r4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f383 8810 	msr	PRIMASK, r3
}
 80042e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f6:	f3ef 8310 	mrs	r3, PRIMASK
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fe:	2480      	movs	r4, #128	; 0x80
 8004300:	193a      	adds	r2, r7, r4
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	2301      	movs	r3, #1
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2110      	movs	r1, #16
 800431c:	438a      	bics	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	193b      	adds	r3, r7, r4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800432e:	183b      	adds	r3, r7, r0
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	0011      	movs	r1, r2
 8004336:	0018      	movs	r0, r3
 8004338:	f000 f860 	bl	80043fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800433c:	e044      	b.n	80043c8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800433e:	23a4      	movs	r3, #164	; 0xa4
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	035b      	lsls	r3, r3, #13
 8004348:	4013      	ands	r3, r2
 800434a:	d010      	beq.n	800436e <HAL_UART_IRQHandler+0x542>
 800434c:	239c      	movs	r3, #156	; 0x9c
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	03db      	lsls	r3, r3, #15
 8004356:	4013      	ands	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2280      	movs	r2, #128	; 0x80
 8004360:	0352      	lsls	r2, r2, #13
 8004362:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fcf8 	bl	8004d5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800436c:	e02f      	b.n	80043ce <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800436e:	23a4      	movs	r3, #164	; 0xa4
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2280      	movs	r2, #128	; 0x80
 8004376:	4013      	ands	r3, r2
 8004378:	d00f      	beq.n	800439a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800437a:	23a0      	movs	r3, #160	; 0xa0
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	4013      	ands	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01e      	beq.n	80043cc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	0010      	movs	r0, r2
 8004396:	4798      	blx	r3
    }
    return;
 8004398:	e018      	b.n	80043cc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800439a:	23a4      	movs	r3, #164	; 0xa4
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2240      	movs	r2, #64	; 0x40
 80043a2:	4013      	ands	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_UART_IRQHandler+0x5a2>
 80043a6:	23a0      	movs	r3, #160	; 0xa0
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2240      	movs	r2, #64	; 0x40
 80043ae:	4013      	ands	r3, r2
 80043b0:	d00d      	beq.n	80043ce <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 fca6 	bl	8004d06 <UART_EndTransmit_IT>
    return;
 80043ba:	e008      	b.n	80043ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	e006      	b.n	80043ce <HAL_UART_IRQHandler+0x5a2>
    return;
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	e004      	b.n	80043ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	e002      	b.n	80043ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	e000      	b.n	80043ce <HAL_UART_IRQHandler+0x5a2>
    return;
 80043cc:	46c0      	nop			; (mov r8, r8)
  }

}
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b02b      	add	sp, #172	; 0xac
 80043d2:	bd90      	pop	{r4, r7, pc}
 80043d4:	fffffeff 	.word	0xfffffeff
 80043d8:	fffffedf 	.word	0xfffffedf

080043dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	000a      	movs	r2, r1
 8004406:	1cbb      	adds	r3, r7, #2
 8004408:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800441c:	231e      	movs	r3, #30
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4aaf      	ldr	r2, [pc, #700]	; (8004700 <UART_SetConfig+0x2ec>)
 8004444:	4013      	ands	r3, r2
 8004446:	0019      	movs	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	430a      	orrs	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4aaa      	ldr	r2, [pc, #680]	; (8004704 <UART_SetConfig+0x2f0>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4aa1      	ldr	r2, [pc, #644]	; (8004708 <UART_SetConfig+0x2f4>)
 8004482:	4013      	ands	r3, r2
 8004484:	0019      	movs	r1, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a9d      	ldr	r2, [pc, #628]	; (800470c <UART_SetConfig+0x2f8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d127      	bne.n	80044ea <UART_SetConfig+0xd6>
 800449a:	4b9d      	ldr	r3, [pc, #628]	; (8004710 <UART_SetConfig+0x2fc>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	2203      	movs	r2, #3
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d00d      	beq.n	80044c2 <UART_SetConfig+0xae>
 80044a6:	d81b      	bhi.n	80044e0 <UART_SetConfig+0xcc>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d014      	beq.n	80044d6 <UART_SetConfig+0xc2>
 80044ac:	d818      	bhi.n	80044e0 <UART_SetConfig+0xcc>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <UART_SetConfig+0xa4>
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d00a      	beq.n	80044cc <UART_SetConfig+0xb8>
 80044b6:	e013      	b.n	80044e0 <UART_SetConfig+0xcc>
 80044b8:	231f      	movs	r3, #31
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e065      	b.n	800458e <UART_SetConfig+0x17a>
 80044c2:	231f      	movs	r3, #31
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2202      	movs	r2, #2
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e060      	b.n	800458e <UART_SetConfig+0x17a>
 80044cc:	231f      	movs	r3, #31
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2204      	movs	r2, #4
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e05b      	b.n	800458e <UART_SetConfig+0x17a>
 80044d6:	231f      	movs	r3, #31
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	2208      	movs	r2, #8
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e056      	b.n	800458e <UART_SetConfig+0x17a>
 80044e0:	231f      	movs	r3, #31
 80044e2:	18fb      	adds	r3, r7, r3
 80044e4:	2210      	movs	r2, #16
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	e051      	b.n	800458e <UART_SetConfig+0x17a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a89      	ldr	r2, [pc, #548]	; (8004714 <UART_SetConfig+0x300>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d134      	bne.n	800455e <UART_SetConfig+0x14a>
 80044f4:	4b86      	ldr	r3, [pc, #536]	; (8004710 <UART_SetConfig+0x2fc>)
 80044f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f8:	23c0      	movs	r3, #192	; 0xc0
 80044fa:	029b      	lsls	r3, r3, #10
 80044fc:	4013      	ands	r3, r2
 80044fe:	22c0      	movs	r2, #192	; 0xc0
 8004500:	0292      	lsls	r2, r2, #10
 8004502:	4293      	cmp	r3, r2
 8004504:	d017      	beq.n	8004536 <UART_SetConfig+0x122>
 8004506:	22c0      	movs	r2, #192	; 0xc0
 8004508:	0292      	lsls	r2, r2, #10
 800450a:	4293      	cmp	r3, r2
 800450c:	d822      	bhi.n	8004554 <UART_SetConfig+0x140>
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	0292      	lsls	r2, r2, #10
 8004512:	4293      	cmp	r3, r2
 8004514:	d019      	beq.n	800454a <UART_SetConfig+0x136>
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	0292      	lsls	r2, r2, #10
 800451a:	4293      	cmp	r3, r2
 800451c:	d81a      	bhi.n	8004554 <UART_SetConfig+0x140>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <UART_SetConfig+0x118>
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	0252      	lsls	r2, r2, #9
 8004526:	4293      	cmp	r3, r2
 8004528:	d00a      	beq.n	8004540 <UART_SetConfig+0x12c>
 800452a:	e013      	b.n	8004554 <UART_SetConfig+0x140>
 800452c:	231f      	movs	r3, #31
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e02b      	b.n	800458e <UART_SetConfig+0x17a>
 8004536:	231f      	movs	r3, #31
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	2202      	movs	r2, #2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e026      	b.n	800458e <UART_SetConfig+0x17a>
 8004540:	231f      	movs	r3, #31
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	2204      	movs	r2, #4
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e021      	b.n	800458e <UART_SetConfig+0x17a>
 800454a:	231f      	movs	r3, #31
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2208      	movs	r2, #8
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e01c      	b.n	800458e <UART_SetConfig+0x17a>
 8004554:	231f      	movs	r3, #31
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2210      	movs	r2, #16
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e017      	b.n	800458e <UART_SetConfig+0x17a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6d      	ldr	r2, [pc, #436]	; (8004718 <UART_SetConfig+0x304>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d104      	bne.n	8004572 <UART_SetConfig+0x15e>
 8004568:	231f      	movs	r3, #31
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e00d      	b.n	800458e <UART_SetConfig+0x17a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a69      	ldr	r2, [pc, #420]	; (800471c <UART_SetConfig+0x308>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d104      	bne.n	8004586 <UART_SetConfig+0x172>
 800457c:	231f      	movs	r3, #31
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e003      	b.n	800458e <UART_SetConfig+0x17a>
 8004586:	231f      	movs	r3, #31
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	2210      	movs	r2, #16
 800458c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	429a      	cmp	r2, r3
 8004598:	d15d      	bne.n	8004656 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800459a:	231f      	movs	r3, #31
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d015      	beq.n	80045d0 <UART_SetConfig+0x1bc>
 80045a4:	dc18      	bgt.n	80045d8 <UART_SetConfig+0x1c4>
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d00d      	beq.n	80045c6 <UART_SetConfig+0x1b2>
 80045aa:	dc15      	bgt.n	80045d8 <UART_SetConfig+0x1c4>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <UART_SetConfig+0x1a2>
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d005      	beq.n	80045c0 <UART_SetConfig+0x1ac>
 80045b4:	e010      	b.n	80045d8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b6:	f7fe fe51 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 80045ba:	0003      	movs	r3, r0
 80045bc:	61bb      	str	r3, [r7, #24]
        break;
 80045be:	e012      	b.n	80045e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b57      	ldr	r3, [pc, #348]	; (8004720 <UART_SetConfig+0x30c>)
 80045c2:	61bb      	str	r3, [r7, #24]
        break;
 80045c4:	e00f      	b.n	80045e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7fe fdbf 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80045ca:	0003      	movs	r3, r0
 80045cc:	61bb      	str	r3, [r7, #24]
        break;
 80045ce:	e00a      	b.n	80045e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	61bb      	str	r3, [r7, #24]
        break;
 80045d6:	e006      	b.n	80045e6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045dc:	231e      	movs	r3, #30
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
        break;
 80045e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d100      	bne.n	80045ee <UART_SetConfig+0x1da>
 80045ec:	e07b      	b.n	80046e6 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	005a      	lsls	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	18d2      	adds	r2, r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	0019      	movs	r1, r3
 8004600:	0010      	movs	r0, r2
 8004602:	f7fb fd81 	bl	8000108 <__udivsi3>
 8004606:	0003      	movs	r3, r0
 8004608:	b29b      	uxth	r3, r3
 800460a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	d91c      	bls.n	800464c <UART_SetConfig+0x238>
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	025b      	lsls	r3, r3, #9
 8004618:	429a      	cmp	r2, r3
 800461a:	d217      	bcs.n	800464c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	b29a      	uxth	r2, r3
 8004620:	200e      	movs	r0, #14
 8004622:	183b      	adds	r3, r7, r0
 8004624:	210f      	movs	r1, #15
 8004626:	438a      	bics	r2, r1
 8004628:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	2207      	movs	r2, #7
 8004632:	4013      	ands	r3, r2
 8004634:	b299      	uxth	r1, r3
 8004636:	183b      	adds	r3, r7, r0
 8004638:	183a      	adds	r2, r7, r0
 800463a:	8812      	ldrh	r2, [r2, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	183a      	adds	r2, r7, r0
 8004646:	8812      	ldrh	r2, [r2, #0]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	e04c      	b.n	80046e6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800464c:	231e      	movs	r3, #30
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e047      	b.n	80046e6 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004656:	231f      	movs	r3, #31
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d015      	beq.n	800468c <UART_SetConfig+0x278>
 8004660:	dc18      	bgt.n	8004694 <UART_SetConfig+0x280>
 8004662:	2b04      	cmp	r3, #4
 8004664:	d00d      	beq.n	8004682 <UART_SetConfig+0x26e>
 8004666:	dc15      	bgt.n	8004694 <UART_SetConfig+0x280>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <UART_SetConfig+0x25e>
 800466c:	2b02      	cmp	r3, #2
 800466e:	d005      	beq.n	800467c <UART_SetConfig+0x268>
 8004670:	e010      	b.n	8004694 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004672:	f7fe fdf3 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8004676:	0003      	movs	r3, r0
 8004678:	61bb      	str	r3, [r7, #24]
        break;
 800467a:	e012      	b.n	80046a2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800467c:	4b28      	ldr	r3, [pc, #160]	; (8004720 <UART_SetConfig+0x30c>)
 800467e:	61bb      	str	r3, [r7, #24]
        break;
 8004680:	e00f      	b.n	80046a2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004682:	f7fe fd61 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8004686:	0003      	movs	r3, r0
 8004688:	61bb      	str	r3, [r7, #24]
        break;
 800468a:	e00a      	b.n	80046a2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	61bb      	str	r3, [r7, #24]
        break;
 8004692:	e006      	b.n	80046a2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004698:	231e      	movs	r3, #30
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
        break;
 80046a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01e      	beq.n	80046e6 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	085a      	lsrs	r2, r3, #1
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	18d2      	adds	r2, r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	0019      	movs	r1, r3
 80046b8:	0010      	movs	r0, r2
 80046ba:	f7fb fd25 	bl	8000108 <__udivsi3>
 80046be:	0003      	movs	r3, r0
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b0f      	cmp	r3, #15
 80046c8:	d909      	bls.n	80046de <UART_SetConfig+0x2ca>
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	025b      	lsls	r3, r3, #9
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d204      	bcs.n	80046de <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e003      	b.n	80046e6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80046de:	231e      	movs	r3, #30
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046f2:	231e      	movs	r3, #30
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	781b      	ldrb	r3, [r3, #0]
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b008      	add	sp, #32
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	efff69f3 	.word	0xefff69f3
 8004704:	ffffcfff 	.word	0xffffcfff
 8004708:	fffff4ff 	.word	0xfffff4ff
 800470c:	40013800 	.word	0x40013800
 8004710:	40021000 	.word	0x40021000
 8004714:	40004400 	.word	0x40004400
 8004718:	40004800 	.word	0x40004800
 800471c:	40004c00 	.word	0x40004c00
 8004720:	007a1200 	.word	0x007a1200

08004724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2201      	movs	r2, #1
 8004732:	4013      	ands	r3, r2
 8004734:	d00b      	beq.n	800474e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4a4a      	ldr	r2, [pc, #296]	; (8004868 <UART_AdvFeatureConfig+0x144>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2202      	movs	r2, #2
 8004754:	4013      	ands	r3, r2
 8004756:	d00b      	beq.n	8004770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4a43      	ldr	r2, [pc, #268]	; (800486c <UART_AdvFeatureConfig+0x148>)
 8004760:	4013      	ands	r3, r2
 8004762:	0019      	movs	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2204      	movs	r2, #4
 8004776:	4013      	ands	r3, r2
 8004778:	d00b      	beq.n	8004792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a3b      	ldr	r2, [pc, #236]	; (8004870 <UART_AdvFeatureConfig+0x14c>)
 8004782:	4013      	ands	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2208      	movs	r2, #8
 8004798:	4013      	ands	r3, r2
 800479a:	d00b      	beq.n	80047b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4a34      	ldr	r2, [pc, #208]	; (8004874 <UART_AdvFeatureConfig+0x150>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2210      	movs	r2, #16
 80047ba:	4013      	ands	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a2c      	ldr	r2, [pc, #176]	; (8004878 <UART_AdvFeatureConfig+0x154>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	0019      	movs	r1, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	2220      	movs	r2, #32
 80047dc:	4013      	ands	r3, r2
 80047de:	d00b      	beq.n	80047f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	4a25      	ldr	r2, [pc, #148]	; (800487c <UART_AdvFeatureConfig+0x158>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	0019      	movs	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	2240      	movs	r2, #64	; 0x40
 80047fe:	4013      	ands	r3, r2
 8004800:	d01d      	beq.n	800483e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <UART_AdvFeatureConfig+0x15c>)
 800480a:	4013      	ands	r3, r2
 800480c:	0019      	movs	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	035b      	lsls	r3, r3, #13
 8004822:	429a      	cmp	r2, r3
 8004824:	d10b      	bne.n	800483e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a15      	ldr	r2, [pc, #84]	; (8004884 <UART_AdvFeatureConfig+0x160>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	4013      	ands	r3, r2
 8004846:	d00b      	beq.n	8004860 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <UART_AdvFeatureConfig+0x164>)
 8004850:	4013      	ands	r3, r2
 8004852:	0019      	movs	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b002      	add	sp, #8
 8004866:	bd80      	pop	{r7, pc}
 8004868:	fffdffff 	.word	0xfffdffff
 800486c:	fffeffff 	.word	0xfffeffff
 8004870:	fffbffff 	.word	0xfffbffff
 8004874:	ffff7fff 	.word	0xffff7fff
 8004878:	ffffefff 	.word	0xffffefff
 800487c:	ffffdfff 	.word	0xffffdfff
 8004880:	ffefffff 	.word	0xffefffff
 8004884:	ff9fffff 	.word	0xff9fffff
 8004888:	fff7ffff 	.word	0xfff7ffff

0800488c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	2100      	movs	r1, #0
 800489a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800489c:	f7fc fd70 	bl	8001380 <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2208      	movs	r2, #8
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d10c      	bne.n	80048cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	0391      	lsls	r1, r2, #14
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4a17      	ldr	r2, [pc, #92]	; (8004918 <UART_CheckIdleState+0x8c>)
 80048bc:	9200      	str	r2, [sp, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	f000 f82c 	bl	800491c <UART_WaitOnFlagUntilTimeout>
 80048c4:	1e03      	subs	r3, r0, #0
 80048c6:	d001      	beq.n	80048cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e021      	b.n	8004910 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2204      	movs	r2, #4
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d10c      	bne.n	80048f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2280      	movs	r2, #128	; 0x80
 80048de:	03d1      	lsls	r1, r2, #15
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <UART_CheckIdleState+0x8c>)
 80048e4:	9200      	str	r2, [sp, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f000 f818 	bl	800491c <UART_WaitOnFlagUntilTimeout>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d001      	beq.n	80048f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e00d      	b.n	8004910 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2274      	movs	r2, #116	; 0x74
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}
 8004918:	01ffffff 	.word	0x01ffffff

0800491c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b094      	sub	sp, #80	; 0x50
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	1dfb      	adds	r3, r7, #7
 800492a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492c:	e0a3      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004930:	3301      	adds	r3, #1
 8004932:	d100      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004934:	e09f      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7fc fd23 	bl	8001380 <HAL_GetTick>
 800493a:	0002      	movs	r2, r0
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <UART_WaitOnFlagUntilTimeout+0x30>
 8004946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004948:	2b00      	cmp	r3, #0
 800494a:	d13d      	bne.n	80049c8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494c:	f3ef 8310 	mrs	r3, PRIMASK
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004954:	647b      	str	r3, [r7, #68]	; 0x44
 8004956:	2301      	movs	r3, #1
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	494c      	ldr	r1, [pc, #304]	; (8004aa0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800496e:	400a      	ands	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	f383 8810 	msr	PRIMASK, r3
}
 800497c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497e:	f3ef 8310 	mrs	r3, PRIMASK
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	643b      	str	r3, [r7, #64]	; 0x40
 8004988:	2301      	movs	r3, #1
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	f383 8810 	msr	PRIMASK, r3
}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2101      	movs	r1, #1
 80049a0:	438a      	bics	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	f383 8810 	msr	PRIMASK, r3
}
 80049ae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2274      	movs	r2, #116	; 0x74
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e067      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2204      	movs	r2, #4
 80049d0:	4013      	ands	r3, r2
 80049d2:	d050      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	401a      	ands	r2, r3
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d146      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2280      	movs	r2, #128	; 0x80
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f2:	f3ef 8310 	mrs	r3, PRIMASK
 80049f6:	613b      	str	r3, [r7, #16]
  return(result);
 80049f8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049fc:	2301      	movs	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f383 8810 	msr	PRIMASK, r3
}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4923      	ldr	r1, [pc, #140]	; (8004aa0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004a14:	400a      	ands	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f383 8810 	msr	PRIMASK, r3
}
 8004a22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a24:	f3ef 8310 	mrs	r3, PRIMASK
 8004a28:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a2e:	2301      	movs	r3, #1
 8004a30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2101      	movs	r1, #1
 8004a46:	438a      	bics	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2280      	movs	r2, #128	; 0x80
 8004a66:	2120      	movs	r1, #32
 8004a68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2274      	movs	r2, #116	; 0x74
 8004a6e:	2100      	movs	r1, #0
 8004a70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e010      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	425a      	negs	r2, r3
 8004a86:	4153      	adcs	r3, r2
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	1dfb      	adds	r3, r7, #7
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d100      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004a94:	e74b      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b014      	add	sp, #80	; 0x50
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	fffffe5f 	.word	0xfffffe5f

08004aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08e      	sub	sp, #56	; 0x38
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aac:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ab2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f383 8810 	msr	PRIMASK, r3
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4925      	ldr	r1, [pc, #148]	; (8004b64 <UART_EndRxTransfer+0xc0>)
 8004ace:	400a      	ands	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ade:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ae8:	2301      	movs	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f383 8810 	msr	PRIMASK, r3
}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2101      	movs	r1, #1
 8004b00:	438a      	bics	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	f383 8810 	msr	PRIMASK, r3
}
 8004b0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d118      	bne.n	8004b4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b22:	2301      	movs	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f383 8810 	msr	PRIMASK, r3
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2110      	movs	r1, #16
 8004b3a:	438a      	bics	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b00e      	add	sp, #56	; 0x38
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	fffffedf 	.word	0xfffffedf

08004b68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	225a      	movs	r2, #90	; 0x5a
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2252      	movs	r2, #82	; 0x52
 8004b82:	2100      	movs	r1, #0
 8004b84:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff fc2f 	bl	80043ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b004      	add	sp, #16
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b08a      	sub	sp, #40	; 0x28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba2:	2b21      	cmp	r3, #33	; 0x21
 8004ba4:	d14d      	bne.n	8004c42 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2252      	movs	r2, #82	; 0x52
 8004baa:	5a9b      	ldrh	r3, [r3, r2]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d132      	bne.n	8004c18 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2180      	movs	r1, #128	; 0x80
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	617b      	str	r3, [r7, #20]
  return(result);
 8004bea:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bec:	623b      	str	r3, [r7, #32]
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2140      	movs	r1, #64	; 0x40
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004c16:	e014      	b.n	8004c42 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	b292      	uxth	r2, r2
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2252      	movs	r2, #82	; 0x52
 8004c34:	5a9b      	ldrh	r3, [r3, r2]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b299      	uxth	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2252      	movs	r2, #82	; 0x52
 8004c40:	5299      	strh	r1, [r3, r2]
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b00a      	add	sp, #40	; 0x28
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b08c      	sub	sp, #48	; 0x30
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c56:	2b21      	cmp	r3, #33	; 0x21
 8004c58:	d151      	bne.n	8004cfe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2252      	movs	r2, #82	; 0x52
 8004c5e:	5a9b      	ldrh	r3, [r3, r2]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d132      	bne.n	8004ccc <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c70:	2301      	movs	r3, #1
 8004c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	438a      	bics	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c98:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c9e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004cca:	e018      	b.n	8004cfe <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	05d2      	lsls	r2, r2, #23
 8004cdc:	0dd2      	lsrs	r2, r2, #23
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2252      	movs	r2, #82	; 0x52
 8004cf0:	5a9b      	ldrh	r3, [r3, r2]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b299      	uxth	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2252      	movs	r2, #82	; 0x52
 8004cfc:	5299      	strh	r1, [r3, r2]
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b00c      	add	sp, #48	; 0x30
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d14:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	2301      	movs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2140      	movs	r1, #64	; 0x40
 8004d30:	438a      	bics	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f383 8810 	msr	PRIMASK, r3
}
 8004d3e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f7ff fb44 	bl	80043dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b006      	add	sp, #24
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004d6c:	b5b0      	push	{r4, r5, r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	0005      	movs	r5, r0
 8004d74:	000c      	movs	r4, r1
 8004d76:	0010      	movs	r0, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	1dfb      	adds	r3, r7, #7
 8004d7c:	1c2a      	adds	r2, r5, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	1dbb      	adds	r3, r7, #6
 8004d82:	1c22      	adds	r2, r4, #0
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	1c02      	adds	r2, r0, #0
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	1cfb      	adds	r3, r7, #3
 8004d8e:	1c0a      	adds	r2, r1, #0
 8004d90:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d902      	bls.n	8004da0 <socket+0x34>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	e0ee      	b.n	8004f7e <socket+0x212>
	switch(protocol)
 8004da0:	1dbb      	adds	r3, r7, #6
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	dc02      	bgt.n	8004dae <socket+0x42>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	dc05      	bgt.n	8004db8 <socket+0x4c>
 8004dac:	e001      	b.n	8004db2 <socket+0x46>
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d002      	beq.n	8004db8 <socket+0x4c>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004db2:	2305      	movs	r3, #5
 8004db4:	425b      	negs	r3, r3
 8004db6:	e0e2      	b.n	8004f7e <socket+0x212>
         break;
 8004db8:	46c0      	nop			; (mov r8, r8)
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 8004dba:	1cfb      	adds	r3, r7, #3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2206      	movs	r2, #6
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d002      	beq.n	8004dca <socket+0x5e>
 8004dc4:	2306      	movs	r3, #6
 8004dc6:	425b      	negs	r3, r3
 8004dc8:	e0d9      	b.n	8004f7e <socket+0x212>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 8004dca:	1cfb      	adds	r3, r7, #3
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <socket+0xb8>
	{
   	switch(protocol)
 8004dd2:	1dbb      	adds	r3, r7, #6
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d002      	beq.n	8004de0 <socket+0x74>
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d008      	beq.n	8004df0 <socket+0x84>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004dde:	e026      	b.n	8004e2e <socket+0xc2>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004de0:	1cfb      	adds	r3, r7, #3
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2221      	movs	r2, #33	; 0x21
 8004de6:	4013      	ands	r3, r2
 8004de8:	d11e      	bne.n	8004e28 <socket+0xbc>
 8004dea:	2306      	movs	r3, #6
 8004dec:	425b      	negs	r3, r3
 8004dee:	e0c6      	b.n	8004f7e <socket+0x212>
   	      if(flag & SF_IGMP_VER2)
 8004df0:	1cfb      	adds	r3, r7, #3
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2220      	movs	r2, #32
 8004df6:	4013      	ands	r3, r2
 8004df8:	d007      	beq.n	8004e0a <socket+0x9e>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004dfa:	1cfb      	adds	r3, r7, #3
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db02      	blt.n	8004e0a <socket+0x9e>
 8004e04:	2306      	movs	r3, #6
 8004e06:	425b      	negs	r3, r3
 8004e08:	e0b9      	b.n	8004f7e <socket+0x212>
      	      if(flag & SF_UNI_BLOCK)
 8004e0a:	1cfb      	adds	r3, r7, #3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2210      	movs	r2, #16
 8004e10:	4013      	ands	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <socket+0xc0>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004e14:	1cfb      	adds	r3, r7, #3
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	b25b      	sxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	db06      	blt.n	8004e2c <socket+0xc0>
 8004e1e:	2306      	movs	r3, #6
 8004e20:	425b      	negs	r3, r3
 8004e22:	e0ac      	b.n	8004f7e <socket+0x212>
   	}
   }
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	e002      	b.n	8004e2e <socket+0xc2>
   	      break;
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	e000      	b.n	8004e2e <socket+0xc2>
   	      break;
 8004e2c:	46c0      	nop			; (mov r8, r8)
	close(sn);
 8004e2e:	1dfb      	adds	r3, r7, #7
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f8b6 	bl	8004fa4 <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004e38:	1dfb      	adds	r3, r7, #7
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	3301      	adds	r3, #1
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	0018      	movs	r0, r3
 8004e44:	1cfb      	adds	r3, r7, #3
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	220f      	movs	r2, #15
 8004e4c:	4393      	bics	r3, r2
 8004e4e:	b25a      	sxtb	r2, r3
 8004e50:	1dbb      	adds	r3, r7, #6
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b25b      	sxtb	r3, r3
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	f000 fbcd 	bl	80055fc <WIZCHIP_WRITE>
	if(!port)
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <socket+0x11e>
	{
	   port = sock_any_port++;
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <socket+0x21c>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	b291      	uxth	r1, r2
 8004e72:	4a45      	ldr	r2, [pc, #276]	; (8004f88 <socket+0x21c>)
 8004e74:	8011      	strh	r1, [r2, #0]
 8004e76:	1d3a      	adds	r2, r7, #4
 8004e78:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004e7a:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <socket+0x21c>)
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	4a43      	ldr	r2, [pc, #268]	; (8004f8c <socket+0x220>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d102      	bne.n	8004e8a <socket+0x11e>
 8004e84:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <socket+0x21c>)
 8004e86:	4a42      	ldr	r2, [pc, #264]	; (8004f90 <socket+0x224>)
 8004e88:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8004e8a:	1dfb      	adds	r3, r7, #7
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	3301      	adds	r3, #1
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	2280      	movs	r2, #128	; 0x80
 8004e96:	00d2      	lsls	r2, r2, #3
 8004e98:	4694      	mov	ip, r2
 8004e9a:	4463      	add	r3, ip
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	0010      	movs	r0, r2
 8004eac:	f000 fba6 	bl	80055fc <WIZCHIP_WRITE>
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	22a0      	movs	r2, #160	; 0xa0
 8004ebc:	00d2      	lsls	r2, r2, #3
 8004ebe:	4694      	mov	ip, r2
 8004ec0:	4463      	add	r3, ip
 8004ec2:	001a      	movs	r2, r3
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	0019      	movs	r1, r3
 8004ecc:	0010      	movs	r0, r2
 8004ece:	f000 fb95 	bl	80055fc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004ed2:	1dfb      	adds	r3, r7, #7
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	3301      	adds	r3, #1
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	3301      	adds	r3, #1
 8004ede:	33ff      	adds	r3, #255	; 0xff
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 fb8a 	bl	80055fc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	33ff      	adds	r3, #255	; 0xff
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 fb4b 	bl	8005594 <WIZCHIP_READ>
 8004efe:	1e03      	subs	r3, r0, #0
 8004f00:	d1f3      	bne.n	8004eea <socket+0x17e>
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8004f02:	1cfb      	adds	r3, r7, #3
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	401a      	ands	r2, r3
 8004f0a:	1dfb      	adds	r3, r7, #7
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	0013      	movs	r3, r2
 8004f12:	b21a      	sxth	r2, r3
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <socket+0x228>)
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b21b      	sxth	r3, r3
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	b21b      	sxth	r3, r3
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	4b1c      	ldr	r3, [pc, #112]	; (8004f94 <socket+0x228>)
 8004f22:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004f24:	1dfb      	adds	r3, r7, #7
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	0013      	movs	r3, r2
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	b21b      	sxth	r3, r3
 8004f34:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <socket+0x22c>)
 8004f36:	8812      	ldrh	r2, [r2, #0]
 8004f38:	b212      	sxth	r2, r2
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <socket+0x22c>)
 8004f42:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004f44:	1dfb      	adds	r3, r7, #7
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <socket+0x230>)
 8004f4a:	0052      	lsls	r2, r2, #1
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	52d1      	strh	r1, [r2, r3]
   sock_pack_info[sn] = 0;
 8004f50:	1dfb      	adds	r3, r7, #7
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <socket+0x234>)
 8004f56:	2100      	movs	r1, #0
 8004f58:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	1dfb      	adds	r3, r7, #7
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3301      	adds	r3, #1
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	22c0      	movs	r2, #192	; 0xc0
 8004f68:	0092      	lsls	r2, r2, #2
 8004f6a:	4694      	mov	ip, r2
 8004f6c:	4463      	add	r3, ip
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 fb10 	bl	8005594 <WIZCHIP_READ>
 8004f74:	1e03      	subs	r3, r0, #0
 8004f76:	d0f1      	beq.n	8004f5c <socket+0x1f0>
   return (int8_t)sn;
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b25b      	sxtb	r3, r3
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bdb0      	pop	{r4, r5, r7, pc}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	20000022 	.word	0x20000022
 8004f8c:	0000fff0 	.word	0x0000fff0
 8004f90:	ffffc000 	.word	0xffffc000
 8004f94:	20000060 	.word	0x20000060
 8004f98:	20000062 	.word	0x20000062
 8004f9c:	20000064 	.word	0x20000064
 8004fa0:	20000074 	.word	0x20000074

08004fa4 <close>:

int8_t close(uint8_t sn)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	0002      	movs	r2, r0
 8004fac:	1dfb      	adds	r3, r7, #7
 8004fae:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8004fb0:	1dfb      	adds	r3, r7, #7
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d902      	bls.n	8004fbe <close+0x1a>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	425b      	negs	r3, r3
 8004fbc:	e04f      	b.n	800505e <close+0xba>

	setSn_CR(sn,Sn_CR_CLOSE);
 8004fbe:	1dfb      	adds	r3, r7, #7
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	33ff      	adds	r3, #255	; 0xff
 8004fcc:	2110      	movs	r1, #16
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 fb14 	bl	80055fc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	1dfb      	adds	r3, r7, #7
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	3301      	adds	r3, #1
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	33ff      	adds	r3, #255	; 0xff
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 fad5 	bl	8005594 <WIZCHIP_READ>
 8004fea:	1e03      	subs	r3, r0, #0
 8004fec:	d1f3      	bne.n	8004fd6 <close+0x32>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004fee:	1dfb      	adds	r3, r7, #7
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	2280      	movs	r2, #128	; 0x80
 8004ffa:	0092      	lsls	r2, r2, #2
 8004ffc:	4694      	mov	ip, r2
 8004ffe:	4463      	add	r3, ip
 8005000:	211f      	movs	r1, #31
 8005002:	0018      	movs	r0, r3
 8005004:	f000 fafa 	bl	80055fc <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8005008:	1dfb      	adds	r3, r7, #7
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	0013      	movs	r3, r2
 8005012:	b21b      	sxth	r3, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	b21b      	sxth	r3, r3
 8005018:	4a13      	ldr	r2, [pc, #76]	; (8005068 <close+0xc4>)
 800501a:	8812      	ldrh	r2, [r2, #0]
 800501c:	b212      	sxth	r2, r2
 800501e:	4013      	ands	r3, r2
 8005020:	b21b      	sxth	r3, r3
 8005022:	b29a      	uxth	r2, r3
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <close+0xc4>)
 8005026:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005028:	1dfb      	adds	r3, r7, #7
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <close+0xc8>)
 800502e:	0052      	lsls	r2, r2, #1
 8005030:	2100      	movs	r1, #0
 8005032:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	4a0d      	ldr	r2, [pc, #52]	; (8005070 <close+0xcc>)
 800503a:	2100      	movs	r1, #0
 800503c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	1dfb      	adds	r3, r7, #7
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	3301      	adds	r3, #1
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	22c0      	movs	r2, #192	; 0xc0
 800504c:	0092      	lsls	r2, r2, #2
 800504e:	4694      	mov	ip, r2
 8005050:	4463      	add	r3, ip
 8005052:	0018      	movs	r0, r3
 8005054:	f000 fa9e 	bl	8005594 <WIZCHIP_READ>
 8005058:	1e03      	subs	r3, r0, #0
 800505a:	d1f1      	bne.n	8005040 <close+0x9c>
	return SOCK_OK;
 800505c:	2301      	movs	r3, #1
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b002      	add	sp, #8
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	20000062 	.word	0x20000062
 800506c:	20000064 	.word	0x20000064
 8005070:	20000074 	.word	0x20000074

08005074 <listen>:

int8_t listen(uint8_t sn)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	0002      	movs	r2, r0
 800507c:	1dfb      	adds	r3, r7, #7
 800507e:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8005080:	1dfb      	adds	r3, r7, #7
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d902      	bls.n	800508e <listen+0x1a>
 8005088:	2301      	movs	r3, #1
 800508a:	425b      	negs	r3, r3
 800508c:	e05f      	b.n	800514e <listen+0xda>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800508e:	1dfb      	adds	r3, r7, #7
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	3301      	adds	r3, #1
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	0018      	movs	r0, r3
 800509a:	f000 fa7b 	bl	8005594 <WIZCHIP_READ>
 800509e:	0003      	movs	r3, r0
 80050a0:	001a      	movs	r2, r3
 80050a2:	230f      	movs	r3, #15
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d002      	beq.n	80050b0 <listen+0x3c>
 80050aa:	2305      	movs	r3, #5
 80050ac:	425b      	negs	r3, r3
 80050ae:	e04e      	b.n	800514e <listen+0xda>
	CHECK_SOCKINIT();
 80050b0:	1dfb      	adds	r3, r7, #7
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	3301      	adds	r3, #1
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	22c0      	movs	r2, #192	; 0xc0
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	4694      	mov	ip, r2
 80050c0:	4463      	add	r3, ip
 80050c2:	0018      	movs	r0, r3
 80050c4:	f000 fa66 	bl	8005594 <WIZCHIP_READ>
 80050c8:	0003      	movs	r3, r0
 80050ca:	2b13      	cmp	r3, #19
 80050cc:	d002      	beq.n	80050d4 <listen+0x60>
 80050ce:	2303      	movs	r3, #3
 80050d0:	425b      	negs	r3, r3
 80050d2:	e03c      	b.n	800514e <listen+0xda>
	setSn_CR(sn,Sn_CR_LISTEN);
 80050d4:	1dfb      	adds	r3, r7, #7
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	3301      	adds	r3, #1
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	3301      	adds	r3, #1
 80050e0:	33ff      	adds	r3, #255	; 0xff
 80050e2:	2102      	movs	r1, #2
 80050e4:	0018      	movs	r0, r3
 80050e6:	f000 fa89 	bl	80055fc <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	1dfb      	adds	r3, r7, #7
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	3301      	adds	r3, #1
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	3301      	adds	r3, #1
 80050f8:	33ff      	adds	r3, #255	; 0xff
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 fa4a 	bl	8005594 <WIZCHIP_READ>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d1f3      	bne.n	80050ec <listen+0x78>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005104:	e013      	b.n	800512e <listen+0xba>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	3301      	adds	r3, #1
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	3301      	adds	r3, #1
 8005112:	33ff      	adds	r3, #255	; 0xff
 8005114:	0018      	movs	r0, r3
 8005116:	f000 fa3d 	bl	8005594 <WIZCHIP_READ>
 800511a:	1e03      	subs	r3, r0, #0
 800511c:	d107      	bne.n	800512e <listen+0xba>
      {
         close(sn);
 800511e:	1dfb      	adds	r3, r7, #7
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	0018      	movs	r0, r3
 8005124:	f7ff ff3e 	bl	8004fa4 <close>
         return SOCKERR_SOCKCLOSED;
 8005128:	2304      	movs	r3, #4
 800512a:	425b      	negs	r3, r3
 800512c:	e00f      	b.n	800514e <listen+0xda>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800512e:	1dfb      	adds	r3, r7, #7
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	3301      	adds	r3, #1
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	22c0      	movs	r2, #192	; 0xc0
 800513a:	0092      	lsls	r2, r2, #2
 800513c:	4694      	mov	ip, r2
 800513e:	4463      	add	r3, ip
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fa27 	bl	8005594 <WIZCHIP_READ>
 8005146:	0003      	movs	r3, r0
 8005148:	2b14      	cmp	r3, #20
 800514a:	d1dc      	bne.n	8005106 <listen+0x92>
      }
   }
   return SOCK_OK;
 800514c:	2301      	movs	r3, #1
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b002      	add	sp, #8
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005158:	b5b0      	push	{r4, r5, r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6039      	str	r1, [r7, #0]
 8005160:	0011      	movs	r1, r2
 8005162:	1dfb      	adds	r3, r7, #7
 8005164:	1c02      	adds	r2, r0, #0
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	1c0a      	adds	r2, r1, #0
 800516c:	801a      	strh	r2, [r3, #0]
   uint8_t tmp=0;
 800516e:	230f      	movs	r3, #15
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
   uint16_t freesize=0;
 8005176:	230c      	movs	r3, #12
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	2200      	movs	r2, #0
 800517c:	801a      	strh	r2, [r3, #0]

   CHECK_SOCKNUM();
 800517e:	1dfb      	adds	r3, r7, #7
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b08      	cmp	r3, #8
 8005184:	d902      	bls.n	800518c <send+0x34>
 8005186:	2301      	movs	r3, #1
 8005188:	425b      	negs	r3, r3
 800518a:	e113      	b.n	80053b4 <send+0x25c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800518c:	1dfb      	adds	r3, r7, #7
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	3301      	adds	r3, #1
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	0018      	movs	r0, r3
 8005198:	f000 f9fc 	bl	8005594 <WIZCHIP_READ>
 800519c:	0003      	movs	r3, r0
 800519e:	001a      	movs	r2, r3
 80051a0:	230f      	movs	r3, #15
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d002      	beq.n	80051ae <send+0x56>
 80051a8:	2305      	movs	r3, #5
 80051aa:	425b      	negs	r3, r3
 80051ac:	e102      	b.n	80053b4 <send+0x25c>
   CHECK_SOCKDATA();
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <send+0x64>
 80051b6:	230e      	movs	r3, #14
 80051b8:	425b      	negs	r3, r3
 80051ba:	e0fb      	b.n	80053b4 <send+0x25c>
   tmp = getSn_SR(sn);
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	3301      	adds	r3, #1
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	22c0      	movs	r2, #192	; 0xc0
 80051c8:	0092      	lsls	r2, r2, #2
 80051ca:	4694      	mov	ip, r2
 80051cc:	4463      	add	r3, ip
 80051ce:	250f      	movs	r5, #15
 80051d0:	197c      	adds	r4, r7, r5
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 f9de 	bl	8005594 <WIZCHIP_READ>
 80051d8:	0003      	movs	r3, r0
 80051da:	7023      	strb	r3, [r4, #0]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80051dc:	197b      	adds	r3, r7, r5
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b17      	cmp	r3, #23
 80051e2:	d006      	beq.n	80051f2 <send+0x9a>
 80051e4:	197b      	adds	r3, r7, r5
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b1c      	cmp	r3, #28
 80051ea:	d002      	beq.n	80051f2 <send+0x9a>
 80051ec:	2307      	movs	r3, #7
 80051ee:	425b      	negs	r3, r3
 80051f0:	e0e0      	b.n	80053b4 <send+0x25c>
   if( sock_is_sending & (1<<sn) )
 80051f2:	4b72      	ldr	r3, [pc, #456]	; (80053bc <send+0x264>)
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	001a      	movs	r2, r3
 80051f8:	1dfb      	adds	r3, r7, #7
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	411a      	asrs	r2, r3
 80051fe:	0013      	movs	r3, r2
 8005200:	2201      	movs	r2, #1
 8005202:	4013      	ands	r3, r2
 8005204:	d045      	beq.n	8005292 <send+0x13a>
   {
      tmp = getSn_IR(sn);
 8005206:	1dfb      	adds	r3, r7, #7
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	3301      	adds	r3, #1
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	0092      	lsls	r2, r2, #2
 8005214:	4694      	mov	ip, r2
 8005216:	4463      	add	r3, ip
 8005218:	0018      	movs	r0, r3
 800521a:	f000 f9bb 	bl	8005594 <WIZCHIP_READ>
 800521e:	0003      	movs	r3, r0
 8005220:	0019      	movs	r1, r3
 8005222:	200f      	movs	r0, #15
 8005224:	183b      	adds	r3, r7, r0
 8005226:	221f      	movs	r2, #31
 8005228:	400a      	ands	r2, r1
 800522a:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 800522c:	183b      	adds	r3, r7, r0
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2210      	movs	r2, #16
 8005232:	4013      	ands	r3, r2
 8005234:	d01d      	beq.n	8005272 <send+0x11a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005236:	1dfb      	adds	r3, r7, #7
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	3301      	adds	r3, #1
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	4694      	mov	ip, r2
 8005246:	4463      	add	r3, ip
 8005248:	2110      	movs	r1, #16
 800524a:	0018      	movs	r0, r3
 800524c:	f000 f9d6 	bl	80055fc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8005250:	1dfb      	adds	r3, r7, #7
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	409a      	lsls	r2, r3
 8005258:	0013      	movs	r3, r2
 800525a:	b21b      	sxth	r3, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	b21b      	sxth	r3, r3
 8005260:	4a56      	ldr	r2, [pc, #344]	; (80053bc <send+0x264>)
 8005262:	8812      	ldrh	r2, [r2, #0]
 8005264:	b212      	sxth	r2, r2
 8005266:	4013      	ands	r3, r2
 8005268:	b21b      	sxth	r3, r3
 800526a:	b29a      	uxth	r2, r3
 800526c:	4b53      	ldr	r3, [pc, #332]	; (80053bc <send+0x264>)
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e00f      	b.n	8005292 <send+0x13a>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005272:	230f      	movs	r3, #15
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2208      	movs	r2, #8
 800527a:	4013      	ands	r3, r2
 800527c:	d007      	beq.n	800528e <send+0x136>
      {
         close(sn);
 800527e:	1dfb      	adds	r3, r7, #7
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	0018      	movs	r0, r3
 8005284:	f7ff fe8e 	bl	8004fa4 <close>
         return SOCKERR_TIMEOUT;
 8005288:	230d      	movs	r3, #13
 800528a:	425b      	negs	r3, r3
 800528c:	e092      	b.n	80053b4 <send+0x25c>
      }
      else return SOCK_BUSY;
 800528e:	2300      	movs	r3, #0
 8005290:	e090      	b.n	80053b4 <send+0x25c>
   }
   freesize = getSn_TxMAX(sn);
 8005292:	1dfb      	adds	r3, r7, #7
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	3301      	adds	r3, #1
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	22f8      	movs	r2, #248	; 0xf8
 800529e:	0152      	lsls	r2, r2, #5
 80052a0:	4694      	mov	ip, r2
 80052a2:	4463      	add	r3, ip
 80052a4:	0018      	movs	r0, r3
 80052a6:	f000 f975 	bl	8005594 <WIZCHIP_READ>
 80052aa:	0003      	movs	r3, r0
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	210c      	movs	r1, #12
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	0292      	lsls	r2, r2, #10
 80052b4:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80052b6:	1d3a      	adds	r2, r7, #4
 80052b8:	187b      	adds	r3, r7, r1
 80052ba:	8812      	ldrh	r2, [r2, #0]
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d903      	bls.n	80052ca <send+0x172>
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	187a      	adds	r2, r7, r1
 80052c6:	8812      	ldrh	r2, [r2, #0]
 80052c8:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80052ca:	230c      	movs	r3, #12
 80052cc:	18fc      	adds	r4, r7, r3
 80052ce:	1dfb      	adds	r3, r7, #7
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 fa6e 	bl	80057b4 <getSn_TX_FSR>
 80052d8:	0003      	movs	r3, r0
 80052da:	8023      	strh	r3, [r4, #0]
      tmp = getSn_SR(sn);
 80052dc:	1dfb      	adds	r3, r7, #7
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	3301      	adds	r3, #1
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	22c0      	movs	r2, #192	; 0xc0
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	4694      	mov	ip, r2
 80052ec:	4463      	add	r3, ip
 80052ee:	250f      	movs	r5, #15
 80052f0:	197c      	adds	r4, r7, r5
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 f94e 	bl	8005594 <WIZCHIP_READ>
 80052f8:	0003      	movs	r3, r0
 80052fa:	7023      	strb	r3, [r4, #0]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80052fc:	197b      	adds	r3, r7, r5
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b17      	cmp	r3, #23
 8005302:	d00b      	beq.n	800531c <send+0x1c4>
 8005304:	197b      	adds	r3, r7, r5
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b1c      	cmp	r3, #28
 800530a:	d007      	beq.n	800531c <send+0x1c4>
      {
         close(sn);
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	0018      	movs	r0, r3
 8005312:	f7ff fe47 	bl	8004fa4 <close>
         return SOCKERR_SOCKSTATUS;
 8005316:	2307      	movs	r3, #7
 8005318:	425b      	negs	r3, r3
 800531a:	e04b      	b.n	80053b4 <send+0x25c>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <send+0x268>)
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	001a      	movs	r2, r3
 8005322:	1dfb      	adds	r3, r7, #7
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	411a      	asrs	r2, r3
 8005328:	0013      	movs	r3, r2
 800532a:	2201      	movs	r2, #1
 800532c:	4013      	ands	r3, r2
 800532e:	d008      	beq.n	8005342 <send+0x1ea>
 8005330:	1d3a      	adds	r2, r7, #4
 8005332:	230c      	movs	r3, #12
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	8812      	ldrh	r2, [r2, #0]
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d901      	bls.n	8005342 <send+0x1ea>
 800533e:	2300      	movs	r3, #0
 8005340:	e038      	b.n	80053b4 <send+0x25c>
      if(len <= freesize) break;
 8005342:	1d3a      	adds	r2, r7, #4
 8005344:	230c      	movs	r3, #12
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	8812      	ldrh	r2, [r2, #0]
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d900      	bls.n	8005352 <send+0x1fa>
      freesize = getSn_TX_FSR(sn);
 8005350:	e7bb      	b.n	80052ca <send+0x172>
      if(len <= freesize) break;
 8005352:	46c0      	nop			; (mov r8, r8)
   }
   wiz_send_data(sn, buf, len);
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	1dfb      	adds	r3, r7, #7
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 fb00 	bl	8005964 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	3301      	adds	r3, #1
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	3301      	adds	r3, #1
 8005370:	33ff      	adds	r3, #255	; 0xff
 8005372:	2120      	movs	r1, #32
 8005374:	0018      	movs	r0, r3
 8005376:	f000 f941 	bl	80055fc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	1dfb      	adds	r3, r7, #7
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	3301      	adds	r3, #1
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	3301      	adds	r3, #1
 8005388:	33ff      	adds	r3, #255	; 0xff
 800538a:	0018      	movs	r0, r3
 800538c:	f000 f902 	bl	8005594 <WIZCHIP_READ>
 8005390:	1e03      	subs	r3, r0, #0
 8005392:	d1f3      	bne.n	800537c <send+0x224>
   sock_is_sending |= (1 << sn);
 8005394:	1dfb      	adds	r3, r7, #7
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	409a      	lsls	r2, r3
 800539c:	0013      	movs	r3, r2
 800539e:	b21a      	sxth	r2, r3
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <send+0x264>)
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b21b      	sxth	r3, r3
 80053a6:	4313      	orrs	r3, r2
 80053a8:	b21b      	sxth	r3, r3
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <send+0x264>)
 80053ae:	801a      	strh	r2, [r3, #0]
   return len;
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	881b      	ldrh	r3, [r3, #0]
}
 80053b4:	0018      	movs	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b004      	add	sp, #16
 80053ba:	bdb0      	pop	{r4, r5, r7, pc}
 80053bc:	20000062 	.word	0x20000062
 80053c0:	20000060 	.word	0x20000060

080053c4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6039      	str	r1, [r7, #0]
 80053cc:	0011      	movs	r1, r2
 80053ce:	1dfb      	adds	r3, r7, #7
 80053d0:	1c02      	adds	r2, r0, #0
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	1c0a      	adds	r2, r1, #0
 80053d8:	801a      	strh	r2, [r3, #0]
   uint8_t  tmp = 0;
 80053da:	230f      	movs	r3, #15
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
   uint16_t recvsize = 0;
 80053e2:	230c      	movs	r3, #12
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	2200      	movs	r2, #0
 80053e8:	801a      	strh	r2, [r3, #0]
   CHECK_SOCKNUM();
 80053ea:	1dfb      	adds	r3, r7, #7
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d902      	bls.n	80053f8 <recv+0x34>
 80053f2:	2301      	movs	r3, #1
 80053f4:	425b      	negs	r3, r3
 80053f6:	e0c6      	b.n	8005586 <recv+0x1c2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80053f8:	1dfb      	adds	r3, r7, #7
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	3301      	adds	r3, #1
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f8c6 	bl	8005594 <WIZCHIP_READ>
 8005408:	0003      	movs	r3, r0
 800540a:	001a      	movs	r2, r3
 800540c:	230f      	movs	r3, #15
 800540e:	4013      	ands	r3, r2
 8005410:	2b01      	cmp	r3, #1
 8005412:	d002      	beq.n	800541a <recv+0x56>
 8005414:	2305      	movs	r3, #5
 8005416:	425b      	negs	r3, r3
 8005418:	e0b5      	b.n	8005586 <recv+0x1c2>
   CHECK_SOCKDATA();
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <recv+0x64>
 8005422:	230e      	movs	r3, #14
 8005424:	425b      	negs	r3, r3
 8005426:	e0ae      	b.n	8005586 <recv+0x1c2>

   recvsize = getSn_RxMAX(sn);
 8005428:	1dfb      	adds	r3, r7, #7
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	3301      	adds	r3, #1
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	22f0      	movs	r2, #240	; 0xf0
 8005434:	0152      	lsls	r2, r2, #5
 8005436:	4694      	mov	ip, r2
 8005438:	4463      	add	r3, ip
 800543a:	0018      	movs	r0, r3
 800543c:	f000 f8aa 	bl	8005594 <WIZCHIP_READ>
 8005440:	0003      	movs	r3, r0
 8005442:	b29a      	uxth	r2, r3
 8005444:	210c      	movs	r1, #12
 8005446:	187b      	adds	r3, r7, r1
 8005448:	0292      	lsls	r2, r2, #10
 800544a:	801a      	strh	r2, [r3, #0]
   if(recvsize < len) len = recvsize;
 800544c:	187a      	adds	r2, r7, r1
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d203      	bcs.n	8005460 <recv+0x9c>
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	187a      	adds	r2, r7, r1
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8005460:	260c      	movs	r6, #12
 8005462:	19bc      	adds	r4, r7, r6
 8005464:	1dfb      	adds	r3, r7, #7
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	0018      	movs	r0, r3
 800546a:	f000 fa0f 	bl	800588c <getSn_RX_RSR>
 800546e:	0003      	movs	r3, r0
 8005470:	8023      	strh	r3, [r4, #0]
      tmp = getSn_SR(sn);
 8005472:	1dfb      	adds	r3, r7, #7
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	3301      	adds	r3, #1
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	22c0      	movs	r2, #192	; 0xc0
 800547e:	0092      	lsls	r2, r2, #2
 8005480:	4694      	mov	ip, r2
 8005482:	4463      	add	r3, ip
 8005484:	250f      	movs	r5, #15
 8005486:	197c      	adds	r4, r7, r5
 8005488:	0018      	movs	r0, r3
 800548a:	f000 f883 	bl	8005594 <WIZCHIP_READ>
 800548e:	0003      	movs	r3, r0
 8005490:	7023      	strb	r3, [r4, #0]
      if (tmp != SOCK_ESTABLISHED)
 8005492:	197b      	adds	r3, r7, r5
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b17      	cmp	r3, #23
 8005498:	d02e      	beq.n	80054f8 <recv+0x134>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 800549a:	197b      	adds	r3, r7, r5
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b1c      	cmp	r3, #28
 80054a0:	d122      	bne.n	80054e8 <recv+0x124>
         {
            if(recvsize != 0) break;
 80054a2:	19bb      	adds	r3, r7, r6
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d13d      	bne.n	8005526 <recv+0x162>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80054aa:	1dfb      	adds	r3, r7, #7
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	0018      	movs	r0, r3
 80054b0:	f000 f980 	bl	80057b4 <getSn_TX_FSR>
 80054b4:	0003      	movs	r3, r0
 80054b6:	001c      	movs	r4, r3
 80054b8:	1dfb      	adds	r3, r7, #7
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	3301      	adds	r3, #1
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	22f8      	movs	r2, #248	; 0xf8
 80054c4:	0152      	lsls	r2, r2, #5
 80054c6:	4694      	mov	ip, r2
 80054c8:	4463      	add	r3, ip
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 f862 	bl	8005594 <WIZCHIP_READ>
 80054d0:	0003      	movs	r3, r0
 80054d2:	029b      	lsls	r3, r3, #10
 80054d4:	429c      	cmp	r4, r3
 80054d6:	d10f      	bne.n	80054f8 <recv+0x134>
            {
               close(sn);
 80054d8:	1dfb      	adds	r3, r7, #7
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	0018      	movs	r0, r3
 80054de:	f7ff fd61 	bl	8004fa4 <close>
               return SOCKERR_SOCKSTATUS;
 80054e2:	2307      	movs	r3, #7
 80054e4:	425b      	negs	r3, r3
 80054e6:	e04e      	b.n	8005586 <recv+0x1c2>
            }
         }
         else
         {
            close(sn);
 80054e8:	1dfb      	adds	r3, r7, #7
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff fd59 	bl	8004fa4 <close>
            return SOCKERR_SOCKSTATUS;
 80054f2:	2307      	movs	r3, #7
 80054f4:	425b      	negs	r3, r3
 80054f6:	e046      	b.n	8005586 <recv+0x1c2>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80054f8:	4b25      	ldr	r3, [pc, #148]	; (8005590 <recv+0x1cc>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	001a      	movs	r2, r3
 80054fe:	1dfb      	adds	r3, r7, #7
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	411a      	asrs	r2, r3
 8005504:	0013      	movs	r3, r2
 8005506:	2201      	movs	r2, #1
 8005508:	4013      	ands	r3, r2
 800550a:	d006      	beq.n	800551a <recv+0x156>
 800550c:	230c      	movs	r3, #12
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <recv+0x156>
 8005516:	2300      	movs	r3, #0
 8005518:	e035      	b.n	8005586 <recv+0x1c2>
      if(recvsize != 0) break;
 800551a:	230c      	movs	r3, #12
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <recv+0x166>
      recvsize = getSn_RX_RSR(sn);
 8005524:	e79c      	b.n	8005460 <recv+0x9c>
            if(recvsize != 0) break;
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	e000      	b.n	800552c <recv+0x168>
      if(recvsize != 0) break;
 800552a:	46c0      	nop			; (mov r8, r8)
   };
   if(recvsize < len) len = recvsize;
 800552c:	210c      	movs	r1, #12
 800552e:	187a      	adds	r2, r7, r1
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	8812      	ldrh	r2, [r2, #0]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d203      	bcs.n	8005542 <recv+0x17e>
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	187a      	adds	r2, r7, r1
 800553e:	8812      	ldrh	r2, [r2, #0]
 8005540:	801a      	strh	r2, [r3, #0]
   wiz_recv_data(sn, buf, len);
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	0018      	movs	r0, r3
 800554e:	f000 fa81 	bl	8005a54 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005552:	1dfb      	adds	r3, r7, #7
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	3301      	adds	r3, #1
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	3301      	adds	r3, #1
 800555e:	33ff      	adds	r3, #255	; 0xff
 8005560:	2140      	movs	r1, #64	; 0x40
 8005562:	0018      	movs	r0, r3
 8005564:	f000 f84a 	bl	80055fc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	1dfb      	adds	r3, r7, #7
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	3301      	adds	r3, #1
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	3301      	adds	r3, #1
 8005576:	33ff      	adds	r3, #255	; 0xff
 8005578:	0018      	movs	r0, r3
 800557a:	f000 f80b 	bl	8005594 <WIZCHIP_READ>
 800557e:	1e03      	subs	r3, r0, #0
 8005580:	d1f3      	bne.n	800556a <recv+0x1a6>
   return len;
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	881b      	ldrh	r3, [r3, #0]
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b005      	add	sp, #20
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	20000060 	.word	0x20000060

08005594 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8005594:	b5b0      	push	{r4, r5, r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 800559c:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <WIZCHIP_READ+0x64>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <WIZCHIP_READ+0x64>)
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <WIZCHIP_READ+0x64>)
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	0c12      	lsrs	r2, r2, #16
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	0010      	movs	r0, r2
 80055b4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <WIZCHIP_READ+0x64>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	0a12      	lsrs	r2, r2, #8
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	0010      	movs	r0, r2
 80055c2:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <WIZCHIP_READ+0x64>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	0010      	movs	r0, r2
 80055ce:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <WIZCHIP_READ+0x64>)
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	250f      	movs	r5, #15
 80055d6:	197c      	adds	r4, r7, r5
 80055d8:	4798      	blx	r3
 80055da:	0003      	movs	r3, r0
 80055dc:	7023      	strb	r3, [r4, #0]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"
#endif

   WIZCHIP.CS._deselect();
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <WIZCHIP_READ+0x64>)
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <WIZCHIP_READ+0x64>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4798      	blx	r3
   return ret;
 80055ea:	197b      	adds	r3, r7, r5
 80055ec:	781b      	ldrb	r3, [r3, #0]
}
 80055ee:	0018      	movs	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b004      	add	sp, #16
 80055f4:	bdb0      	pop	{r4, r5, r7, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	20000024 	.word	0x20000024

080055fc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	000a      	movs	r2, r1
 8005606:	1cfb      	adds	r3, r7, #3
 8005608:	701a      	strb	r2, [r3, #0]
    WIZCHIP_CRITICAL_ENTER();
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	4798      	blx	r3
    WIZCHIP.CS._select();
 8005610:	4b15      	ldr	r3, [pc, #84]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2204      	movs	r2, #4
 800561a:	4313      	orrs	r3, r2
 800561c:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	0c12      	lsrs	r2, r2, #16
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	0010      	movs	r0, r2
 800562a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	0a12      	lsrs	r2, r2, #8
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	0010      	movs	r0, r2
 8005638:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	0010      	movs	r0, r2
 8005644:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	1cfa      	adds	r2, r7, #3
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	0010      	movs	r0, r2
 8005650:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005658:	4b03      	ldr	r3, [pc, #12]	; (8005668 <WIZCHIP_WRITE+0x6c>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4798      	blx	r3
}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	b002      	add	sp, #8
 8005664:	bd80      	pop	{r7, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	20000024 	.word	0x20000024

0800566c <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800566c:	b5b0      	push	{r4, r5, r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	1dbb      	adds	r3, r7, #6
 8005678:	801a      	strh	r2, [r3, #0]
   uint16_t i = 0;
 800567a:	2416      	movs	r4, #22
 800567c:	193b      	adds	r3, r7, r4
 800567e:	2200      	movs	r2, #0
 8005680:	801a      	strh	r2, [r3, #0]
   uint16_t j = 0;
 8005682:	2314      	movs	r3, #20
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	2200      	movs	r2, #0
 8005688:	801a      	strh	r2, [r3, #0]
   WIZCHIP_CRITICAL_ENTER();
 800568a:	4b1f      	ldr	r3, [pc, #124]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005690:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	0c12      	lsrs	r2, r2, #16
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	0010      	movs	r0, r2
 80056a2:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80056a4:	4b18      	ldr	r3, [pc, #96]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	0a12      	lsrs	r2, r2, #8
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	0010      	movs	r0, r2
 80056b0:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	0010      	movs	r0, r2
 80056bc:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 80056be:	193b      	adds	r3, r7, r4
 80056c0:	2200      	movs	r2, #0
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	e00e      	b.n	80056e4 <WIZCHIP_READ_BUF+0x78>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2516      	movs	r5, #22
 80056cc:	197a      	adds	r2, r7, r5
 80056ce:	8812      	ldrh	r2, [r2, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	188c      	adds	r4, r1, r2
 80056d4:	4798      	blx	r3
 80056d6:	0003      	movs	r3, r0
 80056d8:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++,j)
 80056da:	197b      	adds	r3, r7, r5
 80056dc:	881a      	ldrh	r2, [r3, #0]
 80056de:	197b      	adds	r3, r7, r5
 80056e0:	3201      	adds	r2, #1
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	2316      	movs	r3, #22
 80056e6:	18fa      	adds	r2, r7, r3
 80056e8:	1dbb      	adds	r3, r7, #6
 80056ea:	8812      	ldrh	r2, [r2, #0]
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d3e9      	bcc.n	80056c6 <WIZCHIP_READ_BUF+0x5a>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <WIZCHIP_READ_BUF+0x9c>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4798      	blx	r3
}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	46bd      	mov	sp, r7
 8005702:	b006      	add	sp, #24
 8005704:	bdb0      	pop	{r4, r5, r7, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	20000024 	.word	0x20000024

0800570c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	1dbb      	adds	r3, r7, #6
 8005718:	801a      	strh	r2, [r3, #0]
   uint16_t i = 0;
 800571a:	2416      	movs	r4, #22
 800571c:	193b      	adds	r3, r7, r4
 800571e:	2200      	movs	r2, #0
 8005720:	801a      	strh	r2, [r3, #0]
   uint16_t j = 0;
 8005722:	2314      	movs	r3, #20
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	2200      	movs	r2, #0
 8005728:	801a      	strh	r2, [r3, #0]
   WIZCHIP_CRITICAL_ENTER();
 800572a:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005730:	4b1f      	ldr	r3, [pc, #124]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2204      	movs	r2, #4
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800573e:	4b1c      	ldr	r3, [pc, #112]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	0c12      	lsrs	r2, r2, #16
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	0010      	movs	r0, r2
 800574a:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800574c:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	0a12      	lsrs	r2, r2, #8
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	0010      	movs	r0, r2
 8005758:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	0010      	movs	r0, r2
 8005764:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8005766:	193b      	adds	r3, r7, r4
 8005768:	2200      	movs	r2, #0
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e00e      	b.n	800578c <WIZCHIP_WRITE_BUF+0x80>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	2416      	movs	r4, #22
 8005774:	193a      	adds	r2, r7, r4
 8005776:	8812      	ldrh	r2, [r2, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	188a      	adds	r2, r1, r2
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	0010      	movs	r0, r2
 8005780:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8005782:	193b      	adds	r3, r7, r4
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	193b      	adds	r3, r7, r4
 8005788:	3201      	adds	r2, #1
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	2316      	movs	r3, #22
 800578e:	18fa      	adds	r2, r7, r3
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	8812      	ldrh	r2, [r2, #0]
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3e9      	bcc.n	800576e <WIZCHIP_WRITE_BUF+0x62>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80057a0:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <WIZCHIP_WRITE_BUF+0xa4>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4798      	blx	r3
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b007      	add	sp, #28
 80057ac:	bd90      	pop	{r4, r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	20000024 	.word	0x20000024

080057b4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80057b4:	b5b0      	push	{r4, r5, r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	0002      	movs	r2, r0
 80057bc:	1dfb      	adds	r3, r7, #7
 80057be:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 80057c0:	230e      	movs	r3, #14
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	2200      	movs	r2, #0
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	230c      	movs	r3, #12
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	2200      	movs	r2, #0
 80057ce:	801a      	strh	r2, [r3, #0]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	3301      	adds	r3, #1
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	0192      	lsls	r2, r2, #6
 80057de:	4694      	mov	ip, r2
 80057e0:	4463      	add	r3, ip
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7ff fed6 	bl	8005594 <WIZCHIP_READ>
 80057e8:	0003      	movs	r3, r0
 80057ea:	001a      	movs	r2, r3
 80057ec:	250c      	movs	r5, #12
 80057ee:	197b      	adds	r3, r7, r5
 80057f0:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80057f2:	197b      	adds	r3, r7, r5
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	b29c      	uxth	r4, r3
 80057fa:	1dfb      	adds	r3, r7, #7
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	3301      	adds	r3, #1
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	2284      	movs	r2, #132	; 0x84
 8005806:	0192      	lsls	r2, r2, #6
 8005808:	4694      	mov	ip, r2
 800580a:	4463      	add	r3, ip
 800580c:	0018      	movs	r0, r3
 800580e:	f7ff fec1 	bl	8005594 <WIZCHIP_READ>
 8005812:	0003      	movs	r3, r0
 8005814:	b29a      	uxth	r2, r3
 8005816:	197b      	adds	r3, r7, r5
 8005818:	18a2      	adds	r2, r4, r2
 800581a:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 800581c:	197b      	adds	r3, r7, r5
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d025      	beq.n	8005870 <getSn_TX_FSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005824:	1dfb      	adds	r3, r7, #7
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	3301      	adds	r3, #1
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	0192      	lsls	r2, r2, #6
 8005832:	4694      	mov	ip, r2
 8005834:	4463      	add	r3, ip
 8005836:	0018      	movs	r0, r3
 8005838:	f7ff feac 	bl	8005594 <WIZCHIP_READ>
 800583c:	0003      	movs	r3, r0
 800583e:	001a      	movs	r2, r3
 8005840:	250e      	movs	r5, #14
 8005842:	197b      	adds	r3, r7, r5
 8005844:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005846:	197b      	adds	r3, r7, r5
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	b29c      	uxth	r4, r3
 800584e:	1dfb      	adds	r3, r7, #7
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	3301      	adds	r3, #1
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	2284      	movs	r2, #132	; 0x84
 800585a:	0192      	lsls	r2, r2, #6
 800585c:	4694      	mov	ip, r2
 800585e:	4463      	add	r3, ip
 8005860:	0018      	movs	r0, r3
 8005862:	f7ff fe97 	bl	8005594 <WIZCHIP_READ>
 8005866:	0003      	movs	r3, r0
 8005868:	b29a      	uxth	r2, r3
 800586a:	197b      	adds	r3, r7, r5
 800586c:	18a2      	adds	r2, r4, r2
 800586e:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8005870:	210e      	movs	r1, #14
 8005872:	187a      	adds	r2, r7, r1
 8005874:	230c      	movs	r3, #12
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d1a7      	bne.n	80057d0 <getSn_TX_FSR+0x1c>
   return val;
 8005880:	187b      	adds	r3, r7, r1
 8005882:	881b      	ldrh	r3, [r3, #0]
}
 8005884:	0018      	movs	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	b004      	add	sp, #16
 800588a:	bdb0      	pop	{r4, r5, r7, pc}

0800588c <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800588c:	b5b0      	push	{r4, r5, r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	0002      	movs	r2, r0
 8005894:	1dfb      	adds	r3, r7, #7
 8005896:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8005898:	230e      	movs	r3, #14
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	2200      	movs	r2, #0
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	230c      	movs	r3, #12
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	2200      	movs	r2, #0
 80058a6:	801a      	strh	r2, [r3, #0]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80058a8:	1dfb      	adds	r3, r7, #7
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	3301      	adds	r3, #1
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	2298      	movs	r2, #152	; 0x98
 80058b4:	0192      	lsls	r2, r2, #6
 80058b6:	4694      	mov	ip, r2
 80058b8:	4463      	add	r3, ip
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7ff fe6a 	bl	8005594 <WIZCHIP_READ>
 80058c0:	0003      	movs	r3, r0
 80058c2:	001a      	movs	r2, r3
 80058c4:	250c      	movs	r5, #12
 80058c6:	197b      	adds	r3, r7, r5
 80058c8:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80058ca:	197b      	adds	r3, r7, r5
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	b29c      	uxth	r4, r3
 80058d2:	1dfb      	adds	r3, r7, #7
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	3301      	adds	r3, #1
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	229c      	movs	r2, #156	; 0x9c
 80058de:	0192      	lsls	r2, r2, #6
 80058e0:	4694      	mov	ip, r2
 80058e2:	4463      	add	r3, ip
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7ff fe55 	bl	8005594 <WIZCHIP_READ>
 80058ea:	0003      	movs	r3, r0
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	197b      	adds	r3, r7, r5
 80058f0:	18a2      	adds	r2, r4, r2
 80058f2:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 80058f4:	197b      	adds	r3, r7, r5
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d025      	beq.n	8005948 <getSn_RX_RSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80058fc:	1dfb      	adds	r3, r7, #7
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	3301      	adds	r3, #1
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	2298      	movs	r2, #152	; 0x98
 8005908:	0192      	lsls	r2, r2, #6
 800590a:	4694      	mov	ip, r2
 800590c:	4463      	add	r3, ip
 800590e:	0018      	movs	r0, r3
 8005910:	f7ff fe40 	bl	8005594 <WIZCHIP_READ>
 8005914:	0003      	movs	r3, r0
 8005916:	001a      	movs	r2, r3
 8005918:	250e      	movs	r5, #14
 800591a:	197b      	adds	r3, r7, r5
 800591c:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800591e:	197b      	adds	r3, r7, r5
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	b29c      	uxth	r4, r3
 8005926:	1dfb      	adds	r3, r7, #7
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	3301      	adds	r3, #1
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	229c      	movs	r2, #156	; 0x9c
 8005932:	0192      	lsls	r2, r2, #6
 8005934:	4694      	mov	ip, r2
 8005936:	4463      	add	r3, ip
 8005938:	0018      	movs	r0, r3
 800593a:	f7ff fe2b 	bl	8005594 <WIZCHIP_READ>
 800593e:	0003      	movs	r3, r0
 8005940:	b29a      	uxth	r2, r3
 8005942:	197b      	adds	r3, r7, r5
 8005944:	18a2      	adds	r2, r4, r2
 8005946:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8005948:	210e      	movs	r1, #14
 800594a:	187a      	adds	r2, r7, r1
 800594c:	230c      	movs	r3, #12
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d1a7      	bne.n	80058a8 <getSn_RX_RSR+0x1c>
   return val;
 8005958:	187b      	adds	r3, r7, r1
 800595a:	881b      	ldrh	r3, [r3, #0]
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b004      	add	sp, #16
 8005962:	bdb0      	pop	{r4, r5, r7, pc}

08005964 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005964:	b5b0      	push	{r4, r5, r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6039      	str	r1, [r7, #0]
 800596c:	0011      	movs	r1, r2
 800596e:	1dfb      	adds	r3, r7, #7
 8005970:	1c02      	adds	r2, r0, #0
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	1c0a      	adds	r2, r1, #0
 8005978:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 800597a:	250e      	movs	r5, #14
 800597c:	197b      	adds	r3, r7, r5
 800597e:	2200      	movs	r2, #0
 8005980:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d05e      	beq.n	8005a4c <wiz_send_data+0xe8>
   ptr = getSn_TX_WR(sn);
 800598e:	1dfb      	adds	r3, r7, #7
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	3301      	adds	r3, #1
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	2290      	movs	r2, #144	; 0x90
 800599a:	0192      	lsls	r2, r2, #6
 800599c:	4694      	mov	ip, r2
 800599e:	4463      	add	r3, ip
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff fdf7 	bl	8005594 <WIZCHIP_READ>
 80059a6:	0003      	movs	r3, r0
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	b29c      	uxth	r4, r3
 80059ae:	1dfb      	adds	r3, r7, #7
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	3301      	adds	r3, #1
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	2294      	movs	r2, #148	; 0x94
 80059ba:	0192      	lsls	r2, r2, #6
 80059bc:	4694      	mov	ip, r2
 80059be:	4463      	add	r3, ip
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7ff fde7 	bl	8005594 <WIZCHIP_READ>
 80059c6:	0003      	movs	r3, r0
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	197b      	adds	r3, r7, r5
 80059cc:	18a2      	adds	r2, r4, r2
 80059ce:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80059d0:	002c      	movs	r4, r5
 80059d2:	197b      	adds	r3, r7, r5
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	1dfa      	adds	r2, r7, #7
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	3202      	adds	r2, #2
 80059e0:	00d2      	lsls	r2, r2, #3
 80059e2:	189b      	adds	r3, r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7ff fe8c 	bl	800570c <WIZCHIP_WRITE_BUF>

   ptr += len;
 80059f4:	193b      	adds	r3, r7, r4
 80059f6:	1939      	adds	r1, r7, r4
 80059f8:	1d3a      	adds	r2, r7, #4
 80059fa:	8809      	ldrh	r1, [r1, #0]
 80059fc:	8812      	ldrh	r2, [r2, #0]
 80059fe:	188a      	adds	r2, r1, r2
 8005a00:	801a      	strh	r2, [r3, #0]
   setSn_TX_WR(sn,ptr);
 8005a02:	1dfb      	adds	r3, r7, #7
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	3301      	adds	r3, #1
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	2290      	movs	r2, #144	; 0x90
 8005a0e:	0192      	lsls	r2, r2, #6
 8005a10:	4694      	mov	ip, r2
 8005a12:	4463      	add	r3, ip
 8005a14:	001a      	movs	r2, r3
 8005a16:	193b      	adds	r3, r7, r4
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	0019      	movs	r1, r3
 8005a22:	0010      	movs	r0, r2
 8005a24:	f7ff fdea 	bl	80055fc <WIZCHIP_WRITE>
 8005a28:	1dfb      	adds	r3, r7, #7
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	3301      	adds	r3, #1
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	2294      	movs	r2, #148	; 0x94
 8005a34:	0192      	lsls	r2, r2, #6
 8005a36:	4694      	mov	ip, r2
 8005a38:	4463      	add	r3, ip
 8005a3a:	001a      	movs	r2, r3
 8005a3c:	193b      	adds	r3, r7, r4
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	0019      	movs	r1, r3
 8005a44:	0010      	movs	r0, r2
 8005a46:	f7ff fdd9 	bl	80055fc <WIZCHIP_WRITE>
 8005a4a:	e000      	b.n	8005a4e <wiz_send_data+0xea>
   if(len == 0)  return;
 8005a4c:	46c0      	nop			; (mov r8, r8)
}
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b004      	add	sp, #16
 8005a52:	bdb0      	pop	{r4, r5, r7, pc}

08005a54 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6039      	str	r1, [r7, #0]
 8005a5c:	0011      	movs	r1, r2
 8005a5e:	1dfb      	adds	r3, r7, #7
 8005a60:	1c02      	adds	r2, r0, #0
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	1c0a      	adds	r2, r1, #0
 8005a68:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8005a6a:	250e      	movs	r5, #14
 8005a6c:	197b      	adds	r3, r7, r5
 8005a6e:	2200      	movs	r2, #0
 8005a70:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]

   if(len == 0) return;
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d05e      	beq.n	8005b3c <wiz_recv_data+0xe8>
   ptr = getSn_RX_RD(sn);
 8005a7e:	1dfb      	adds	r3, r7, #7
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	3301      	adds	r3, #1
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	22a0      	movs	r2, #160	; 0xa0
 8005a8a:	0192      	lsls	r2, r2, #6
 8005a8c:	4694      	mov	ip, r2
 8005a8e:	4463      	add	r3, ip
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7ff fd7f 	bl	8005594 <WIZCHIP_READ>
 8005a96:	0003      	movs	r3, r0
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	b29c      	uxth	r4, r3
 8005a9e:	1dfb      	adds	r3, r7, #7
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	22a4      	movs	r2, #164	; 0xa4
 8005aaa:	0192      	lsls	r2, r2, #6
 8005aac:	4694      	mov	ip, r2
 8005aae:	4463      	add	r3, ip
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7ff fd6f 	bl	8005594 <WIZCHIP_READ>
 8005ab6:	0003      	movs	r3, r0
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	197b      	adds	r3, r7, r5
 8005abc:	18a2      	adds	r2, r4, r2
 8005abe:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005ac0:	002c      	movs	r4, r5
 8005ac2:	197b      	adds	r3, r7, r5
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	1dfa      	adds	r2, r7, #7
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	0092      	lsls	r2, r2, #2
 8005ace:	3203      	adds	r2, #3
 8005ad0:	00d2      	lsls	r2, r2, #3
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005ad6:	1d3b      	adds	r3, r7, #4
 8005ad8:	881a      	ldrh	r2, [r3, #0]
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7ff fdc4 	bl	800566c <WIZCHIP_READ_BUF>
   ptr += len;
 8005ae4:	193b      	adds	r3, r7, r4
 8005ae6:	1939      	adds	r1, r7, r4
 8005ae8:	1d3a      	adds	r2, r7, #4
 8005aea:	8809      	ldrh	r1, [r1, #0]
 8005aec:	8812      	ldrh	r2, [r2, #0]
 8005aee:	188a      	adds	r2, r1, r2
 8005af0:	801a      	strh	r2, [r3, #0]

   setSn_RX_RD(sn,ptr);
 8005af2:	1dfb      	adds	r3, r7, #7
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	3301      	adds	r3, #1
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	22a0      	movs	r2, #160	; 0xa0
 8005afe:	0192      	lsls	r2, r2, #6
 8005b00:	4694      	mov	ip, r2
 8005b02:	4463      	add	r3, ip
 8005b04:	001a      	movs	r2, r3
 8005b06:	193b      	adds	r3, r7, r4
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	0019      	movs	r1, r3
 8005b12:	0010      	movs	r0, r2
 8005b14:	f7ff fd72 	bl	80055fc <WIZCHIP_WRITE>
 8005b18:	1dfb      	adds	r3, r7, #7
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	3301      	adds	r3, #1
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	22a4      	movs	r2, #164	; 0xa4
 8005b24:	0192      	lsls	r2, r2, #6
 8005b26:	4694      	mov	ip, r2
 8005b28:	4463      	add	r3, ip
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	193b      	adds	r3, r7, r4
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	0019      	movs	r1, r3
 8005b34:	0010      	movs	r0, r2
 8005b36:	f7ff fd61 	bl	80055fc <WIZCHIP_WRITE>
 8005b3a:	e000      	b.n	8005b3e <wiz_recv_data+0xea>
   if(len == 0) return;
 8005b3c:	46c0      	nop			; (mov r8, r8)
}
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b004      	add	sp, #16
 8005b42:	bdb0      	pop	{r4, r5, r7, pc}

08005b44 <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	46c0      	nop			; (mov r8, r8)
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	46c0      	nop			; (mov r8, r8)
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 8005b62:	b580      	push	{r7, lr}
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	46c0      	nop			; (mov r8, r8)
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <wizchip_bus_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <wizchip_bus_writebyte>:
 * null function is called.
 */

//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	000a      	movs	r2, r1
 8005b8c:	1cfb      	adds	r3, r7, #3
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	1cfa      	adds	r2, r7, #3
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	0002      	movs	r2, r0
 8005bb4:	1dfb      	adds	r3, r7, #7
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	46c0      	nop			; (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <reg_wizchip_cs_cbfunc+0x16>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <reg_wizchip_cs_cbfunc+0x3c>)
 8005bd8:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <reg_wizchip_cs_cbfunc+0x40>)
 8005bda:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <reg_wizchip_cs_cbfunc+0x3c>)
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <reg_wizchip_cs_cbfunc+0x44>)
 8005be0:	615a      	str	r2, [r3, #20]
 8005be2:	e006      	b.n	8005bf2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <reg_wizchip_cs_cbfunc+0x3c>)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8005bea:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <reg_wizchip_cs_cbfunc+0x3c>)
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	615a      	str	r2, [r3, #20]
   }
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b002      	add	sp, #8
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	20000024 	.word	0x20000024
 8005c00:	08005b59 	.word	0x08005b59
 8005c04:	08005b63 	.word	0x08005b63

08005c08 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	001a      	movs	r2, r3
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d0f8      	beq.n	8005c14 <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <reg_wizchip_spi_cbfunc+0x26>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005c2e:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c30:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <reg_wizchip_spi_cbfunc+0x50>)
 8005c32:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005c34:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c36:	4a09      	ldr	r2, [pc, #36]	; (8005c5c <reg_wizchip_spi_cbfunc+0x54>)
 8005c38:	61da      	str	r2, [r3, #28]
 8005c3a:	e006      	b.n	8005c4a <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	61da      	str	r2, [r3, #28]
   }
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	20000024 	.word	0x20000024
 8005c58:	08005ba1 	.word	0x08005ba1
 8005c5c:	08005bad 	.word	0x08005bad

08005c60 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005c60:	b590      	push	{r4, r7, lr}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	0002      	movs	r2, r0
 8005c68:	6039      	str	r1, [r7, #0]
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 8005c6e:	2317      	movs	r3, #23
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
   uint8_t* ptmp[2] = {0,0};
 8005c76:	210c      	movs	r1, #12
 8005c78:	187b      	adds	r3, r7, r1
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	187b      	adds	r3, r7, r1
 8005c80:	2200      	movs	r2, #0
 8005c82:	605a      	str	r2, [r3, #4]
   switch(cwtype)
 8005c84:	1dfb      	adds	r3, r7, #7
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b0f      	cmp	r3, #15
 8005c8a:	d900      	bls.n	8005c8e <ctlwizchip+0x2e>
 8005c8c:	e0bc      	b.n	8005e08 <ctlwizchip+0x1a8>
 8005c8e:	009a      	lsls	r2, r3, #2
 8005c90:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <ctlwizchip+0x1bc>)
 8005c92:	18d3      	adds	r3, r2, r3
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	469f      	mov	pc, r3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005c98:	f000 f900 	bl	8005e9c <wizchip_sw_reset>
         break;
 8005c9c:	e0b8      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_INIT_WIZCHIP:
         if(arg != 0)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <ctlwizchip+0x58>
         {
            ptmp[0] = (uint8_t*)arg;
 8005ca4:	210c      	movs	r1, #12
 8005ca6:	187b      	adds	r3, r7, r1
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005cac:	187b      	adds	r3, r7, r1
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	605a      	str	r2, [r3, #4]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005cb8:	210c      	movs	r1, #12
 8005cba:	187b      	adds	r3, r7, r1
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	187b      	adds	r3, r7, r1
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	0010      	movs	r0, r2
 8005cc6:	f000 f932 	bl	8005f2e <wizchip_init>
 8005cca:	0003      	movs	r3, r0
 8005ccc:	e0a1      	b.n	8005e12 <ctlwizchip+0x1b2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 f9f0 	bl	80060b8 <wizchip_clrinterrupt>
         break;
 8005cd8:	e09a      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005cda:	f000 fa16 	bl	800610a <wizchip_getinterrupt>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	801a      	strh	r2, [r3, #0]
         break;
 8005ce6:	e093      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 fa40 	bl	8006172 <wizchip_setinterruptmask>
         break;
 8005cf2:	e08d      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005cf4:	f000 fa63 	bl	80061be <wizchip_getinterruptmask>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	801a      	strh	r2, [r3, #0]
         break;
 8005d00:	e086      	b.n	8005e10 <ctlwizchip+0x1b0>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	2398      	movs	r3, #152	; 0x98
 8005d0e:	015b      	lsls	r3, r3, #5
 8005d10:	0011      	movs	r1, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7ff fc72 	bl	80055fc <WIZCHIP_WRITE>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	23a0      	movs	r3, #160	; 0xa0
 8005d20:	015b      	lsls	r3, r3, #5
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff fc69 	bl	80055fc <WIZCHIP_WRITE>
         break;
 8005d2a:	e071      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005d2c:	2398      	movs	r3, #152	; 0x98
 8005d2e:	015b      	lsls	r3, r3, #5
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7ff fc2f 	bl	8005594 <WIZCHIP_READ>
 8005d36:	0003      	movs	r3, r0
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	b29c      	uxth	r4, r3
 8005d3e:	23a0      	movs	r3, #160	; 0xa0
 8005d40:	015b      	lsls	r3, r3, #5
 8005d42:	0018      	movs	r0, r3
 8005d44:	f7ff fc26 	bl	8005594 <WIZCHIP_READ>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	18e3      	adds	r3, r4, r3
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	801a      	strh	r2, [r3, #0]
         break;
 8005d54:	e05c      	b.n	8005e10 <ctlwizchip+0x1b0>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005d56:	4b32      	ldr	r3, [pc, #200]	; (8005e20 <ctlwizchip+0x1c0>)
 8005d58:	789a      	ldrb	r2, [r3, #2]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	4a2f      	ldr	r2, [pc, #188]	; (8005e20 <ctlwizchip+0x1c0>)
 8005d64:	78d2      	ldrb	r2, [r2, #3]
 8005d66:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <ctlwizchip+0x1c0>)
 8005d6e:	7912      	ldrb	r2, [r2, #4]
 8005d70:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	3303      	adds	r3, #3
 8005d76:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <ctlwizchip+0x1c0>)
 8005d78:	7952      	ldrb	r2, [r2, #5]
 8005d7a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4a27      	ldr	r2, [pc, #156]	; (8005e20 <ctlwizchip+0x1c0>)
 8005d82:	7992      	ldrb	r2, [r2, #6]
 8005d84:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	3305      	adds	r3, #5
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
         break;
 8005d8e:	e03f      	b.n	8005e10 <ctlwizchip+0x1b0>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005d90:	f000 fa7e 	bl	8006290 <wizphy_reset>
         break;
 8005d94:	e03c      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f000 faad 	bl	80062f8 <wizphy_setphyconf>
         break;
 8005d9e:	e037      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	0018      	movs	r0, r3
 8005da4:	f000 fb06 	bl	80063b4 <wizphy_getphyconf>
         break;
 8005da8:	e032      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f000 fb70 	bl	8006494 <wizphy_setphypmode>
 8005db4:	0003      	movs	r3, r0
 8005db6:	e02c      	b.n	8005e12 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005db8:	f000 fa4c 	bl	8006254 <wizphy_getphypmode>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	001a      	movs	r2, r3
 8005dc0:	2117      	movs	r1, #23
 8005dc2:	187b      	adds	r3, r7, r1
 8005dc4:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 8005dc6:	187b      	adds	r3, r7, r1
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2bff      	cmp	r3, #255	; 0xff
 8005dcc:	d102      	bne.n	8005dd4 <ctlwizchip+0x174>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	e01e      	b.n	8005e12 <ctlwizchip+0x1b2>
         *(uint8_t*)arg = tmp;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2217      	movs	r2, #23
 8005dd8:	18ba      	adds	r2, r7, r2
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	701a      	strb	r2, [r3, #0]
         break;
 8005dde:	e017      	b.n	8005e10 <ctlwizchip+0x1b0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005de0:	f000 fa1d 	bl	800621e <wizphy_getphylink>
 8005de4:	0003      	movs	r3, r0
 8005de6:	001a      	movs	r2, r3
 8005de8:	2117      	movs	r1, #23
 8005dea:	187b      	adds	r3, r7, r1
 8005dec:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 8005dee:	187b      	adds	r3, r7, r1
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2bff      	cmp	r3, #255	; 0xff
 8005df4:	d102      	bne.n	8005dfc <ctlwizchip+0x19c>
 8005df6:	2301      	movs	r3, #1
 8005df8:	425b      	negs	r3, r3
 8005dfa:	e00a      	b.n	8005e12 <ctlwizchip+0x1b2>
         *(uint8_t*)arg = tmp;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2217      	movs	r2, #23
 8005e00:	18ba      	adds	r2, r7, r2
 8005e02:	7812      	ldrb	r2, [r2, #0]
 8005e04:	701a      	strb	r2, [r3, #0]
         break;
 8005e06:	e003      	b.n	8005e10 <ctlwizchip+0x1b0>
      default:
         return -1;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	425b      	negs	r3, r3
 8005e0c:	e001      	b.n	8005e12 <ctlwizchip+0x1b2>
         break;
 8005e0e:	46c0      	nop			; (mov r8, r8)
   }
   return 0;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	0018      	movs	r0, r3
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b007      	add	sp, #28
 8005e18:	bd90      	pop	{r4, r7, pc}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	08006810 	.word	0x08006810
 8005e20:	20000024 	.word	0x20000024

08005e24 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	6039      	str	r1, [r7, #0]
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	701a      	strb	r2, [r3, #0]

   switch(cntype)
 8005e32:	1dfb      	adds	r3, r7, #7
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b05      	cmp	r3, #5
 8005e38:	d826      	bhi.n	8005e88 <ctlnetwork+0x64>
 8005e3a:	009a      	lsls	r2, r3, #2
 8005e3c:	4b16      	ldr	r3, [pc, #88]	; (8005e98 <ctlnetwork+0x74>)
 8005e3e:	18d3      	adds	r3, r2, r3
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	469f      	mov	pc, r3
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 fb84 	bl	8006554 <wizchip_setnetinfo>
         break;
 8005e4c:	e01f      	b.n	8005e8e <ctlnetwork+0x6a>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 fbc1 	bl	80065d8 <wizchip_getnetinfo>
         break;
 8005e56:	e01a      	b.n	8005e8e <ctlnetwork+0x6a>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 fbfd 	bl	800665c <wizchip_setnetmode>
 8005e62:	0003      	movs	r3, r0
 8005e64:	e014      	b.n	8005e90 <ctlnetwork+0x6c>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005e66:	f000 fc25 	bl	80066b4 <wizchip_getnetmode>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	001a      	movs	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	701a      	strb	r2, [r3, #0]
         break;
 8005e72:	e00c      	b.n	8005e8e <ctlnetwork+0x6a>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 fc25 	bl	80066c6 <wizchip_settimeout>
         break;
 8005e7c:	e007      	b.n	8005e8e <ctlnetwork+0x6a>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fc44 	bl	800670e <wizchip_gettimeout>
         break;
 8005e86:	e002      	b.n	8005e8e <ctlnetwork+0x6a>
      default:
         return -1;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	425b      	negs	r3, r3
 8005e8c:	e000      	b.n	8005e90 <ctlnetwork+0x6c>
   }
   return 0;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b002      	add	sp, #8
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	08006850 	.word	0x08006850

08005e9c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8005ea2:	1d39      	adds	r1, r7, #4
 8005ea4:	2390      	movs	r3, #144	; 0x90
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	2206      	movs	r2, #6
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7ff fbde 	bl	800566c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005eb0:	2414      	movs	r4, #20
 8005eb2:	1939      	adds	r1, r7, r4
 8005eb4:	2380      	movs	r3, #128	; 0x80
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2204      	movs	r2, #4
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7ff fbd6 	bl	800566c <WIZCHIP_READ_BUF>
 8005ec0:	2510      	movs	r5, #16
 8005ec2:	1979      	adds	r1, r7, r5
 8005ec4:	23a0      	movs	r3, #160	; 0xa0
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	2204      	movs	r2, #4
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f7ff fbce 	bl	800566c <WIZCHIP_READ_BUF>
 8005ed0:	260c      	movs	r6, #12
 8005ed2:	19b9      	adds	r1, r7, r6
 8005ed4:	23f0      	movs	r3, #240	; 0xf0
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	2204      	movs	r2, #4
 8005eda:	0018      	movs	r0, r3
 8005edc:	f7ff fbc6 	bl	800566c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f7ff fb8a 	bl	80055fc <WIZCHIP_WRITE>
   getMR(); // for delay
 8005ee8:	2000      	movs	r0, #0
 8005eea:	f7ff fb53 	bl	8005594 <WIZCHIP_READ>
   setSHAR(mac);
 8005eee:	1d39      	adds	r1, r7, #4
 8005ef0:	2390      	movs	r3, #144	; 0x90
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	2206      	movs	r2, #6
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7ff fc08 	bl	800570c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005efc:	1939      	adds	r1, r7, r4
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	2204      	movs	r2, #4
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7ff fc01 	bl	800570c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005f0a:	1979      	adds	r1, r7, r5
 8005f0c:	23a0      	movs	r3, #160	; 0xa0
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	2204      	movs	r2, #4
 8005f12:	0018      	movs	r0, r3
 8005f14:	f7ff fbfa 	bl	800570c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005f18:	19b9      	adds	r1, r7, r6
 8005f1a:	23f0      	movs	r3, #240	; 0xf0
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	2204      	movs	r2, #4
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff fbf3 	bl	800570c <WIZCHIP_WRITE_BUF>
}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b007      	add	sp, #28
 8005f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f2e <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005f2e:	b590      	push	{r4, r7, lr}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8005f38:	240e      	movs	r4, #14
 8005f3a:	193b      	adds	r3, r7, r4
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 8005f40:	f7ff ffac 	bl	8005e9c <wizchip_sw_reset>
   if(txsize)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d056      	beq.n	8005ff8 <wizchip_init+0xca>
   {
      tmp = 0;
 8005f4a:	193b      	adds	r3, r7, r4
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f50:	230f      	movs	r3, #15
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	e015      	b.n	8005f86 <wizchip_init+0x58>
         tmp += txsize[i];
 8005f5a:	210f      	movs	r1, #15
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	18d3      	adds	r3, r2, r3
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	200e      	movs	r0, #14
 8005f6a:	183b      	adds	r3, r7, r0
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	18d3      	adds	r3, r2, r3
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	183b      	adds	r3, r7, r0
 8005f74:	701a      	strb	r2, [r3, #0]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b25b      	sxtb	r3, r3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	3301      	adds	r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	187b      	adds	r3, r7, r1
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	230f      	movs	r3, #15
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b25b      	sxtb	r3, r3
 8005f8e:	2b07      	cmp	r3, #7
 8005f90:	dde3      	ble.n	8005f5a <wizchip_init+0x2c>
      if(tmp > 16) return -1;
 8005f92:	230e      	movs	r3, #14
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	dd02      	ble.n	8005fa4 <wizchip_init+0x76>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	e085      	b.n	80060b0 <wizchip_init+0x182>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fa4:	230f      	movs	r3, #15
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	2200      	movs	r2, #0
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	e01e      	b.n	8005fec <wizchip_init+0xbe>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8005fae:	220f      	movs	r2, #15
 8005fb0:	18bb      	adds	r3, r7, r2
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b25b      	sxtb	r3, r3
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	3301      	adds	r3, #1
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	21f8      	movs	r1, #248	; 0xf8
 8005fbe:	0149      	lsls	r1, r1, #5
 8005fc0:	468c      	mov	ip, r1
 8005fc2:	4463      	add	r3, ip
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	0014      	movs	r4, r2
 8005fc8:	18bb      	adds	r3, r7, r2
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	18d3      	adds	r3, r2, r3
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	0019      	movs	r1, r3
 8005fd6:	f7ff fb11 	bl	80055fc <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fda:	0021      	movs	r1, r4
 8005fdc:	187b      	adds	r3, r7, r1
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	187b      	adds	r3, r7, r1
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	230f      	movs	r3, #15
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	2b07      	cmp	r3, #7
 8005ff6:	ddda      	ble.n	8005fae <wizchip_init+0x80>
   }
   if(rxsize)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d057      	beq.n	80060ae <wizchip_init+0x180>
   {
      tmp = 0;
 8005ffe:	230e      	movs	r3, #14
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006006:	230f      	movs	r3, #15
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	e015      	b.n	800603c <wizchip_init+0x10e>
         tmp += rxsize[i];
 8006010:	210f      	movs	r1, #15
 8006012:	187b      	adds	r3, r7, r1
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	b25b      	sxtb	r3, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	18d3      	adds	r3, r2, r3
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	200e      	movs	r0, #14
 8006020:	183b      	adds	r3, r7, r0
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	18d3      	adds	r3, r2, r3
 8006026:	b2da      	uxtb	r2, r3
 8006028:	183b      	adds	r3, r7, r0
 800602a:	701a      	strb	r2, [r3, #0]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800602c:	187b      	adds	r3, r7, r1
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b25b      	sxtb	r3, r3
 8006032:	b2db      	uxtb	r3, r3
 8006034:	3301      	adds	r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	187b      	adds	r3, r7, r1
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	230f      	movs	r3, #15
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b25b      	sxtb	r3, r3
 8006044:	2b07      	cmp	r3, #7
 8006046:	dde3      	ble.n	8006010 <wizchip_init+0xe2>
      if(tmp > 16) return -1;
 8006048:	230e      	movs	r3, #14
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	b25b      	sxtb	r3, r3
 8006050:	2b10      	cmp	r3, #16
 8006052:	dd02      	ble.n	800605a <wizchip_init+0x12c>
 8006054:	2301      	movs	r3, #1
 8006056:	425b      	negs	r3, r3
 8006058:	e02a      	b.n	80060b0 <wizchip_init+0x182>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800605a:	230f      	movs	r3, #15
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	e01e      	b.n	80060a2 <wizchip_init+0x174>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8006064:	220f      	movs	r2, #15
 8006066:	18bb      	adds	r3, r7, r2
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	b25b      	sxtb	r3, r3
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	3301      	adds	r3, #1
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	21f0      	movs	r1, #240	; 0xf0
 8006074:	0149      	lsls	r1, r1, #5
 8006076:	468c      	mov	ip, r1
 8006078:	4463      	add	r3, ip
 800607a:	0018      	movs	r0, r3
 800607c:	0014      	movs	r4, r2
 800607e:	18bb      	adds	r3, r7, r2
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b25b      	sxtb	r3, r3
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	18d3      	adds	r3, r2, r3
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	0019      	movs	r1, r3
 800608c:	f7ff fab6 	bl	80055fc <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006090:	0021      	movs	r1, r4
 8006092:	187b      	adds	r3, r7, r1
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b25b      	sxtb	r3, r3
 8006098:	b2db      	uxtb	r3, r3
 800609a:	3301      	adds	r3, #1
 800609c:	b2da      	uxtb	r2, r3
 800609e:	187b      	adds	r3, r7, r1
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	230f      	movs	r3, #15
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	2b07      	cmp	r3, #7
 80060ac:	ddda      	ble.n	8006064 <wizchip_init+0x136>
   }
   return 0;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b005      	add	sp, #20
 80060b6:	bd90      	pop	{r4, r7, pc}

080060b8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	0002      	movs	r2, r0
 80060c0:	1dbb      	adds	r3, r7, #6
 80060c2:	801a      	strh	r2, [r3, #0]
   uint8_t ir  = (uint8_t)intr;
 80060c4:	210f      	movs	r1, #15
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	1dba      	adds	r2, r7, #6
 80060ca:	8812      	ldrh	r2, [r2, #0]
 80060cc:	701a      	strb	r2, [r3, #0]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80060ce:	1dbb      	adds	r3, r7, #6
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	240e      	movs	r4, #14
 80060d8:	193b      	adds	r3, r7, r4
 80060da:	701a      	strb	r2, [r3, #0]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 80060dc:	187b      	adds	r3, r7, r1
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	220f      	movs	r2, #15
 80060e2:	4393      	bics	r3, r2
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	23a8      	movs	r3, #168	; 0xa8
 80060e8:	015b      	lsls	r3, r3, #5
 80060ea:	0011      	movs	r1, r2
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7ff fa85 	bl	80055fc <WIZCHIP_WRITE>
   setSIR(sir);
 80060f2:	193b      	adds	r3, r7, r4
 80060f4:	781a      	ldrb	r2, [r3, #0]
 80060f6:	23b8      	movs	r3, #184	; 0xb8
 80060f8:	015b      	lsls	r3, r3, #5
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7ff fa7d 	bl	80055fc <WIZCHIP_WRITE>
#endif
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b005      	add	sp, #20
 8006108:	bd90      	pop	{r4, r7, pc}

0800610a <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800610a:	b590      	push	{r4, r7, lr}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
   uint8_t sir = 0;
 8006116:	1dbb      	adds	r3, r7, #6
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	2200      	movs	r2, #0
 8006120:	801a      	strh	r2, [r3, #0]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8006122:	23a8      	movs	r3, #168	; 0xa8
 8006124:	015b      	lsls	r3, r3, #5
 8006126:	0018      	movs	r0, r3
 8006128:	f7ff fa34 	bl	8005594 <WIZCHIP_READ>
 800612c:	0003      	movs	r3, r0
 800612e:	0019      	movs	r1, r3
 8006130:	1dfb      	adds	r3, r7, #7
 8006132:	220f      	movs	r2, #15
 8006134:	4391      	bics	r1, r2
 8006136:	000a      	movs	r2, r1
 8006138:	701a      	strb	r2, [r3, #0]
   sir = getSIR();
 800613a:	1dbc      	adds	r4, r7, #6
 800613c:	23b8      	movs	r3, #184	; 0xb8
 800613e:	015b      	lsls	r3, r3, #5
 8006140:	0018      	movs	r0, r3
 8006142:	f7ff fa27 	bl	8005594 <WIZCHIP_READ>
 8006146:	0003      	movs	r3, r0
 8006148:	7023      	strb	r3, [r4, #0]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	1dba      	adds	r2, r7, #6
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + ir;
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	b299      	uxth	r1, r3
 800615a:	1dfb      	adds	r3, r7, #7
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b29a      	uxth	r2, r3
 8006160:	1d3b      	adds	r3, r7, #4
 8006162:	188a      	adds	r2, r1, r2
 8006164:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	881b      	ldrh	r3, [r3, #0]
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b003      	add	sp, #12
 8006170:	bd90      	pop	{r4, r7, pc}

08006172 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006172:	b590      	push	{r4, r7, lr}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	0002      	movs	r2, r0
 800617a:	1dbb      	adds	r3, r7, #6
 800617c:	801a      	strh	r2, [r3, #0]
   uint8_t imr  = (uint8_t)intr;
 800617e:	210f      	movs	r1, #15
 8006180:	187b      	adds	r3, r7, r1
 8006182:	1dba      	adds	r2, r7, #6
 8006184:	8812      	ldrh	r2, [r2, #0]
 8006186:	701a      	strb	r2, [r3, #0]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006188:	1dbb      	adds	r3, r7, #6
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	0a1b      	lsrs	r3, r3, #8
 800618e:	b29a      	uxth	r2, r3
 8006190:	240e      	movs	r4, #14
 8006192:	193b      	adds	r3, r7, r4
 8006194:	701a      	strb	r2, [r3, #0]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8006196:	187b      	adds	r3, r7, r1
 8006198:	781a      	ldrb	r2, [r3, #0]
 800619a:	23b0      	movs	r3, #176	; 0xb0
 800619c:	015b      	lsls	r3, r3, #5
 800619e:	0011      	movs	r1, r2
 80061a0:	0018      	movs	r0, r3
 80061a2:	f7ff fa2b 	bl	80055fc <WIZCHIP_WRITE>
   setSIMR(simr);
 80061a6:	193b      	adds	r3, r7, r4
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	23c0      	movs	r3, #192	; 0xc0
 80061ac:	015b      	lsls	r3, r3, #5
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7ff fa23 	bl	80055fc <WIZCHIP_WRITE>
#endif
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b005      	add	sp, #20
 80061bc:	bd90      	pop	{r4, r7, pc}

080061be <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80061be:	b590      	push	{r4, r7, lr}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80061c4:	1dfb      	adds	r3, r7, #7
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]
   uint8_t simr = 0;
 80061ca:	1dbb      	adds	r3, r7, #6
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 80061d0:	1d3b      	adds	r3, r7, #4
 80061d2:	2200      	movs	r2, #0
 80061d4:	801a      	strh	r2, [r3, #0]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 80061d6:	1dfc      	adds	r4, r7, #7
 80061d8:	23b0      	movs	r3, #176	; 0xb0
 80061da:	015b      	lsls	r3, r3, #5
 80061dc:	0018      	movs	r0, r3
 80061de:	f7ff f9d9 	bl	8005594 <WIZCHIP_READ>
 80061e2:	0003      	movs	r3, r0
 80061e4:	7023      	strb	r3, [r4, #0]
   simr = getSIMR();
 80061e6:	1dbc      	adds	r4, r7, #6
 80061e8:	23c0      	movs	r3, #192	; 0xc0
 80061ea:	015b      	lsls	r3, r3, #5
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7ff f9d1 	bl	8005594 <WIZCHIP_READ>
 80061f2:	0003      	movs	r3, r0
 80061f4:	7023      	strb	r3, [r4, #0]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	1dba      	adds	r2, r7, #6
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + imr;
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	b299      	uxth	r1, r3
 8006206:	1dfb      	adds	r3, r7, #7
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b29a      	uxth	r2, r3
 800620c:	1d3b      	adds	r3, r7, #4
 800620e:	188a      	adds	r2, r1, r2
 8006210:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	881b      	ldrh	r3, [r3, #0]
}
 8006216:	0018      	movs	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	b003      	add	sp, #12
 800621c:	bd90      	pop	{r4, r7, pc}

0800621e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006224:	23b8      	movs	r3, #184	; 0xb8
 8006226:	019b      	lsls	r3, r3, #6
 8006228:	0018      	movs	r0, r3
 800622a:	f7ff f9b3 	bl	8005594 <WIZCHIP_READ>
 800622e:	0003      	movs	r3, r0
 8006230:	001a      	movs	r2, r3
 8006232:	2301      	movs	r3, #1
 8006234:	4013      	ands	r3, r2
 8006236:	d003      	beq.n	8006240 <wizphy_getphylink+0x22>
      tmp = PHY_LINK_ON;
 8006238:	1dfb      	adds	r3, r7, #7
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e002      	b.n	8006246 <wizphy_getphylink+0x28>
   else
      tmp = PHY_LINK_OFF;
 8006240:	1dfb      	adds	r3, r7, #7
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
#else
   tmp = -1;
#endif
   return tmp;
 8006246:	1dfb      	adds	r3, r7, #7
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	b25b      	sxtb	r3, r3
}
 800624c:	0018      	movs	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}

08006254 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800625a:	1dfb      	adds	r3, r7, #7
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8006260:	23b8      	movs	r3, #184	; 0xb8
 8006262:	019b      	lsls	r3, r3, #6
 8006264:	0018      	movs	r0, r3
 8006266:	f7ff f995 	bl	8005594 <WIZCHIP_READ>
 800626a:	0003      	movs	r3, r0
 800626c:	001a      	movs	r2, r3
 800626e:	2330      	movs	r3, #48	; 0x30
 8006270:	4013      	ands	r3, r2
 8006272:	d003      	beq.n	800627c <wizphy_getphypmode+0x28>
         tmp = PHY_POWER_DOWN;
 8006274:	1dfb      	adds	r3, r7, #7
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e002      	b.n	8006282 <wizphy_getphypmode+0x2e>
      else
         tmp = PHY_POWER_NORM;
 800627c:	1dfb      	adds	r3, r7, #7
 800627e:	2200      	movs	r2, #0
 8006280:	701a      	strb	r2, [r3, #0]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006282:	1dfb      	adds	r3, r7, #7
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	b25b      	sxtb	r3, r3
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	b002      	add	sp, #8
 800628e:	bd80      	pop	{r7, pc}

08006290 <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8006296:	1dfc      	adds	r4, r7, #7
 8006298:	23b8      	movs	r3, #184	; 0xb8
 800629a:	019b      	lsls	r3, r3, #6
 800629c:	0018      	movs	r0, r3
 800629e:	f7ff f979 	bl	8005594 <WIZCHIP_READ>
 80062a2:	0003      	movs	r3, r0
 80062a4:	7023      	strb	r3, [r4, #0]
   tmp &= PHYCFGR_RST;
 80062a6:	1dfb      	adds	r3, r7, #7
 80062a8:	1dfa      	adds	r2, r7, #7
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	217f      	movs	r1, #127	; 0x7f
 80062ae:	400a      	ands	r2, r1
 80062b0:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 80062b2:	1dfb      	adds	r3, r7, #7
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	23b8      	movs	r3, #184	; 0xb8
 80062b8:	019b      	lsls	r3, r3, #6
 80062ba:	0011      	movs	r1, r2
 80062bc:	0018      	movs	r0, r3
 80062be:	f7ff f99d 	bl	80055fc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80062c2:	1dfc      	adds	r4, r7, #7
 80062c4:	23b8      	movs	r3, #184	; 0xb8
 80062c6:	019b      	lsls	r3, r3, #6
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7ff f963 	bl	8005594 <WIZCHIP_READ>
 80062ce:	0003      	movs	r3, r0
 80062d0:	7023      	strb	r3, [r4, #0]
   tmp |= ~PHYCFGR_RST;
 80062d2:	1dfb      	adds	r3, r7, #7
 80062d4:	1dfa      	adds	r2, r7, #7
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	2180      	movs	r1, #128	; 0x80
 80062da:	4249      	negs	r1, r1
 80062dc:	430a      	orrs	r2, r1
 80062de:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 80062e0:	1dfb      	adds	r3, r7, #7
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	23b8      	movs	r3, #184	; 0xb8
 80062e6:	019b      	lsls	r3, r3, #6
 80062e8:	0011      	movs	r1, r2
 80062ea:	0018      	movs	r0, r3
 80062ec:	f7ff f986 	bl	80055fc <WIZCHIP_WRITE>
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b003      	add	sp, #12
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006300:	210f      	movs	r1, #15
 8006302:	187b      	adds	r3, r7, r1
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
   if(phyconf->by == PHY_CONFBY_SW)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d106      	bne.n	800631e <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMD;
 8006310:	187b      	adds	r3, r7, r1
 8006312:	187a      	adds	r2, r7, r1
 8006314:	7812      	ldrb	r2, [r2, #0]
 8006316:	2140      	movs	r1, #64	; 0x40
 8006318:	430a      	orrs	r2, r1
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	e006      	b.n	800632c <wizphy_setphyconf+0x34>
   else
      tmp &= ~PHYCFGR_OPMD;
 800631e:	220f      	movs	r2, #15
 8006320:	18bb      	adds	r3, r7, r2
 8006322:	18ba      	adds	r2, r7, r2
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	2140      	movs	r1, #64	; 0x40
 8006328:	438a      	bics	r2, r1
 800632a:	701a      	strb	r2, [r3, #0]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <wizphy_setphyconf+0x4c>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006334:	220f      	movs	r2, #15
 8006336:	18bb      	adds	r3, r7, r2
 8006338:	18ba      	adds	r2, r7, r2
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	2138      	movs	r1, #56	; 0x38
 800633e:	430a      	orrs	r2, r1
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e028      	b.n	8006396 <wizphy_setphyconf+0x9e>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	78db      	ldrb	r3, [r3, #3]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d113      	bne.n	8006374 <wizphy_setphyconf+0x7c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	789b      	ldrb	r3, [r3, #2]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d107      	bne.n	8006364 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100F;
 8006354:	220f      	movs	r2, #15
 8006356:	18bb      	adds	r3, r7, r2
 8006358:	18ba      	adds	r2, r7, r2
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	2118      	movs	r1, #24
 800635e:	430a      	orrs	r2, r1
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e018      	b.n	8006396 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006364:	220f      	movs	r2, #15
 8006366:	18bb      	adds	r3, r7, r2
 8006368:	18ba      	adds	r2, r7, r2
 800636a:	7812      	ldrb	r2, [r2, #0]
 800636c:	2108      	movs	r1, #8
 800636e:	430a      	orrs	r2, r1
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	e010      	b.n	8006396 <wizphy_setphyconf+0x9e>
      }
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	789b      	ldrb	r3, [r3, #2]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d107      	bne.n	800638c <wizphy_setphyconf+0x94>
            tmp |= PHYCFGR_OPMDC_100H;
 800637c:	220f      	movs	r2, #15
 800637e:	18bb      	adds	r3, r7, r2
 8006380:	18ba      	adds	r2, r7, r2
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	2110      	movs	r1, #16
 8006386:	430a      	orrs	r2, r1
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e004      	b.n	8006396 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10H;
 800638c:	220f      	movs	r2, #15
 800638e:	18bb      	adds	r3, r7, r2
 8006390:	18ba      	adds	r2, r7, r2
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	701a      	strb	r2, [r3, #0]
      }
   }
   setPHYCFGR(tmp);
 8006396:	230f      	movs	r3, #15
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	23b8      	movs	r3, #184	; 0xb8
 800639e:	019b      	lsls	r3, r3, #6
 80063a0:	0011      	movs	r1, r2
 80063a2:	0018      	movs	r0, r3
 80063a4:	f7ff f92a 	bl	80055fc <WIZCHIP_WRITE>
   wizphy_reset();
 80063a8:	f7ff ff72 	bl	8006290 <wizphy_reset>
}
 80063ac:	46c0      	nop			; (mov r8, r8)
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b004      	add	sp, #16
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80063b4:	b5b0      	push	{r4, r5, r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80063bc:	250f      	movs	r5, #15
 80063be:	197b      	adds	r3, r7, r5
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 80063c4:	197c      	adds	r4, r7, r5
 80063c6:	23b8      	movs	r3, #184	; 0xb8
 80063c8:	019b      	lsls	r3, r3, #6
 80063ca:	0018      	movs	r0, r3
 80063cc:	f7ff f8e2 	bl	8005594 <WIZCHIP_READ>
 80063d0:	0003      	movs	r3, r0
 80063d2:	7023      	strb	r3, [r4, #0]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80063d4:	0029      	movs	r1, r5
 80063d6:	187b      	adds	r3, r7, r1
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	119b      	asrs	r3, r3, #6
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2201      	movs	r2, #1
 80063e0:	4013      	ands	r3, r2
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80063e8:	187b      	adds	r3, r7, r1
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2238      	movs	r2, #56	; 0x38
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d001      	beq.n	80063f8 <wizphy_getphyconf+0x44>
 80063f4:	2b38      	cmp	r3, #56	; 0x38
 80063f6:	d103      	bne.n	8006400 <wizphy_getphyconf+0x4c>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA:
         phyconf->mode = PHY_MODE_AUTONEGO;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	705a      	strb	r2, [r3, #1]
         break;
 80063fe:	e003      	b.n	8006408 <wizphy_getphyconf+0x54>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	705a      	strb	r2, [r3, #1]
         break;
 8006406:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006408:	230f      	movs	r3, #15
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2238      	movs	r2, #56	; 0x38
 8006410:	4013      	ands	r3, r2
 8006412:	3b10      	subs	r3, #16
 8006414:	2210      	movs	r2, #16
 8006416:	429a      	cmp	r2, r3
 8006418:	4192      	sbcs	r2, r2
 800641a:	4252      	negs	r2, r2
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	2a00      	cmp	r2, #0
 8006420:	d10d      	bne.n	800643e <wizphy_getphyconf+0x8a>
 8006422:	2201      	movs	r2, #1
 8006424:	409a      	lsls	r2, r3
 8006426:	0013      	movs	r3, r2
 8006428:	4a18      	ldr	r2, [pc, #96]	; (800648c <wizphy_getphyconf+0xd8>)
 800642a:	4013      	ands	r3, r2
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	4193      	sbcs	r3, r2
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <wizphy_getphyconf+0x8a>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	709a      	strb	r2, [r3, #2]
         break;
 800643c:	e003      	b.n	8006446 <wizphy_getphyconf+0x92>
      default:
         phyconf->speed = PHY_SPEED_10;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	709a      	strb	r2, [r3, #2]
         break;
 8006444:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006446:	230f      	movs	r3, #15
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2238      	movs	r2, #56	; 0x38
 800644e:	4013      	ands	r3, r2
 8006450:	3b08      	subs	r3, #8
 8006452:	2218      	movs	r2, #24
 8006454:	429a      	cmp	r2, r3
 8006456:	4192      	sbcs	r2, r2
 8006458:	4252      	negs	r2, r2
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	2a00      	cmp	r2, #0
 800645e:	d10d      	bne.n	800647c <wizphy_getphyconf+0xc8>
 8006460:	2201      	movs	r2, #1
 8006462:	409a      	lsls	r2, r3
 8006464:	0013      	movs	r3, r2
 8006466:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <wizphy_getphyconf+0xdc>)
 8006468:	4013      	ands	r3, r2
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	4193      	sbcs	r3, r2
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <wizphy_getphyconf+0xc8>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	70da      	strb	r2, [r3, #3]
         break;
 800647a:	e003      	b.n	8006484 <wizphy_getphyconf+0xd0>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	70da      	strb	r2, [r3, #3]
         break;
 8006482:	46c0      	nop			; (mov r8, r8)
   }
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	46bd      	mov	sp, r7
 8006488:	b004      	add	sp, #16
 800648a:	bdb0      	pop	{r4, r5, r7, pc}
 800648c:	00010101 	.word	0x00010101
 8006490:	01010001 	.word	0x01010001

08006494 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	0002      	movs	r2, r0
 800649c:	1dfb      	adds	r3, r7, #7
 800649e:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 80064a0:	250f      	movs	r5, #15
 80064a2:	197b      	adds	r3, r7, r5
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 80064a8:	197c      	adds	r4, r7, r5
 80064aa:	23b8      	movs	r3, #184	; 0xb8
 80064ac:	019b      	lsls	r3, r3, #6
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7ff f870 	bl	8005594 <WIZCHIP_READ>
 80064b4:	0003      	movs	r3, r0
 80064b6:	7023      	strb	r3, [r4, #0]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80064b8:	197b      	adds	r3, r7, r5
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2240      	movs	r2, #64	; 0x40
 80064be:	4013      	ands	r3, r2
 80064c0:	d102      	bne.n	80064c8 <wizphy_setphypmode+0x34>
 80064c2:	2301      	movs	r3, #1
 80064c4:	425b      	negs	r3, r3
 80064c6:	e040      	b.n	800654a <wizphy_setphypmode+0xb6>
   tmp &= ~PHYCFGR_OPMDC_ALLA;
 80064c8:	200f      	movs	r0, #15
 80064ca:	183b      	adds	r3, r7, r0
 80064cc:	183a      	adds	r2, r7, r0
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	2138      	movs	r1, #56	; 0x38
 80064d2:	438a      	bics	r2, r1
 80064d4:	701a      	strb	r2, [r3, #0]
   if( pmode == PHY_POWER_DOWN)
 80064d6:	1dfb      	adds	r3, r7, #7
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d106      	bne.n	80064ec <wizphy_setphypmode+0x58>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80064de:	183b      	adds	r3, r7, r0
 80064e0:	183a      	adds	r2, r7, r0
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	2130      	movs	r1, #48	; 0x30
 80064e6:	430a      	orrs	r2, r1
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e006      	b.n	80064fa <wizphy_setphypmode+0x66>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80064ec:	220f      	movs	r2, #15
 80064ee:	18bb      	adds	r3, r7, r2
 80064f0:	18ba      	adds	r2, r7, r2
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	2138      	movs	r1, #56	; 0x38
 80064f6:	430a      	orrs	r2, r1
 80064f8:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 80064fa:	250f      	movs	r5, #15
 80064fc:	197b      	adds	r3, r7, r5
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	23b8      	movs	r3, #184	; 0xb8
 8006502:	019b      	lsls	r3, r3, #6
 8006504:	0011      	movs	r1, r2
 8006506:	0018      	movs	r0, r3
 8006508:	f7ff f878 	bl	80055fc <WIZCHIP_WRITE>
   wizphy_reset();
 800650c:	f7ff fec0 	bl	8006290 <wizphy_reset>
   tmp = getPHYCFGR();
 8006510:	197c      	adds	r4, r7, r5
 8006512:	23b8      	movs	r3, #184	; 0xb8
 8006514:	019b      	lsls	r3, r3, #6
 8006516:	0018      	movs	r0, r3
 8006518:	f7ff f83c 	bl	8005594 <WIZCHIP_READ>
 800651c:	0003      	movs	r3, r0
 800651e:	7023      	strb	r3, [r4, #0]
   if( pmode == PHY_POWER_DOWN)
 8006520:	1dfb      	adds	r3, r7, #7
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d106      	bne.n	8006536 <wizphy_setphypmode+0xa2>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006528:	197b      	adds	r3, r7, r5
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2230      	movs	r2, #48	; 0x30
 800652e:	4013      	ands	r3, r2
 8006530:	d009      	beq.n	8006546 <wizphy_setphypmode+0xb2>
 8006532:	2300      	movs	r3, #0
 8006534:	e009      	b.n	800654a <wizphy_setphypmode+0xb6>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8006536:	230f      	movs	r3, #15
 8006538:	18fb      	adds	r3, r7, r3
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2238      	movs	r2, #56	; 0x38
 800653e:	4013      	ands	r3, r2
 8006540:	d001      	beq.n	8006546 <wizphy_setphypmode+0xb2>
 8006542:	2300      	movs	r3, #0
 8006544:	e001      	b.n	800654a <wizphy_setphypmode+0xb6>
   }
   return -1;
 8006546:	2301      	movs	r3, #1
 8006548:	425b      	negs	r3, r3
}
 800654a:	0018      	movs	r0, r3
 800654c:	46bd      	mov	sp, r7
 800654e:	b004      	add	sp, #16
 8006550:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006554 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	2390      	movs	r3, #144	; 0x90
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	2206      	movs	r2, #6
 8006564:	0018      	movs	r0, r3
 8006566:	f7ff f8d1 	bl	800570c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	330e      	adds	r3, #14
 800656e:	0019      	movs	r1, r3
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	2204      	movs	r2, #4
 8006576:	0018      	movs	r0, r3
 8006578:	f7ff f8c8 	bl	800570c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	330a      	adds	r3, #10
 8006580:	0019      	movs	r1, r3
 8006582:	23a0      	movs	r3, #160	; 0xa0
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	2204      	movs	r2, #4
 8006588:	0018      	movs	r0, r3
 800658a:	f7ff f8bf 	bl	800570c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	1d99      	adds	r1, r3, #6
 8006592:	23f0      	movs	r3, #240	; 0xf0
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	2204      	movs	r2, #4
 8006598:	0018      	movs	r0, r3
 800659a:	f7ff f8b7 	bl	800570c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	7c9a      	ldrb	r2, [r3, #18]
 80065a2:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <wizchip_setnetinfo+0x7c>)
 80065a4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7cda      	ldrb	r2, [r3, #19]
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <wizchip_setnetinfo+0x7c>)
 80065ac:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7d1a      	ldrb	r2, [r3, #20]
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <wizchip_setnetinfo+0x7c>)
 80065b4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7d5a      	ldrb	r2, [r3, #21]
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <wizchip_setnetinfo+0x7c>)
 80065bc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	7d9a      	ldrb	r2, [r3, #22]
 80065c2:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <wizchip_setnetinfo+0x80>)
 80065c4:	701a      	strb	r2, [r3, #0]
}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b002      	add	sp, #8
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	2000007c 	.word	0x2000007c
 80065d4:	20000080 	.word	0x20000080

080065d8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	2390      	movs	r3, #144	; 0x90
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	2206      	movs	r2, #6
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff f83f 	bl	800566c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	330e      	adds	r3, #14
 80065f2:	0019      	movs	r1, r3
 80065f4:	2380      	movs	r3, #128	; 0x80
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	2204      	movs	r2, #4
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7ff f836 	bl	800566c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	330a      	adds	r3, #10
 8006604:	0019      	movs	r1, r3
 8006606:	23a0      	movs	r3, #160	; 0xa0
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	2204      	movs	r2, #4
 800660c:	0018      	movs	r0, r3
 800660e:	f7ff f82d 	bl	800566c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	1d99      	adds	r1, r3, #6
 8006616:	23f0      	movs	r3, #240	; 0xf0
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	2204      	movs	r2, #4
 800661c:	0018      	movs	r0, r3
 800661e:	f7ff f825 	bl	800566c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <wizchip_getnetinfo+0x7c>)
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <wizchip_getnetinfo+0x7c>)
 800662c:	785a      	ldrb	r2, [r3, #1]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006632:	4b08      	ldr	r3, [pc, #32]	; (8006654 <wizchip_getnetinfo+0x7c>)
 8006634:	789a      	ldrb	r2, [r3, #2]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <wizchip_getnetinfo+0x7c>)
 800663c:	78da      	ldrb	r2, [r3, #3]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <wizchip_getnetinfo+0x80>)
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	759a      	strb	r2, [r3, #22]
}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	46bd      	mov	sp, r7
 800664e:	b002      	add	sp, #8
 8006650:	bd80      	pop	{r7, pc}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	2000007c 	.word	0x2000007c
 8006658:	20000080 	.word	0x20000080

0800665c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800665c:	b5b0      	push	{r4, r5, r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	0002      	movs	r2, r0
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 8006668:	230f      	movs	r3, #15
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
#if _WIZCHIP_ != 5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006670:	1dfb      	adds	r3, r7, #7
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	223a      	movs	r2, #58	; 0x3a
 8006676:	4393      	bics	r3, r2
 8006678:	d002      	beq.n	8006680 <wizchip_setnetmode+0x24>
 800667a:	2301      	movs	r3, #1
 800667c:	425b      	negs	r3, r3
 800667e:	e015      	b.n	80066ac <wizchip_setnetmode+0x50>
#endif
   tmp = getMR();
 8006680:	250f      	movs	r5, #15
 8006682:	197c      	adds	r4, r7, r5
 8006684:	2000      	movs	r0, #0
 8006686:	f7fe ff85 	bl	8005594 <WIZCHIP_READ>
 800668a:	0003      	movs	r3, r0
 800668c:	7023      	strb	r3, [r4, #0]
   tmp |= (uint8_t)netmode;
 800668e:	0028      	movs	r0, r5
 8006690:	183b      	adds	r3, r7, r0
 8006692:	1839      	adds	r1, r7, r0
 8006694:	1dfa      	adds	r2, r7, #7
 8006696:	7809      	ldrb	r1, [r1, #0]
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	701a      	strb	r2, [r3, #0]
   setMR(tmp);
 800669e:	183b      	adds	r3, r7, r0
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	0019      	movs	r1, r3
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7fe ffa9 	bl	80055fc <WIZCHIP_WRITE>
   return 0;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	0018      	movs	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b004      	add	sp, #16
 80066b2:	bdb0      	pop	{r4, r5, r7, pc}

080066b4 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80066b8:	2000      	movs	r0, #0
 80066ba:	f7fe ff6b 	bl	8005594 <WIZCHIP_READ>
 80066be:	0003      	movs	r3, r0
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	781a      	ldrb	r2, [r3, #0]
 80066d2:	23d8      	movs	r3, #216	; 0xd8
 80066d4:	015b      	lsls	r3, r3, #5
 80066d6:	0011      	movs	r1, r2
 80066d8:	0018      	movs	r0, r3
 80066da:	f7fe ff8f 	bl	80055fc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	885b      	ldrh	r3, [r3, #2]
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	23c8      	movs	r3, #200	; 0xc8
 80066ea:	015b      	lsls	r3, r3, #5
 80066ec:	0011      	movs	r1, r2
 80066ee:	0018      	movs	r0, r3
 80066f0:	f7fe ff84 	bl	80055fc <WIZCHIP_WRITE>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	885b      	ldrh	r3, [r3, #2]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	23d0      	movs	r3, #208	; 0xd0
 80066fc:	015b      	lsls	r3, r3, #5
 80066fe:	0011      	movs	r1, r2
 8006700:	0018      	movs	r0, r3
 8006702:	f7fe ff7b 	bl	80055fc <WIZCHIP_WRITE>
}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	46bd      	mov	sp, r7
 800670a:	b002      	add	sp, #8
 800670c:	bd80      	pop	{r7, pc}

0800670e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800670e:	b590      	push	{r4, r7, lr}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006716:	23d8      	movs	r3, #216	; 0xd8
 8006718:	015b      	lsls	r3, r3, #5
 800671a:	0018      	movs	r0, r3
 800671c:	f7fe ff3a 	bl	8005594 <WIZCHIP_READ>
 8006720:	0003      	movs	r3, r0
 8006722:	001a      	movs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8006728:	23c8      	movs	r3, #200	; 0xc8
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	0018      	movs	r0, r3
 800672e:	f7fe ff31 	bl	8005594 <WIZCHIP_READ>
 8006732:	0003      	movs	r3, r0
 8006734:	b29b      	uxth	r3, r3
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	b29c      	uxth	r4, r3
 800673a:	23d0      	movs	r3, #208	; 0xd0
 800673c:	015b      	lsls	r3, r3, #5
 800673e:	0018      	movs	r0, r3
 8006740:	f7fe ff28 	bl	8005594 <WIZCHIP_READ>
 8006744:	0003      	movs	r3, r0
 8006746:	b29b      	uxth	r3, r3
 8006748:	18e3      	adds	r3, r4, r3
 800674a:	b29a      	uxth	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	805a      	strh	r2, [r3, #2]
}
 8006750:	46c0      	nop			; (mov r8, r8)
 8006752:	46bd      	mov	sp, r7
 8006754:	b003      	add	sp, #12
 8006756:	bd90      	pop	{r4, r7, pc}

08006758 <__libc_init_array>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	2600      	movs	r6, #0
 800675c:	4d0c      	ldr	r5, [pc, #48]	; (8006790 <__libc_init_array+0x38>)
 800675e:	4c0d      	ldr	r4, [pc, #52]	; (8006794 <__libc_init_array+0x3c>)
 8006760:	1b64      	subs	r4, r4, r5
 8006762:	10a4      	asrs	r4, r4, #2
 8006764:	42a6      	cmp	r6, r4
 8006766:	d109      	bne.n	800677c <__libc_init_array+0x24>
 8006768:	2600      	movs	r6, #0
 800676a:	f000 f821 	bl	80067b0 <_init>
 800676e:	4d0a      	ldr	r5, [pc, #40]	; (8006798 <__libc_init_array+0x40>)
 8006770:	4c0a      	ldr	r4, [pc, #40]	; (800679c <__libc_init_array+0x44>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	42a6      	cmp	r6, r4
 8006778:	d105      	bne.n	8006786 <__libc_init_array+0x2e>
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	00b3      	lsls	r3, r6, #2
 800677e:	58eb      	ldr	r3, [r5, r3]
 8006780:	4798      	blx	r3
 8006782:	3601      	adds	r6, #1
 8006784:	e7ee      	b.n	8006764 <__libc_init_array+0xc>
 8006786:	00b3      	lsls	r3, r6, #2
 8006788:	58eb      	ldr	r3, [r5, r3]
 800678a:	4798      	blx	r3
 800678c:	3601      	adds	r6, #1
 800678e:	e7f2      	b.n	8006776 <__libc_init_array+0x1e>
 8006790:	08006868 	.word	0x08006868
 8006794:	08006868 	.word	0x08006868
 8006798:	08006868 	.word	0x08006868
 800679c:	0800686c 	.word	0x0800686c

080067a0 <memset>:
 80067a0:	0003      	movs	r3, r0
 80067a2:	1882      	adds	r2, r0, r2
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d100      	bne.n	80067aa <memset+0xa>
 80067a8:	4770      	bx	lr
 80067aa:	7019      	strb	r1, [r3, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	e7f9      	b.n	80067a4 <memset+0x4>

080067b0 <_init>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr

080067bc <_fini>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr
